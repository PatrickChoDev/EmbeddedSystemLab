
Lab06-02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d98  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08004f38  08004f38  00014f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005004  08005004  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08005004  08005004  00015004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800500c  0800500c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800500c  0800500c  0001500c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005010  08005010  00015010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005014  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ba4  20000060  08005074  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c04  08005074  00024c04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012353  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000290e  00000000  00000000  00032426  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e40  00000000  00000000  00034d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000af0  00000000  00000000  00035b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002a5a  00000000  00000000  00036668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f089  00000000  00000000  000390c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008fb69  00000000  00000000  0004814b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003db8  00000000  00000000  000d7cb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000dba6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004f20 	.word	0x08004f20

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08004f20 	.word	0x08004f20

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 faa0 	bl	8000a24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f86c 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f8fe 	bl	80006e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ec:	f000 f8d2 	bl	8000694 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f0:	f001 fd38 	bl	8001f64 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of led_blue */
  led_blueHandle = osTimerNew(led_timer_blue, osTimerPeriodic, NULL, &led_blue_attributes);
 80004f4:	4b23      	ldr	r3, [pc, #140]	; (8000584 <main+0xa8>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	2101      	movs	r1, #1
 80004fa:	4823      	ldr	r0, [pc, #140]	; (8000588 <main+0xac>)
 80004fc:	f001 fe3e 	bl	800217c <osTimerNew>
 8000500:	4603      	mov	r3, r0
 8000502:	4a22      	ldr	r2, [pc, #136]	; (800058c <main+0xb0>)
 8000504:	6013      	str	r3, [r2, #0]

  /* creation of led_green */
  led_greenHandle = osTimerNew(led_timer_green, osTimerPeriodic, NULL, &led_green_attributes);
 8000506:	4b22      	ldr	r3, [pc, #136]	; (8000590 <main+0xb4>)
 8000508:	2200      	movs	r2, #0
 800050a:	2101      	movs	r1, #1
 800050c:	4821      	ldr	r0, [pc, #132]	; (8000594 <main+0xb8>)
 800050e:	f001 fe35 	bl	800217c <osTimerNew>
 8000512:	4603      	mov	r3, r0
 8000514:	4a20      	ldr	r2, [pc, #128]	; (8000598 <main+0xbc>)
 8000516:	6013      	str	r3, [r2, #0]

  /* creation of led_red */
  led_redHandle = osTimerNew(led_timer_red, osTimerPeriodic, NULL, &led_red_attributes);
 8000518:	4b20      	ldr	r3, [pc, #128]	; (800059c <main+0xc0>)
 800051a:	2200      	movs	r2, #0
 800051c:	2101      	movs	r1, #1
 800051e:	4820      	ldr	r0, [pc, #128]	; (80005a0 <main+0xc4>)
 8000520:	f001 fe2c 	bl	800217c <osTimerNew>
 8000524:	4603      	mov	r3, r0
 8000526:	4a1f      	ldr	r2, [pc, #124]	; (80005a4 <main+0xc8>)
 8000528:	6013      	str	r3, [r2, #0]

  /* creation of led_white */
  led_whiteHandle = osTimerNew(led_timer_white, osTimerPeriodic, NULL, &led_white_attributes);
 800052a:	4b1f      	ldr	r3, [pc, #124]	; (80005a8 <main+0xcc>)
 800052c:	2200      	movs	r2, #0
 800052e:	2101      	movs	r1, #1
 8000530:	481e      	ldr	r0, [pc, #120]	; (80005ac <main+0xd0>)
 8000532:	f001 fe23 	bl	800217c <osTimerNew>
 8000536:	4603      	mov	r3, r0
 8000538:	4a1d      	ldr	r2, [pc, #116]	; (80005b0 <main+0xd4>)
 800053a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  osTimerStart(led_whiteHandle, 128);
 800053c:	4b1c      	ldr	r3, [pc, #112]	; (80005b0 <main+0xd4>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2180      	movs	r1, #128	; 0x80
 8000542:	4618      	mov	r0, r3
 8000544:	f001 fe96 	bl	8002274 <osTimerStart>
  osTimerStart(led_redHandle, 64);
 8000548:	4b16      	ldr	r3, [pc, #88]	; (80005a4 <main+0xc8>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	2140      	movs	r1, #64	; 0x40
 800054e:	4618      	mov	r0, r3
 8000550:	f001 fe90 	bl	8002274 <osTimerStart>
  osTimerStart(led_greenHandle, 18);
 8000554:	4b10      	ldr	r3, [pc, #64]	; (8000598 <main+0xbc>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	2112      	movs	r1, #18
 800055a:	4618      	mov	r0, r3
 800055c:	f001 fe8a 	bl	8002274 <osTimerStart>
  osTimerStart(led_blueHandle, 50);
 8000560:	4b0a      	ldr	r3, [pc, #40]	; (800058c <main+0xb0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	2132      	movs	r1, #50	; 0x32
 8000566:	4618      	mov	r0, r3
 8000568:	f001 fe84 	bl	8002274 <osTimerStart>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800056c:	4a11      	ldr	r2, [pc, #68]	; (80005b4 <main+0xd8>)
 800056e:	2100      	movs	r1, #0
 8000570:	4811      	ldr	r0, [pc, #68]	; (80005b8 <main+0xdc>)
 8000572:	f001 fd41 	bl	8001ff8 <osThreadNew>
 8000576:	4603      	mov	r3, r0
 8000578:	4a10      	ldr	r2, [pc, #64]	; (80005bc <main+0xe0>)
 800057a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800057c:	f001 fd16 	bl	8001fac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000580:	e7fe      	b.n	8000580 <main+0xa4>
 8000582:	bf00      	nop
 8000584:	08004fac 	.word	0x08004fac
 8000588:	08000801 	.word	0x08000801
 800058c:	200000c8 	.word	0x200000c8
 8000590:	08004fbc 	.word	0x08004fbc
 8000594:	0800081d 	.word	0x0800081d
 8000598:	200000cc 	.word	0x200000cc
 800059c:	08004fcc 	.word	0x08004fcc
 80005a0:	08000839 	.word	0x08000839
 80005a4:	200000d0 	.word	0x200000d0
 80005a8:	08004fdc 	.word	0x08004fdc
 80005ac:	08000855 	.word	0x08000855
 80005b0:	200000d4 	.word	0x200000d4
 80005b4:	08004f88 	.word	0x08004f88
 80005b8:	080007f1 	.word	0x080007f1
 80005bc:	200000c4 	.word	0x200000c4

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	; 0x50
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 0320 	add.w	r3, r7, #32
 80005ca:	2230      	movs	r2, #48	; 0x30
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f004 fbbc 	bl	8004d4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	4b28      	ldr	r3, [pc, #160]	; (800068c <SystemClock_Config+0xcc>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ec:	4a27      	ldr	r2, [pc, #156]	; (800068c <SystemClock_Config+0xcc>)
 80005ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f2:	6413      	str	r3, [r2, #64]	; 0x40
 80005f4:	4b25      	ldr	r3, [pc, #148]	; (800068c <SystemClock_Config+0xcc>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	4b22      	ldr	r3, [pc, #136]	; (8000690 <SystemClock_Config+0xd0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a21      	ldr	r2, [pc, #132]	; (8000690 <SystemClock_Config+0xd0>)
 800060a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <SystemClock_Config+0xd0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800061c:	2302      	movs	r3, #2
 800061e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000620:	2301      	movs	r3, #1
 8000622:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000624:	2310      	movs	r3, #16
 8000626:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000628:	2302      	movs	r3, #2
 800062a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800062c:	2300      	movs	r3, #0
 800062e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000630:	2310      	movs	r3, #16
 8000632:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000634:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000638:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800063a:	2304      	movs	r3, #4
 800063c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800063e:	2304      	movs	r3, #4
 8000640:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	4618      	mov	r0, r3
 8000648:	f000 fcfc 	bl	8001044 <HAL_RCC_OscConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000652:	f000 f90d 	bl	8000870 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000656:	230f      	movs	r3, #15
 8000658:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065a:	2302      	movs	r3, #2
 800065c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000662:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000666:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	2102      	movs	r1, #2
 8000672:	4618      	mov	r0, r3
 8000674:	f000 ff5e 	bl	8001534 <HAL_RCC_ClockConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800067e:	f000 f8f7 	bl	8000870 <Error_Handler>
  }
}
 8000682:	bf00      	nop
 8000684:	3750      	adds	r7, #80	; 0x50
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40023800 	.word	0x40023800
 8000690:	40007000 	.word	0x40007000

08000694 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000698:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_USART2_UART_Init+0x4c>)
 800069a:	4a12      	ldr	r2, [pc, #72]	; (80006e4 <MX_USART2_UART_Init+0x50>)
 800069c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800069e:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <MX_USART2_UART_Init+0x4c>)
 80006a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_USART2_UART_Init+0x4c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006ac:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <MX_USART2_UART_Init+0x4c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006b2:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <MX_USART2_UART_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <MX_USART2_UART_Init+0x4c>)
 80006ba:	220c      	movs	r2, #12
 80006bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006be:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <MX_USART2_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <MX_USART2_UART_Init+0x4c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <MX_USART2_UART_Init+0x4c>)
 80006cc:	f001 f952 	bl	8001974 <HAL_UART_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006d6:	f000 f8cb 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	2000007c 	.word	0x2000007c
 80006e4:	40004400 	.word	0x40004400

080006e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08a      	sub	sp, #40	; 0x28
 80006ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]
 8000702:	4b38      	ldr	r3, [pc, #224]	; (80007e4 <MX_GPIO_Init+0xfc>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a37      	ldr	r2, [pc, #220]	; (80007e4 <MX_GPIO_Init+0xfc>)
 8000708:	f043 0304 	orr.w	r3, r3, #4
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b35      	ldr	r3, [pc, #212]	; (80007e4 <MX_GPIO_Init+0xfc>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0304 	and.w	r3, r3, #4
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	60fb      	str	r3, [r7, #12]
 800071e:	4b31      	ldr	r3, [pc, #196]	; (80007e4 <MX_GPIO_Init+0xfc>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a30      	ldr	r2, [pc, #192]	; (80007e4 <MX_GPIO_Init+0xfc>)
 8000724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b2e      	ldr	r3, [pc, #184]	; (80007e4 <MX_GPIO_Init+0xfc>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	4b2a      	ldr	r3, [pc, #168]	; (80007e4 <MX_GPIO_Init+0xfc>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a29      	ldr	r2, [pc, #164]	; (80007e4 <MX_GPIO_Init+0xfc>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b27      	ldr	r3, [pc, #156]	; (80007e4 <MX_GPIO_Init+0xfc>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	4b23      	ldr	r3, [pc, #140]	; (80007e4 <MX_GPIO_Init+0xfc>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a22      	ldr	r2, [pc, #136]	; (80007e4 <MX_GPIO_Init+0xfc>)
 800075c:	f043 0302 	orr.w	r3, r3, #2
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b20      	ldr	r3, [pc, #128]	; (80007e4 <MX_GPIO_Init+0xfc>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0302 	and.w	r3, r3, #2
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8000774:	481c      	ldr	r0, [pc, #112]	; (80007e8 <MX_GPIO_Init+0x100>)
 8000776:	f000 fc31 	bl	8000fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	2180      	movs	r1, #128	; 0x80
 800077e:	481b      	ldr	r0, [pc, #108]	; (80007ec <MX_GPIO_Init+0x104>)
 8000780:	f000 fc2c 	bl	8000fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000784:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800078a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800078e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	4619      	mov	r1, r3
 800079a:	4814      	ldr	r0, [pc, #80]	; (80007ec <MX_GPIO_Init+0x104>)
 800079c:	f000 fa9a 	bl	8000cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 80007a0:	f44f 7338 	mov.w	r3, #736	; 0x2e0
 80007a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a6:	2301      	movs	r3, #1
 80007a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ae:	2300      	movs	r3, #0
 80007b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	4619      	mov	r1, r3
 80007b8:	480b      	ldr	r0, [pc, #44]	; (80007e8 <MX_GPIO_Init+0x100>)
 80007ba:	f000 fa8b 	bl	8000cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007be:	2380      	movs	r3, #128	; 0x80
 80007c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c2:	2301      	movs	r3, #1
 80007c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ca:	2300      	movs	r3, #0
 80007cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	4619      	mov	r1, r3
 80007d4:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_GPIO_Init+0x104>)
 80007d6:	f000 fa7d 	bl	8000cd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007da:	bf00      	nop
 80007dc:	3728      	adds	r7, #40	; 0x28
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40020000 	.word	0x40020000
 80007ec:	40020800 	.word	0x40020800

080007f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007f8:	2001      	movs	r0, #1
 80007fa:	f001 fc8f 	bl	800211c <osDelay>
 80007fe:	e7fb      	b.n	80007f8 <StartDefaultTask+0x8>

08000800 <led_timer_blue>:
  /* USER CODE END 5 */
}

/* led_timer_blue function */
void led_timer_blue(void *argument)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN led_timer_blue */
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000808:	2140      	movs	r1, #64	; 0x40
 800080a:	4803      	ldr	r0, [pc, #12]	; (8000818 <led_timer_blue+0x18>)
 800080c:	f000 fbff 	bl	800100e <HAL_GPIO_TogglePin>
  /* USER CODE END led_timer_blue */
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40020000 	.word	0x40020000

0800081c <led_timer_green>:

/* led_timer_green function */
void led_timer_green(void *argument)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN led_timer_green */
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8000824:	2180      	movs	r1, #128	; 0x80
 8000826:	4803      	ldr	r0, [pc, #12]	; (8000834 <led_timer_green+0x18>)
 8000828:	f000 fbf1 	bl	800100e <HAL_GPIO_TogglePin>
  /* USER CODE END led_timer_green */
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40020000 	.word	0x40020000

08000838 <led_timer_red>:

/* led_timer_red function */
void led_timer_red(void *argument)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN led_timer_red */
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8000840:	2180      	movs	r1, #128	; 0x80
 8000842:	4803      	ldr	r0, [pc, #12]	; (8000850 <led_timer_red+0x18>)
 8000844:	f000 fbe3 	bl	800100e <HAL_GPIO_TogglePin>
  /* USER CODE END led_timer_red */
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40020800 	.word	0x40020800

08000854 <led_timer_white>:

/* led_timer_white function */
void led_timer_white(void *argument)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN led_timer_white */
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800085c:	2120      	movs	r1, #32
 800085e:	4803      	ldr	r0, [pc, #12]	; (800086c <led_timer_white+0x18>)
 8000860:	f000 fbd5 	bl	800100e <HAL_GPIO_TogglePin>
  /* USER CODE END led_timer_white */
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40020000 	.word	0x40020000

08000870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000874:	b672      	cpsid	i
}
 8000876:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000878:	e7fe      	b.n	8000878 <Error_Handler+0x8>
	...

0800087c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <HAL_MspInit+0x54>)
 8000888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088a:	4a11      	ldr	r2, [pc, #68]	; (80008d0 <HAL_MspInit+0x54>)
 800088c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000890:	6453      	str	r3, [r2, #68]	; 0x44
 8000892:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <HAL_MspInit+0x54>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <HAL_MspInit+0x54>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a6:	4a0a      	ldr	r2, [pc, #40]	; (80008d0 <HAL_MspInit+0x54>)
 80008a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ac:	6413      	str	r3, [r2, #64]	; 0x40
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <HAL_MspInit+0x54>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008ba:	2200      	movs	r2, #0
 80008bc:	210f      	movs	r1, #15
 80008be:	f06f 0001 	mvn.w	r0, #1
 80008c2:	f000 f9de 	bl	8000c82 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40023800 	.word	0x40023800

080008d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08a      	sub	sp, #40	; 0x28
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a19      	ldr	r2, [pc, #100]	; (8000958 <HAL_UART_MspInit+0x84>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d12b      	bne.n	800094e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
 80008fa:	4b18      	ldr	r3, [pc, #96]	; (800095c <HAL_UART_MspInit+0x88>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fe:	4a17      	ldr	r2, [pc, #92]	; (800095c <HAL_UART_MspInit+0x88>)
 8000900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000904:	6413      	str	r3, [r2, #64]	; 0x40
 8000906:	4b15      	ldr	r3, [pc, #84]	; (800095c <HAL_UART_MspInit+0x88>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <HAL_UART_MspInit+0x88>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a10      	ldr	r2, [pc, #64]	; (800095c <HAL_UART_MspInit+0x88>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <HAL_UART_MspInit+0x88>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800092e:	230c      	movs	r3, #12
 8000930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093a:	2303      	movs	r3, #3
 800093c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800093e:	2307      	movs	r3, #7
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	4619      	mov	r1, r3
 8000948:	4805      	ldr	r0, [pc, #20]	; (8000960 <HAL_UART_MspInit+0x8c>)
 800094a:	f000 f9c3 	bl	8000cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800094e:	bf00      	nop
 8000950:	3728      	adds	r7, #40	; 0x28
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40004400 	.word	0x40004400
 800095c:	40023800 	.word	0x40023800
 8000960:	40020000 	.word	0x40020000

08000964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000968:	e7fe      	b.n	8000968 <NMI_Handler+0x4>

0800096a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096e:	e7fe      	b.n	800096e <HardFault_Handler+0x4>

08000970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <MemManage_Handler+0x4>

08000976 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <BusFault_Handler+0x4>

0800097c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <UsageFault_Handler+0x4>

08000982 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000994:	f000 f898 	bl	8000ac8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000998:	f003 f8b6 	bl	8003b08 <xTaskGetSchedulerState>
 800099c:	4603      	mov	r3, r0
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d001      	beq.n	80009a6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80009a2:	f003 ff59 	bl	8004858 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
	...

080009ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <SystemInit+0x20>)
 80009b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009b6:	4a05      	ldr	r2, [pc, #20]	; (80009cc <SystemInit+0x20>)
 80009b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a08 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009d4:	f7ff ffea 	bl	80009ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009d8:	480c      	ldr	r0, [pc, #48]	; (8000a0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009da:	490d      	ldr	r1, [pc, #52]	; (8000a10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009dc:	4a0d      	ldr	r2, [pc, #52]	; (8000a14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e0:	e002      	b.n	80009e8 <LoopCopyDataInit>

080009e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009e6:	3304      	adds	r3, #4

080009e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009ec:	d3f9      	bcc.n	80009e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ee:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009f0:	4c0a      	ldr	r4, [pc, #40]	; (8000a1c <LoopFillZerobss+0x22>)
  movs r3, #0
 80009f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f4:	e001      	b.n	80009fa <LoopFillZerobss>

080009f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f8:	3204      	adds	r2, #4

080009fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009fc:	d3fb      	bcc.n	80009f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009fe:	f004 fa03 	bl	8004e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a02:	f7ff fd6b 	bl	80004dc <main>
  bx  lr    
 8000a06:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a10:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000a14:	08005014 	.word	0x08005014
  ldr r2, =_sbss
 8000a18:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000a1c:	20004c04 	.word	0x20004c04

08000a20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a20:	e7fe      	b.n	8000a20 <ADC_IRQHandler>
	...

08000a24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a28:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <HAL_Init+0x40>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a0d      	ldr	r2, [pc, #52]	; (8000a64 <HAL_Init+0x40>)
 8000a2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a34:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <HAL_Init+0x40>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a0a      	ldr	r2, [pc, #40]	; (8000a64 <HAL_Init+0x40>)
 8000a3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <HAL_Init+0x40>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a07      	ldr	r2, [pc, #28]	; (8000a64 <HAL_Init+0x40>)
 8000a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a4c:	2003      	movs	r0, #3
 8000a4e:	f000 f90d 	bl	8000c6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a52:	200f      	movs	r0, #15
 8000a54:	f000 f808 	bl	8000a68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a58:	f7ff ff10 	bl	800087c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40023c00 	.word	0x40023c00

08000a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <HAL_InitTick+0x54>)
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <HAL_InitTick+0x58>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	4619      	mov	r1, r3
 8000a7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a86:	4618      	mov	r0, r3
 8000a88:	f000 f917 	bl	8000cba <HAL_SYSTICK_Config>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
 8000a94:	e00e      	b.n	8000ab4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2b0f      	cmp	r3, #15
 8000a9a:	d80a      	bhi.n	8000ab2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	6879      	ldr	r1, [r7, #4]
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000aa4:	f000 f8ed 	bl	8000c82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa8:	4a06      	ldr	r2, [pc, #24]	; (8000ac4 <HAL_InitTick+0x5c>)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	e000      	b.n	8000ab4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	20000008 	.word	0x20000008
 8000ac4:	20000004 	.word	0x20000004

08000ac8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_IncTick+0x20>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	4b06      	ldr	r3, [pc, #24]	; (8000aec <HAL_IncTick+0x24>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	4a04      	ldr	r2, [pc, #16]	; (8000aec <HAL_IncTick+0x24>)
 8000ada:	6013      	str	r3, [r2, #0]
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	20000008 	.word	0x20000008
 8000aec:	200000d8 	.word	0x200000d8

08000af0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  return uwTick;
 8000af4:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <HAL_GetTick+0x14>)
 8000af6:	681b      	ldr	r3, [r3, #0]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	200000d8 	.word	0x200000d8

08000b08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	f003 0307 	and.w	r3, r3, #7
 8000b16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <__NVIC_SetPriorityGrouping+0x44>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b1e:	68ba      	ldr	r2, [r7, #8]
 8000b20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b24:	4013      	ands	r3, r2
 8000b26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b3a:	4a04      	ldr	r2, [pc, #16]	; (8000b4c <__NVIC_SetPriorityGrouping+0x44>)
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	60d3      	str	r3, [r2, #12]
}
 8000b40:	bf00      	nop
 8000b42:	3714      	adds	r7, #20
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b54:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <__NVIC_GetPriorityGrouping+0x18>)
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	0a1b      	lsrs	r3, r3, #8
 8000b5a:	f003 0307 	and.w	r3, r3, #7
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	6039      	str	r1, [r7, #0]
 8000b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	db0a      	blt.n	8000b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	490c      	ldr	r1, [pc, #48]	; (8000bb8 <__NVIC_SetPriority+0x4c>)
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	0112      	lsls	r2, r2, #4
 8000b8c:	b2d2      	uxtb	r2, r2
 8000b8e:	440b      	add	r3, r1
 8000b90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b94:	e00a      	b.n	8000bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4908      	ldr	r1, [pc, #32]	; (8000bbc <__NVIC_SetPriority+0x50>)
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	f003 030f 	and.w	r3, r3, #15
 8000ba2:	3b04      	subs	r3, #4
 8000ba4:	0112      	lsls	r2, r2, #4
 8000ba6:	b2d2      	uxtb	r2, r2
 8000ba8:	440b      	add	r3, r1
 8000baa:	761a      	strb	r2, [r3, #24]
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000e100 	.word	0xe000e100
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b089      	sub	sp, #36	; 0x24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd4:	69fb      	ldr	r3, [r7, #28]
 8000bd6:	f1c3 0307 	rsb	r3, r3, #7
 8000bda:	2b04      	cmp	r3, #4
 8000bdc:	bf28      	it	cs
 8000bde:	2304      	movcs	r3, #4
 8000be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	3304      	adds	r3, #4
 8000be6:	2b06      	cmp	r3, #6
 8000be8:	d902      	bls.n	8000bf0 <NVIC_EncodePriority+0x30>
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	3b03      	subs	r3, #3
 8000bee:	e000      	b.n	8000bf2 <NVIC_EncodePriority+0x32>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	43da      	mvns	r2, r3
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	401a      	ands	r2, r3
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c12:	43d9      	mvns	r1, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c18:	4313      	orrs	r3, r2
         );
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3724      	adds	r7, #36	; 0x24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
	...

08000c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3b01      	subs	r3, #1
 8000c34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c38:	d301      	bcc.n	8000c3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e00f      	b.n	8000c5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <SysTick_Config+0x40>)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c46:	210f      	movs	r1, #15
 8000c48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c4c:	f7ff ff8e 	bl	8000b6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <SysTick_Config+0x40>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c56:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <SysTick_Config+0x40>)
 8000c58:	2207      	movs	r2, #7
 8000c5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	e000e010 	.word	0xe000e010

08000c6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff ff47 	bl	8000b08 <__NVIC_SetPriorityGrouping>
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b086      	sub	sp, #24
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	4603      	mov	r3, r0
 8000c8a:	60b9      	str	r1, [r7, #8]
 8000c8c:	607a      	str	r2, [r7, #4]
 8000c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c94:	f7ff ff5c 	bl	8000b50 <__NVIC_GetPriorityGrouping>
 8000c98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	68b9      	ldr	r1, [r7, #8]
 8000c9e:	6978      	ldr	r0, [r7, #20]
 8000ca0:	f7ff ff8e 	bl	8000bc0 <NVIC_EncodePriority>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000caa:	4611      	mov	r1, r2
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ff5d 	bl	8000b6c <__NVIC_SetPriority>
}
 8000cb2:	bf00      	nop
 8000cb4:	3718      	adds	r7, #24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff ffb0 	bl	8000c28 <SysTick_Config>
 8000cc8:	4603      	mov	r3, r0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b089      	sub	sp, #36	; 0x24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cea:	2300      	movs	r3, #0
 8000cec:	61fb      	str	r3, [r7, #28]
 8000cee:	e159      	b.n	8000fa4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	697a      	ldr	r2, [r7, #20]
 8000d00:	4013      	ands	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	f040 8148 	bne.w	8000f9e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f003 0303 	and.w	r3, r3, #3
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d005      	beq.n	8000d26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d130      	bne.n	8000d88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	2203      	movs	r2, #3
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	43db      	mvns	r3, r3
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	68da      	ldr	r2, [r3, #12]
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	43db      	mvns	r3, r3
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	091b      	lsrs	r3, r3, #4
 8000d72:	f003 0201 	and.w	r2, r3, #1
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f003 0303 	and.w	r3, r3, #3
 8000d90:	2b03      	cmp	r3, #3
 8000d92:	d017      	beq.n	8000dc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	2203      	movs	r2, #3
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	43db      	mvns	r3, r3
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	4013      	ands	r3, r2
 8000daa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	689a      	ldr	r2, [r3, #8]
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f003 0303 	and.w	r3, r3, #3
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	d123      	bne.n	8000e18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	08da      	lsrs	r2, r3, #3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3208      	adds	r2, #8
 8000dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	f003 0307 	and.w	r3, r3, #7
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	220f      	movs	r2, #15
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	4013      	ands	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	691a      	ldr	r2, [r3, #16]
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	08da      	lsrs	r2, r3, #3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	3208      	adds	r2, #8
 8000e12:	69b9      	ldr	r1, [r7, #24]
 8000e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	2203      	movs	r2, #3
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f003 0203 	and.w	r2, r3, #3
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	f000 80a2 	beq.w	8000f9e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	4b57      	ldr	r3, [pc, #348]	; (8000fbc <HAL_GPIO_Init+0x2e8>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e62:	4a56      	ldr	r2, [pc, #344]	; (8000fbc <HAL_GPIO_Init+0x2e8>)
 8000e64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e68:	6453      	str	r3, [r2, #68]	; 0x44
 8000e6a:	4b54      	ldr	r3, [pc, #336]	; (8000fbc <HAL_GPIO_Init+0x2e8>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e76:	4a52      	ldr	r2, [pc, #328]	; (8000fc0 <HAL_GPIO_Init+0x2ec>)
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	089b      	lsrs	r3, r3, #2
 8000e7c:	3302      	adds	r3, #2
 8000e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	f003 0303 	and.w	r3, r3, #3
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	220f      	movs	r2, #15
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4013      	ands	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a49      	ldr	r2, [pc, #292]	; (8000fc4 <HAL_GPIO_Init+0x2f0>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d019      	beq.n	8000ed6 <HAL_GPIO_Init+0x202>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a48      	ldr	r2, [pc, #288]	; (8000fc8 <HAL_GPIO_Init+0x2f4>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d013      	beq.n	8000ed2 <HAL_GPIO_Init+0x1fe>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a47      	ldr	r2, [pc, #284]	; (8000fcc <HAL_GPIO_Init+0x2f8>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d00d      	beq.n	8000ece <HAL_GPIO_Init+0x1fa>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a46      	ldr	r2, [pc, #280]	; (8000fd0 <HAL_GPIO_Init+0x2fc>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d007      	beq.n	8000eca <HAL_GPIO_Init+0x1f6>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a45      	ldr	r2, [pc, #276]	; (8000fd4 <HAL_GPIO_Init+0x300>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d101      	bne.n	8000ec6 <HAL_GPIO_Init+0x1f2>
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	e008      	b.n	8000ed8 <HAL_GPIO_Init+0x204>
 8000ec6:	2307      	movs	r3, #7
 8000ec8:	e006      	b.n	8000ed8 <HAL_GPIO_Init+0x204>
 8000eca:	2303      	movs	r3, #3
 8000ecc:	e004      	b.n	8000ed8 <HAL_GPIO_Init+0x204>
 8000ece:	2302      	movs	r3, #2
 8000ed0:	e002      	b.n	8000ed8 <HAL_GPIO_Init+0x204>
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e000      	b.n	8000ed8 <HAL_GPIO_Init+0x204>
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	69fa      	ldr	r2, [r7, #28]
 8000eda:	f002 0203 	and.w	r2, r2, #3
 8000ede:	0092      	lsls	r2, r2, #2
 8000ee0:	4093      	lsls	r3, r2
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ee8:	4935      	ldr	r1, [pc, #212]	; (8000fc0 <HAL_GPIO_Init+0x2ec>)
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	089b      	lsrs	r3, r3, #2
 8000eee:	3302      	adds	r3, #2
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ef6:	4b38      	ldr	r3, [pc, #224]	; (8000fd8 <HAL_GPIO_Init+0x304>)
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	43db      	mvns	r3, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4013      	ands	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d003      	beq.n	8000f1a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f1a:	4a2f      	ldr	r2, [pc, #188]	; (8000fd8 <HAL_GPIO_Init+0x304>)
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f20:	4b2d      	ldr	r3, [pc, #180]	; (8000fd8 <HAL_GPIO_Init+0x304>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d003      	beq.n	8000f44 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f44:	4a24      	ldr	r2, [pc, #144]	; (8000fd8 <HAL_GPIO_Init+0x304>)
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f4a:	4b23      	ldr	r3, [pc, #140]	; (8000fd8 <HAL_GPIO_Init+0x304>)
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	43db      	mvns	r3, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4013      	ands	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d003      	beq.n	8000f6e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f6e:	4a1a      	ldr	r2, [pc, #104]	; (8000fd8 <HAL_GPIO_Init+0x304>)
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f74:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <HAL_GPIO_Init+0x304>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d003      	beq.n	8000f98 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f98:	4a0f      	ldr	r2, [pc, #60]	; (8000fd8 <HAL_GPIO_Init+0x304>)
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	61fb      	str	r3, [r7, #28]
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	2b0f      	cmp	r3, #15
 8000fa8:	f67f aea2 	bls.w	8000cf0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	3724      	adds	r7, #36	; 0x24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	40013800 	.word	0x40013800
 8000fc4:	40020000 	.word	0x40020000
 8000fc8:	40020400 	.word	0x40020400
 8000fcc:	40020800 	.word	0x40020800
 8000fd0:	40020c00 	.word	0x40020c00
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	40013c00 	.word	0x40013c00

08000fdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	807b      	strh	r3, [r7, #2]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fec:	787b      	ldrb	r3, [r7, #1]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ff2:	887a      	ldrh	r2, [r7, #2]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ff8:	e003      	b.n	8001002 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ffa:	887b      	ldrh	r3, [r7, #2]
 8000ffc:	041a      	lsls	r2, r3, #16
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	619a      	str	r2, [r3, #24]
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800100e:	b480      	push	{r7}
 8001010:	b085      	sub	sp, #20
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
 8001016:	460b      	mov	r3, r1
 8001018:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	695b      	ldr	r3, [r3, #20]
 800101e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001020:	887a      	ldrh	r2, [r7, #2]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	4013      	ands	r3, r2
 8001026:	041a      	lsls	r2, r3, #16
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	43d9      	mvns	r1, r3
 800102c:	887b      	ldrh	r3, [r7, #2]
 800102e:	400b      	ands	r3, r1
 8001030:	431a      	orrs	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	619a      	str	r2, [r3, #24]
}
 8001036:	bf00      	nop
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
	...

08001044 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d101      	bne.n	8001056 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e267      	b.n	8001526 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	2b00      	cmp	r3, #0
 8001060:	d075      	beq.n	800114e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001062:	4b88      	ldr	r3, [pc, #544]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	f003 030c 	and.w	r3, r3, #12
 800106a:	2b04      	cmp	r3, #4
 800106c:	d00c      	beq.n	8001088 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800106e:	4b85      	ldr	r3, [pc, #532]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001076:	2b08      	cmp	r3, #8
 8001078:	d112      	bne.n	80010a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800107a:	4b82      	ldr	r3, [pc, #520]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001082:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001086:	d10b      	bne.n	80010a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001088:	4b7e      	ldr	r3, [pc, #504]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d05b      	beq.n	800114c <HAL_RCC_OscConfig+0x108>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d157      	bne.n	800114c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	e242      	b.n	8001526 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010a8:	d106      	bne.n	80010b8 <HAL_RCC_OscConfig+0x74>
 80010aa:	4b76      	ldr	r3, [pc, #472]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a75      	ldr	r2, [pc, #468]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 80010b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010b4:	6013      	str	r3, [r2, #0]
 80010b6:	e01d      	b.n	80010f4 <HAL_RCC_OscConfig+0xb0>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010c0:	d10c      	bne.n	80010dc <HAL_RCC_OscConfig+0x98>
 80010c2:	4b70      	ldr	r3, [pc, #448]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a6f      	ldr	r2, [pc, #444]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 80010c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	4b6d      	ldr	r3, [pc, #436]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a6c      	ldr	r2, [pc, #432]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 80010d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d8:	6013      	str	r3, [r2, #0]
 80010da:	e00b      	b.n	80010f4 <HAL_RCC_OscConfig+0xb0>
 80010dc:	4b69      	ldr	r3, [pc, #420]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a68      	ldr	r2, [pc, #416]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 80010e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010e6:	6013      	str	r3, [r2, #0]
 80010e8:	4b66      	ldr	r3, [pc, #408]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a65      	ldr	r2, [pc, #404]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 80010ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d013      	beq.n	8001124 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010fc:	f7ff fcf8 	bl	8000af0 <HAL_GetTick>
 8001100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001102:	e008      	b.n	8001116 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001104:	f7ff fcf4 	bl	8000af0 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b64      	cmp	r3, #100	; 0x64
 8001110:	d901      	bls.n	8001116 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e207      	b.n	8001526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001116:	4b5b      	ldr	r3, [pc, #364]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d0f0      	beq.n	8001104 <HAL_RCC_OscConfig+0xc0>
 8001122:	e014      	b.n	800114e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001124:	f7ff fce4 	bl	8000af0 <HAL_GetTick>
 8001128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800112a:	e008      	b.n	800113e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800112c:	f7ff fce0 	bl	8000af0 <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b64      	cmp	r3, #100	; 0x64
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e1f3      	b.n	8001526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800113e:	4b51      	ldr	r3, [pc, #324]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f0      	bne.n	800112c <HAL_RCC_OscConfig+0xe8>
 800114a:	e000      	b.n	800114e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800114c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d063      	beq.n	8001222 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800115a:	4b4a      	ldr	r3, [pc, #296]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	f003 030c 	and.w	r3, r3, #12
 8001162:	2b00      	cmp	r3, #0
 8001164:	d00b      	beq.n	800117e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001166:	4b47      	ldr	r3, [pc, #284]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800116e:	2b08      	cmp	r3, #8
 8001170:	d11c      	bne.n	80011ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001172:	4b44      	ldr	r3, [pc, #272]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d116      	bne.n	80011ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800117e:	4b41      	ldr	r3, [pc, #260]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	2b00      	cmp	r3, #0
 8001188:	d005      	beq.n	8001196 <HAL_RCC_OscConfig+0x152>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d001      	beq.n	8001196 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e1c7      	b.n	8001526 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001196:	4b3b      	ldr	r3, [pc, #236]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	691b      	ldr	r3, [r3, #16]
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	4937      	ldr	r1, [pc, #220]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 80011a6:	4313      	orrs	r3, r2
 80011a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011aa:	e03a      	b.n	8001222 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d020      	beq.n	80011f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011b4:	4b34      	ldr	r3, [pc, #208]	; (8001288 <HAL_RCC_OscConfig+0x244>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ba:	f7ff fc99 	bl	8000af0 <HAL_GetTick>
 80011be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c0:	e008      	b.n	80011d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011c2:	f7ff fc95 	bl	8000af0 <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e1a8      	b.n	8001526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d4:	4b2b      	ldr	r3, [pc, #172]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0302 	and.w	r3, r3, #2
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d0f0      	beq.n	80011c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e0:	4b28      	ldr	r3, [pc, #160]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	691b      	ldr	r3, [r3, #16]
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	4925      	ldr	r1, [pc, #148]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 80011f0:	4313      	orrs	r3, r2
 80011f2:	600b      	str	r3, [r1, #0]
 80011f4:	e015      	b.n	8001222 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011f6:	4b24      	ldr	r3, [pc, #144]	; (8001288 <HAL_RCC_OscConfig+0x244>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011fc:	f7ff fc78 	bl	8000af0 <HAL_GetTick>
 8001200:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001204:	f7ff fc74 	bl	8000af0 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e187      	b.n	8001526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001216:	4b1b      	ldr	r3, [pc, #108]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	2b00      	cmp	r3, #0
 8001220:	d1f0      	bne.n	8001204 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0308 	and.w	r3, r3, #8
 800122a:	2b00      	cmp	r3, #0
 800122c:	d036      	beq.n	800129c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d016      	beq.n	8001264 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001236:	4b15      	ldr	r3, [pc, #84]	; (800128c <HAL_RCC_OscConfig+0x248>)
 8001238:	2201      	movs	r2, #1
 800123a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800123c:	f7ff fc58 	bl	8000af0 <HAL_GetTick>
 8001240:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001244:	f7ff fc54 	bl	8000af0 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b02      	cmp	r3, #2
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e167      	b.n	8001526 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001256:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 8001258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d0f0      	beq.n	8001244 <HAL_RCC_OscConfig+0x200>
 8001262:	e01b      	b.n	800129c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001264:	4b09      	ldr	r3, [pc, #36]	; (800128c <HAL_RCC_OscConfig+0x248>)
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800126a:	f7ff fc41 	bl	8000af0 <HAL_GetTick>
 800126e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001270:	e00e      	b.n	8001290 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001272:	f7ff fc3d 	bl	8000af0 <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d907      	bls.n	8001290 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001280:	2303      	movs	r3, #3
 8001282:	e150      	b.n	8001526 <HAL_RCC_OscConfig+0x4e2>
 8001284:	40023800 	.word	0x40023800
 8001288:	42470000 	.word	0x42470000
 800128c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001290:	4b88      	ldr	r3, [pc, #544]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 8001292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d1ea      	bne.n	8001272 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f000 8097 	beq.w	80013d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012aa:	2300      	movs	r3, #0
 80012ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ae:	4b81      	ldr	r3, [pc, #516]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d10f      	bne.n	80012da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	4b7d      	ldr	r3, [pc, #500]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	4a7c      	ldr	r2, [pc, #496]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 80012c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ca:	4b7a      	ldr	r3, [pc, #488]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012d6:	2301      	movs	r3, #1
 80012d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012da:	4b77      	ldr	r3, [pc, #476]	; (80014b8 <HAL_RCC_OscConfig+0x474>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d118      	bne.n	8001318 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012e6:	4b74      	ldr	r3, [pc, #464]	; (80014b8 <HAL_RCC_OscConfig+0x474>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a73      	ldr	r2, [pc, #460]	; (80014b8 <HAL_RCC_OscConfig+0x474>)
 80012ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012f2:	f7ff fbfd 	bl	8000af0 <HAL_GetTick>
 80012f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f8:	e008      	b.n	800130c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012fa:	f7ff fbf9 	bl	8000af0 <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d901      	bls.n	800130c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e10c      	b.n	8001526 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800130c:	4b6a      	ldr	r3, [pc, #424]	; (80014b8 <HAL_RCC_OscConfig+0x474>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0f0      	beq.n	80012fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d106      	bne.n	800132e <HAL_RCC_OscConfig+0x2ea>
 8001320:	4b64      	ldr	r3, [pc, #400]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 8001322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001324:	4a63      	ldr	r2, [pc, #396]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	6713      	str	r3, [r2, #112]	; 0x70
 800132c:	e01c      	b.n	8001368 <HAL_RCC_OscConfig+0x324>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	2b05      	cmp	r3, #5
 8001334:	d10c      	bne.n	8001350 <HAL_RCC_OscConfig+0x30c>
 8001336:	4b5f      	ldr	r3, [pc, #380]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 8001338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800133a:	4a5e      	ldr	r2, [pc, #376]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 800133c:	f043 0304 	orr.w	r3, r3, #4
 8001340:	6713      	str	r3, [r2, #112]	; 0x70
 8001342:	4b5c      	ldr	r3, [pc, #368]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 8001344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001346:	4a5b      	ldr	r2, [pc, #364]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6713      	str	r3, [r2, #112]	; 0x70
 800134e:	e00b      	b.n	8001368 <HAL_RCC_OscConfig+0x324>
 8001350:	4b58      	ldr	r3, [pc, #352]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 8001352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001354:	4a57      	ldr	r2, [pc, #348]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 8001356:	f023 0301 	bic.w	r3, r3, #1
 800135a:	6713      	str	r3, [r2, #112]	; 0x70
 800135c:	4b55      	ldr	r3, [pc, #340]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 800135e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001360:	4a54      	ldr	r2, [pc, #336]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 8001362:	f023 0304 	bic.w	r3, r3, #4
 8001366:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d015      	beq.n	800139c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001370:	f7ff fbbe 	bl	8000af0 <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001376:	e00a      	b.n	800138e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001378:	f7ff fbba 	bl	8000af0 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	f241 3288 	movw	r2, #5000	; 0x1388
 8001386:	4293      	cmp	r3, r2
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e0cb      	b.n	8001526 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800138e:	4b49      	ldr	r3, [pc, #292]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 8001390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0ee      	beq.n	8001378 <HAL_RCC_OscConfig+0x334>
 800139a:	e014      	b.n	80013c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800139c:	f7ff fba8 	bl	8000af0 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013a2:	e00a      	b.n	80013ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013a4:	f7ff fba4 	bl	8000af0 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e0b5      	b.n	8001526 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ba:	4b3e      	ldr	r3, [pc, #248]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 80013bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1ee      	bne.n	80013a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013c6:	7dfb      	ldrb	r3, [r7, #23]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d105      	bne.n	80013d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013cc:	4b39      	ldr	r3, [pc, #228]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 80013ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d0:	4a38      	ldr	r2, [pc, #224]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 80013d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	f000 80a1 	beq.w	8001524 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013e2:	4b34      	ldr	r3, [pc, #208]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f003 030c 	and.w	r3, r3, #12
 80013ea:	2b08      	cmp	r3, #8
 80013ec:	d05c      	beq.n	80014a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d141      	bne.n	800147a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013f6:	4b31      	ldr	r3, [pc, #196]	; (80014bc <HAL_RCC_OscConfig+0x478>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fc:	f7ff fb78 	bl	8000af0 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001404:	f7ff fb74 	bl	8000af0 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e087      	b.n	8001526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001416:	4b27      	ldr	r3, [pc, #156]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1f0      	bne.n	8001404 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	69da      	ldr	r2, [r3, #28]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a1b      	ldr	r3, [r3, #32]
 800142a:	431a      	orrs	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001430:	019b      	lsls	r3, r3, #6
 8001432:	431a      	orrs	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001438:	085b      	lsrs	r3, r3, #1
 800143a:	3b01      	subs	r3, #1
 800143c:	041b      	lsls	r3, r3, #16
 800143e:	431a      	orrs	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001444:	061b      	lsls	r3, r3, #24
 8001446:	491b      	ldr	r1, [pc, #108]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 8001448:	4313      	orrs	r3, r2
 800144a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800144c:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <HAL_RCC_OscConfig+0x478>)
 800144e:	2201      	movs	r2, #1
 8001450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001452:	f7ff fb4d 	bl	8000af0 <HAL_GetTick>
 8001456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001458:	e008      	b.n	800146c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800145a:	f7ff fb49 	bl	8000af0 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e05c      	b.n	8001526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800146c:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d0f0      	beq.n	800145a <HAL_RCC_OscConfig+0x416>
 8001478:	e054      	b.n	8001524 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800147a:	4b10      	ldr	r3, [pc, #64]	; (80014bc <HAL_RCC_OscConfig+0x478>)
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001480:	f7ff fb36 	bl	8000af0 <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001488:	f7ff fb32 	bl	8000af0 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e045      	b.n	8001526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800149a:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1f0      	bne.n	8001488 <HAL_RCC_OscConfig+0x444>
 80014a6:	e03d      	b.n	8001524 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d107      	bne.n	80014c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e038      	b.n	8001526 <HAL_RCC_OscConfig+0x4e2>
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40007000 	.word	0x40007000
 80014bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014c0:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <HAL_RCC_OscConfig+0x4ec>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d028      	beq.n	8001520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014d8:	429a      	cmp	r2, r3
 80014da:	d121      	bne.n	8001520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d11a      	bne.n	8001520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014f0:	4013      	ands	r3, r2
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d111      	bne.n	8001520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001506:	085b      	lsrs	r3, r3, #1
 8001508:	3b01      	subs	r3, #1
 800150a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800150c:	429a      	cmp	r2, r3
 800150e:	d107      	bne.n	8001520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800151c:	429a      	cmp	r2, r3
 800151e:	d001      	beq.n	8001524 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e000      	b.n	8001526 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40023800 	.word	0x40023800

08001534 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d101      	bne.n	8001548 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e0cc      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001548:	4b68      	ldr	r3, [pc, #416]	; (80016ec <HAL_RCC_ClockConfig+0x1b8>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0307 	and.w	r3, r3, #7
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	429a      	cmp	r2, r3
 8001554:	d90c      	bls.n	8001570 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001556:	4b65      	ldr	r3, [pc, #404]	; (80016ec <HAL_RCC_ClockConfig+0x1b8>)
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800155e:	4b63      	ldr	r3, [pc, #396]	; (80016ec <HAL_RCC_ClockConfig+0x1b8>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	429a      	cmp	r2, r3
 800156a:	d001      	beq.n	8001570 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e0b8      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d020      	beq.n	80015be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	2b00      	cmp	r3, #0
 8001586:	d005      	beq.n	8001594 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001588:	4b59      	ldr	r3, [pc, #356]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	4a58      	ldr	r2, [pc, #352]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 800158e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001592:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0308 	and.w	r3, r3, #8
 800159c:	2b00      	cmp	r3, #0
 800159e:	d005      	beq.n	80015ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015a0:	4b53      	ldr	r3, [pc, #332]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	4a52      	ldr	r2, [pc, #328]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 80015a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015ac:	4b50      	ldr	r3, [pc, #320]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	494d      	ldr	r1, [pc, #308]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d044      	beq.n	8001654 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d107      	bne.n	80015e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d2:	4b47      	ldr	r3, [pc, #284]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d119      	bne.n	8001612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e07f      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d003      	beq.n	80015f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015ee:	2b03      	cmp	r3, #3
 80015f0:	d107      	bne.n	8001602 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f2:	4b3f      	ldr	r3, [pc, #252]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d109      	bne.n	8001612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e06f      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001602:	4b3b      	ldr	r3, [pc, #236]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e067      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001612:	4b37      	ldr	r3, [pc, #220]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f023 0203 	bic.w	r2, r3, #3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	4934      	ldr	r1, [pc, #208]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001620:	4313      	orrs	r3, r2
 8001622:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001624:	f7ff fa64 	bl	8000af0 <HAL_GetTick>
 8001628:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800162a:	e00a      	b.n	8001642 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800162c:	f7ff fa60 	bl	8000af0 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	f241 3288 	movw	r2, #5000	; 0x1388
 800163a:	4293      	cmp	r3, r2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e04f      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001642:	4b2b      	ldr	r3, [pc, #172]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 020c 	and.w	r2, r3, #12
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	429a      	cmp	r2, r3
 8001652:	d1eb      	bne.n	800162c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001654:	4b25      	ldr	r3, [pc, #148]	; (80016ec <HAL_RCC_ClockConfig+0x1b8>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0307 	and.w	r3, r3, #7
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	429a      	cmp	r2, r3
 8001660:	d20c      	bcs.n	800167c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001662:	4b22      	ldr	r3, [pc, #136]	; (80016ec <HAL_RCC_ClockConfig+0x1b8>)
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800166a:	4b20      	ldr	r3, [pc, #128]	; (80016ec <HAL_RCC_ClockConfig+0x1b8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	429a      	cmp	r2, r3
 8001676:	d001      	beq.n	800167c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e032      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0304 	and.w	r3, r3, #4
 8001684:	2b00      	cmp	r3, #0
 8001686:	d008      	beq.n	800169a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001688:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	4916      	ldr	r1, [pc, #88]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001696:	4313      	orrs	r3, r2
 8001698:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0308 	and.w	r3, r3, #8
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d009      	beq.n	80016ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016a6:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	490e      	ldr	r1, [pc, #56]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016ba:	f000 f821 	bl	8001700 <HAL_RCC_GetSysClockFreq>
 80016be:	4602      	mov	r2, r0
 80016c0:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	091b      	lsrs	r3, r3, #4
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	490a      	ldr	r1, [pc, #40]	; (80016f4 <HAL_RCC_ClockConfig+0x1c0>)
 80016cc:	5ccb      	ldrb	r3, [r1, r3]
 80016ce:	fa22 f303 	lsr.w	r3, r2, r3
 80016d2:	4a09      	ldr	r2, [pc, #36]	; (80016f8 <HAL_RCC_ClockConfig+0x1c4>)
 80016d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016d6:	4b09      	ldr	r3, [pc, #36]	; (80016fc <HAL_RCC_ClockConfig+0x1c8>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff f9c4 	bl	8000a68 <HAL_InitTick>

  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40023c00 	.word	0x40023c00
 80016f0:	40023800 	.word	0x40023800
 80016f4:	08004fec 	.word	0x08004fec
 80016f8:	20000000 	.word	0x20000000
 80016fc:	20000004 	.word	0x20000004

08001700 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001700:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001704:	b094      	sub	sp, #80	; 0x50
 8001706:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001708:	2300      	movs	r3, #0
 800170a:	647b      	str	r3, [r7, #68]	; 0x44
 800170c:	2300      	movs	r3, #0
 800170e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001710:	2300      	movs	r3, #0
 8001712:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001714:	2300      	movs	r3, #0
 8001716:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001718:	4b79      	ldr	r3, [pc, #484]	; (8001900 <HAL_RCC_GetSysClockFreq+0x200>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f003 030c 	and.w	r3, r3, #12
 8001720:	2b08      	cmp	r3, #8
 8001722:	d00d      	beq.n	8001740 <HAL_RCC_GetSysClockFreq+0x40>
 8001724:	2b08      	cmp	r3, #8
 8001726:	f200 80e1 	bhi.w	80018ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800172a:	2b00      	cmp	r3, #0
 800172c:	d002      	beq.n	8001734 <HAL_RCC_GetSysClockFreq+0x34>
 800172e:	2b04      	cmp	r3, #4
 8001730:	d003      	beq.n	800173a <HAL_RCC_GetSysClockFreq+0x3a>
 8001732:	e0db      	b.n	80018ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001734:	4b73      	ldr	r3, [pc, #460]	; (8001904 <HAL_RCC_GetSysClockFreq+0x204>)
 8001736:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001738:	e0db      	b.n	80018f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800173a:	4b73      	ldr	r3, [pc, #460]	; (8001908 <HAL_RCC_GetSysClockFreq+0x208>)
 800173c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800173e:	e0d8      	b.n	80018f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001740:	4b6f      	ldr	r3, [pc, #444]	; (8001900 <HAL_RCC_GetSysClockFreq+0x200>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001748:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800174a:	4b6d      	ldr	r3, [pc, #436]	; (8001900 <HAL_RCC_GetSysClockFreq+0x200>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d063      	beq.n	800181e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001756:	4b6a      	ldr	r3, [pc, #424]	; (8001900 <HAL_RCC_GetSysClockFreq+0x200>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	099b      	lsrs	r3, r3, #6
 800175c:	2200      	movs	r2, #0
 800175e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001760:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001764:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001768:	633b      	str	r3, [r7, #48]	; 0x30
 800176a:	2300      	movs	r3, #0
 800176c:	637b      	str	r3, [r7, #52]	; 0x34
 800176e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001772:	4622      	mov	r2, r4
 8001774:	462b      	mov	r3, r5
 8001776:	f04f 0000 	mov.w	r0, #0
 800177a:	f04f 0100 	mov.w	r1, #0
 800177e:	0159      	lsls	r1, r3, #5
 8001780:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001784:	0150      	lsls	r0, r2, #5
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	4621      	mov	r1, r4
 800178c:	1a51      	subs	r1, r2, r1
 800178e:	6139      	str	r1, [r7, #16]
 8001790:	4629      	mov	r1, r5
 8001792:	eb63 0301 	sbc.w	r3, r3, r1
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	f04f 0200 	mov.w	r2, #0
 800179c:	f04f 0300 	mov.w	r3, #0
 80017a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80017a4:	4659      	mov	r1, fp
 80017a6:	018b      	lsls	r3, r1, #6
 80017a8:	4651      	mov	r1, sl
 80017aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017ae:	4651      	mov	r1, sl
 80017b0:	018a      	lsls	r2, r1, #6
 80017b2:	4651      	mov	r1, sl
 80017b4:	ebb2 0801 	subs.w	r8, r2, r1
 80017b8:	4659      	mov	r1, fp
 80017ba:	eb63 0901 	sbc.w	r9, r3, r1
 80017be:	f04f 0200 	mov.w	r2, #0
 80017c2:	f04f 0300 	mov.w	r3, #0
 80017c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017d2:	4690      	mov	r8, r2
 80017d4:	4699      	mov	r9, r3
 80017d6:	4623      	mov	r3, r4
 80017d8:	eb18 0303 	adds.w	r3, r8, r3
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	462b      	mov	r3, r5
 80017e0:	eb49 0303 	adc.w	r3, r9, r3
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	f04f 0200 	mov.w	r2, #0
 80017ea:	f04f 0300 	mov.w	r3, #0
 80017ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80017f2:	4629      	mov	r1, r5
 80017f4:	024b      	lsls	r3, r1, #9
 80017f6:	4621      	mov	r1, r4
 80017f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80017fc:	4621      	mov	r1, r4
 80017fe:	024a      	lsls	r2, r1, #9
 8001800:	4610      	mov	r0, r2
 8001802:	4619      	mov	r1, r3
 8001804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001806:	2200      	movs	r2, #0
 8001808:	62bb      	str	r3, [r7, #40]	; 0x28
 800180a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800180c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001810:	f7fe fce6 	bl	80001e0 <__aeabi_uldivmod>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4613      	mov	r3, r2
 800181a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800181c:	e058      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800181e:	4b38      	ldr	r3, [pc, #224]	; (8001900 <HAL_RCC_GetSysClockFreq+0x200>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	099b      	lsrs	r3, r3, #6
 8001824:	2200      	movs	r2, #0
 8001826:	4618      	mov	r0, r3
 8001828:	4611      	mov	r1, r2
 800182a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800182e:	623b      	str	r3, [r7, #32]
 8001830:	2300      	movs	r3, #0
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
 8001834:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001838:	4642      	mov	r2, r8
 800183a:	464b      	mov	r3, r9
 800183c:	f04f 0000 	mov.w	r0, #0
 8001840:	f04f 0100 	mov.w	r1, #0
 8001844:	0159      	lsls	r1, r3, #5
 8001846:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800184a:	0150      	lsls	r0, r2, #5
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	4641      	mov	r1, r8
 8001852:	ebb2 0a01 	subs.w	sl, r2, r1
 8001856:	4649      	mov	r1, r9
 8001858:	eb63 0b01 	sbc.w	fp, r3, r1
 800185c:	f04f 0200 	mov.w	r2, #0
 8001860:	f04f 0300 	mov.w	r3, #0
 8001864:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001868:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800186c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001870:	ebb2 040a 	subs.w	r4, r2, sl
 8001874:	eb63 050b 	sbc.w	r5, r3, fp
 8001878:	f04f 0200 	mov.w	r2, #0
 800187c:	f04f 0300 	mov.w	r3, #0
 8001880:	00eb      	lsls	r3, r5, #3
 8001882:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001886:	00e2      	lsls	r2, r4, #3
 8001888:	4614      	mov	r4, r2
 800188a:	461d      	mov	r5, r3
 800188c:	4643      	mov	r3, r8
 800188e:	18e3      	adds	r3, r4, r3
 8001890:	603b      	str	r3, [r7, #0]
 8001892:	464b      	mov	r3, r9
 8001894:	eb45 0303 	adc.w	r3, r5, r3
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	f04f 0200 	mov.w	r2, #0
 800189e:	f04f 0300 	mov.w	r3, #0
 80018a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018a6:	4629      	mov	r1, r5
 80018a8:	028b      	lsls	r3, r1, #10
 80018aa:	4621      	mov	r1, r4
 80018ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018b0:	4621      	mov	r1, r4
 80018b2:	028a      	lsls	r2, r1, #10
 80018b4:	4610      	mov	r0, r2
 80018b6:	4619      	mov	r1, r3
 80018b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018ba:	2200      	movs	r2, #0
 80018bc:	61bb      	str	r3, [r7, #24]
 80018be:	61fa      	str	r2, [r7, #28]
 80018c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018c4:	f7fe fc8c 	bl	80001e0 <__aeabi_uldivmod>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4613      	mov	r3, r2
 80018ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018d0:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <HAL_RCC_GetSysClockFreq+0x200>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	0c1b      	lsrs	r3, r3, #16
 80018d6:	f003 0303 	and.w	r3, r3, #3
 80018da:	3301      	adds	r3, #1
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80018e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80018e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018ea:	e002      	b.n	80018f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <HAL_RCC_GetSysClockFreq+0x204>)
 80018ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3750      	adds	r7, #80	; 0x50
 80018f8:	46bd      	mov	sp, r7
 80018fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018fe:	bf00      	nop
 8001900:	40023800 	.word	0x40023800
 8001904:	00f42400 	.word	0x00f42400
 8001908:	007a1200 	.word	0x007a1200

0800190c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001910:	4b03      	ldr	r3, [pc, #12]	; (8001920 <HAL_RCC_GetHCLKFreq+0x14>)
 8001912:	681b      	ldr	r3, [r3, #0]
}
 8001914:	4618      	mov	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	20000000 	.word	0x20000000

08001924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001928:	f7ff fff0 	bl	800190c <HAL_RCC_GetHCLKFreq>
 800192c:	4602      	mov	r2, r0
 800192e:	4b05      	ldr	r3, [pc, #20]	; (8001944 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	0a9b      	lsrs	r3, r3, #10
 8001934:	f003 0307 	and.w	r3, r3, #7
 8001938:	4903      	ldr	r1, [pc, #12]	; (8001948 <HAL_RCC_GetPCLK1Freq+0x24>)
 800193a:	5ccb      	ldrb	r3, [r1, r3]
 800193c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001940:	4618      	mov	r0, r3
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40023800 	.word	0x40023800
 8001948:	08004ffc 	.word	0x08004ffc

0800194c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001950:	f7ff ffdc 	bl	800190c <HAL_RCC_GetHCLKFreq>
 8001954:	4602      	mov	r2, r0
 8001956:	4b05      	ldr	r3, [pc, #20]	; (800196c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	0b5b      	lsrs	r3, r3, #13
 800195c:	f003 0307 	and.w	r3, r3, #7
 8001960:	4903      	ldr	r1, [pc, #12]	; (8001970 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001962:	5ccb      	ldrb	r3, [r1, r3]
 8001964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001968:	4618      	mov	r0, r3
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40023800 	.word	0x40023800
 8001970:	08004ffc 	.word	0x08004ffc

08001974 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e042      	b.n	8001a0c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d106      	bne.n	80019a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7fe ff9a 	bl	80008d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2224      	movs	r2, #36	; 0x24
 80019a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68da      	ldr	r2, [r3, #12]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f000 f82b 	bl	8001a14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	691a      	ldr	r2, [r3, #16]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	695a      	ldr	r2, [r3, #20]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80019dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68da      	ldr	r2, [r3, #12]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80019ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2220      	movs	r2, #32
 80019f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2220      	movs	r2, #32
 8001a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a18:	b0c0      	sub	sp, #256	; 0x100
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a30:	68d9      	ldr	r1, [r3, #12]
 8001a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	ea40 0301 	orr.w	r3, r0, r1
 8001a3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	431a      	orrs	r2, r3
 8001a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001a6c:	f021 010c 	bic.w	r1, r1, #12
 8001a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001a7a:	430b      	orrs	r3, r1
 8001a7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a8e:	6999      	ldr	r1, [r3, #24]
 8001a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	ea40 0301 	orr.w	r3, r0, r1
 8001a9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	4b8f      	ldr	r3, [pc, #572]	; (8001ce0 <UART_SetConfig+0x2cc>)
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d005      	beq.n	8001ab4 <UART_SetConfig+0xa0>
 8001aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	4b8d      	ldr	r3, [pc, #564]	; (8001ce4 <UART_SetConfig+0x2d0>)
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d104      	bne.n	8001abe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001ab4:	f7ff ff4a 	bl	800194c <HAL_RCC_GetPCLK2Freq>
 8001ab8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001abc:	e003      	b.n	8001ac6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001abe:	f7ff ff31 	bl	8001924 <HAL_RCC_GetPCLK1Freq>
 8001ac2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001aca:	69db      	ldr	r3, [r3, #28]
 8001acc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ad0:	f040 810c 	bne.w	8001cec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001ad4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001ade:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001ae2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001ae6:	4622      	mov	r2, r4
 8001ae8:	462b      	mov	r3, r5
 8001aea:	1891      	adds	r1, r2, r2
 8001aec:	65b9      	str	r1, [r7, #88]	; 0x58
 8001aee:	415b      	adcs	r3, r3
 8001af0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001af2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001af6:	4621      	mov	r1, r4
 8001af8:	eb12 0801 	adds.w	r8, r2, r1
 8001afc:	4629      	mov	r1, r5
 8001afe:	eb43 0901 	adc.w	r9, r3, r1
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b16:	4690      	mov	r8, r2
 8001b18:	4699      	mov	r9, r3
 8001b1a:	4623      	mov	r3, r4
 8001b1c:	eb18 0303 	adds.w	r3, r8, r3
 8001b20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001b24:	462b      	mov	r3, r5
 8001b26:	eb49 0303 	adc.w	r3, r9, r3
 8001b2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001b3a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001b3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001b42:	460b      	mov	r3, r1
 8001b44:	18db      	adds	r3, r3, r3
 8001b46:	653b      	str	r3, [r7, #80]	; 0x50
 8001b48:	4613      	mov	r3, r2
 8001b4a:	eb42 0303 	adc.w	r3, r2, r3
 8001b4e:	657b      	str	r3, [r7, #84]	; 0x54
 8001b50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001b54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001b58:	f7fe fb42 	bl	80001e0 <__aeabi_uldivmod>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4b61      	ldr	r3, [pc, #388]	; (8001ce8 <UART_SetConfig+0x2d4>)
 8001b62:	fba3 2302 	umull	r2, r3, r3, r2
 8001b66:	095b      	lsrs	r3, r3, #5
 8001b68:	011c      	lsls	r4, r3, #4
 8001b6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001b74:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001b78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001b7c:	4642      	mov	r2, r8
 8001b7e:	464b      	mov	r3, r9
 8001b80:	1891      	adds	r1, r2, r2
 8001b82:	64b9      	str	r1, [r7, #72]	; 0x48
 8001b84:	415b      	adcs	r3, r3
 8001b86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001b8c:	4641      	mov	r1, r8
 8001b8e:	eb12 0a01 	adds.w	sl, r2, r1
 8001b92:	4649      	mov	r1, r9
 8001b94:	eb43 0b01 	adc.w	fp, r3, r1
 8001b98:	f04f 0200 	mov.w	r2, #0
 8001b9c:	f04f 0300 	mov.w	r3, #0
 8001ba0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001ba4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001ba8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001bac:	4692      	mov	sl, r2
 8001bae:	469b      	mov	fp, r3
 8001bb0:	4643      	mov	r3, r8
 8001bb2:	eb1a 0303 	adds.w	r3, sl, r3
 8001bb6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001bba:	464b      	mov	r3, r9
 8001bbc:	eb4b 0303 	adc.w	r3, fp, r3
 8001bc0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001bd0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001bd4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	18db      	adds	r3, r3, r3
 8001bdc:	643b      	str	r3, [r7, #64]	; 0x40
 8001bde:	4613      	mov	r3, r2
 8001be0:	eb42 0303 	adc.w	r3, r2, r3
 8001be4:	647b      	str	r3, [r7, #68]	; 0x44
 8001be6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001bea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001bee:	f7fe faf7 	bl	80001e0 <__aeabi_uldivmod>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	4611      	mov	r1, r2
 8001bf8:	4b3b      	ldr	r3, [pc, #236]	; (8001ce8 <UART_SetConfig+0x2d4>)
 8001bfa:	fba3 2301 	umull	r2, r3, r3, r1
 8001bfe:	095b      	lsrs	r3, r3, #5
 8001c00:	2264      	movs	r2, #100	; 0x64
 8001c02:	fb02 f303 	mul.w	r3, r2, r3
 8001c06:	1acb      	subs	r3, r1, r3
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001c0e:	4b36      	ldr	r3, [pc, #216]	; (8001ce8 <UART_SetConfig+0x2d4>)
 8001c10:	fba3 2302 	umull	r2, r3, r3, r2
 8001c14:	095b      	lsrs	r3, r3, #5
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001c1c:	441c      	add	r4, r3
 8001c1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c22:	2200      	movs	r2, #0
 8001c24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001c28:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001c2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001c30:	4642      	mov	r2, r8
 8001c32:	464b      	mov	r3, r9
 8001c34:	1891      	adds	r1, r2, r2
 8001c36:	63b9      	str	r1, [r7, #56]	; 0x38
 8001c38:	415b      	adcs	r3, r3
 8001c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001c40:	4641      	mov	r1, r8
 8001c42:	1851      	adds	r1, r2, r1
 8001c44:	6339      	str	r1, [r7, #48]	; 0x30
 8001c46:	4649      	mov	r1, r9
 8001c48:	414b      	adcs	r3, r1
 8001c4a:	637b      	str	r3, [r7, #52]	; 0x34
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	f04f 0300 	mov.w	r3, #0
 8001c54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001c58:	4659      	mov	r1, fp
 8001c5a:	00cb      	lsls	r3, r1, #3
 8001c5c:	4651      	mov	r1, sl
 8001c5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001c62:	4651      	mov	r1, sl
 8001c64:	00ca      	lsls	r2, r1, #3
 8001c66:	4610      	mov	r0, r2
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	4642      	mov	r2, r8
 8001c6e:	189b      	adds	r3, r3, r2
 8001c70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001c74:	464b      	mov	r3, r9
 8001c76:	460a      	mov	r2, r1
 8001c78:	eb42 0303 	adc.w	r3, r2, r3
 8001c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001c8c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001c90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001c94:	460b      	mov	r3, r1
 8001c96:	18db      	adds	r3, r3, r3
 8001c98:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	eb42 0303 	adc.w	r3, r2, r3
 8001ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ca2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ca6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001caa:	f7fe fa99 	bl	80001e0 <__aeabi_uldivmod>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ce8 <UART_SetConfig+0x2d4>)
 8001cb4:	fba3 1302 	umull	r1, r3, r3, r2
 8001cb8:	095b      	lsrs	r3, r3, #5
 8001cba:	2164      	movs	r1, #100	; 0x64
 8001cbc:	fb01 f303 	mul.w	r3, r1, r3
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	3332      	adds	r3, #50	; 0x32
 8001cc6:	4a08      	ldr	r2, [pc, #32]	; (8001ce8 <UART_SetConfig+0x2d4>)
 8001cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ccc:	095b      	lsrs	r3, r3, #5
 8001cce:	f003 0207 	and.w	r2, r3, #7
 8001cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4422      	add	r2, r4
 8001cda:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001cdc:	e106      	b.n	8001eec <UART_SetConfig+0x4d8>
 8001cde:	bf00      	nop
 8001ce0:	40011000 	.word	0x40011000
 8001ce4:	40011400 	.word	0x40011400
 8001ce8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001cec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001cf6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001cfa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001cfe:	4642      	mov	r2, r8
 8001d00:	464b      	mov	r3, r9
 8001d02:	1891      	adds	r1, r2, r2
 8001d04:	6239      	str	r1, [r7, #32]
 8001d06:	415b      	adcs	r3, r3
 8001d08:	627b      	str	r3, [r7, #36]	; 0x24
 8001d0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d0e:	4641      	mov	r1, r8
 8001d10:	1854      	adds	r4, r2, r1
 8001d12:	4649      	mov	r1, r9
 8001d14:	eb43 0501 	adc.w	r5, r3, r1
 8001d18:	f04f 0200 	mov.w	r2, #0
 8001d1c:	f04f 0300 	mov.w	r3, #0
 8001d20:	00eb      	lsls	r3, r5, #3
 8001d22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d26:	00e2      	lsls	r2, r4, #3
 8001d28:	4614      	mov	r4, r2
 8001d2a:	461d      	mov	r5, r3
 8001d2c:	4643      	mov	r3, r8
 8001d2e:	18e3      	adds	r3, r4, r3
 8001d30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001d34:	464b      	mov	r3, r9
 8001d36:	eb45 0303 	adc.w	r3, r5, r3
 8001d3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001d4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	f04f 0300 	mov.w	r3, #0
 8001d56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001d5a:	4629      	mov	r1, r5
 8001d5c:	008b      	lsls	r3, r1, #2
 8001d5e:	4621      	mov	r1, r4
 8001d60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001d64:	4621      	mov	r1, r4
 8001d66:	008a      	lsls	r2, r1, #2
 8001d68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001d6c:	f7fe fa38 	bl	80001e0 <__aeabi_uldivmod>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4b60      	ldr	r3, [pc, #384]	; (8001ef8 <UART_SetConfig+0x4e4>)
 8001d76:	fba3 2302 	umull	r2, r3, r3, r2
 8001d7a:	095b      	lsrs	r3, r3, #5
 8001d7c:	011c      	lsls	r4, r3, #4
 8001d7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d82:	2200      	movs	r2, #0
 8001d84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001d88:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001d8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001d90:	4642      	mov	r2, r8
 8001d92:	464b      	mov	r3, r9
 8001d94:	1891      	adds	r1, r2, r2
 8001d96:	61b9      	str	r1, [r7, #24]
 8001d98:	415b      	adcs	r3, r3
 8001d9a:	61fb      	str	r3, [r7, #28]
 8001d9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001da0:	4641      	mov	r1, r8
 8001da2:	1851      	adds	r1, r2, r1
 8001da4:	6139      	str	r1, [r7, #16]
 8001da6:	4649      	mov	r1, r9
 8001da8:	414b      	adcs	r3, r1
 8001daa:	617b      	str	r3, [r7, #20]
 8001dac:	f04f 0200 	mov.w	r2, #0
 8001db0:	f04f 0300 	mov.w	r3, #0
 8001db4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001db8:	4659      	mov	r1, fp
 8001dba:	00cb      	lsls	r3, r1, #3
 8001dbc:	4651      	mov	r1, sl
 8001dbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001dc2:	4651      	mov	r1, sl
 8001dc4:	00ca      	lsls	r2, r1, #3
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4603      	mov	r3, r0
 8001dcc:	4642      	mov	r2, r8
 8001dce:	189b      	adds	r3, r3, r2
 8001dd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001dd4:	464b      	mov	r3, r9
 8001dd6:	460a      	mov	r2, r1
 8001dd8:	eb42 0303 	adc.w	r3, r2, r3
 8001ddc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	67bb      	str	r3, [r7, #120]	; 0x78
 8001dea:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001dec:	f04f 0200 	mov.w	r2, #0
 8001df0:	f04f 0300 	mov.w	r3, #0
 8001df4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001df8:	4649      	mov	r1, r9
 8001dfa:	008b      	lsls	r3, r1, #2
 8001dfc:	4641      	mov	r1, r8
 8001dfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e02:	4641      	mov	r1, r8
 8001e04:	008a      	lsls	r2, r1, #2
 8001e06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001e0a:	f7fe f9e9 	bl	80001e0 <__aeabi_uldivmod>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4611      	mov	r1, r2
 8001e14:	4b38      	ldr	r3, [pc, #224]	; (8001ef8 <UART_SetConfig+0x4e4>)
 8001e16:	fba3 2301 	umull	r2, r3, r3, r1
 8001e1a:	095b      	lsrs	r3, r3, #5
 8001e1c:	2264      	movs	r2, #100	; 0x64
 8001e1e:	fb02 f303 	mul.w	r3, r2, r3
 8001e22:	1acb      	subs	r3, r1, r3
 8001e24:	011b      	lsls	r3, r3, #4
 8001e26:	3332      	adds	r3, #50	; 0x32
 8001e28:	4a33      	ldr	r2, [pc, #204]	; (8001ef8 <UART_SetConfig+0x4e4>)
 8001e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2e:	095b      	lsrs	r3, r3, #5
 8001e30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e34:	441c      	add	r4, r3
 8001e36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	673b      	str	r3, [r7, #112]	; 0x70
 8001e3e:	677a      	str	r2, [r7, #116]	; 0x74
 8001e40:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001e44:	4642      	mov	r2, r8
 8001e46:	464b      	mov	r3, r9
 8001e48:	1891      	adds	r1, r2, r2
 8001e4a:	60b9      	str	r1, [r7, #8]
 8001e4c:	415b      	adcs	r3, r3
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e54:	4641      	mov	r1, r8
 8001e56:	1851      	adds	r1, r2, r1
 8001e58:	6039      	str	r1, [r7, #0]
 8001e5a:	4649      	mov	r1, r9
 8001e5c:	414b      	adcs	r3, r1
 8001e5e:	607b      	str	r3, [r7, #4]
 8001e60:	f04f 0200 	mov.w	r2, #0
 8001e64:	f04f 0300 	mov.w	r3, #0
 8001e68:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001e6c:	4659      	mov	r1, fp
 8001e6e:	00cb      	lsls	r3, r1, #3
 8001e70:	4651      	mov	r1, sl
 8001e72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e76:	4651      	mov	r1, sl
 8001e78:	00ca      	lsls	r2, r1, #3
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4603      	mov	r3, r0
 8001e80:	4642      	mov	r2, r8
 8001e82:	189b      	adds	r3, r3, r2
 8001e84:	66bb      	str	r3, [r7, #104]	; 0x68
 8001e86:	464b      	mov	r3, r9
 8001e88:	460a      	mov	r2, r1
 8001e8a:	eb42 0303 	adc.w	r3, r2, r3
 8001e8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	663b      	str	r3, [r7, #96]	; 0x60
 8001e9a:	667a      	str	r2, [r7, #100]	; 0x64
 8001e9c:	f04f 0200 	mov.w	r2, #0
 8001ea0:	f04f 0300 	mov.w	r3, #0
 8001ea4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8001ea8:	4649      	mov	r1, r9
 8001eaa:	008b      	lsls	r3, r1, #2
 8001eac:	4641      	mov	r1, r8
 8001eae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001eb2:	4641      	mov	r1, r8
 8001eb4:	008a      	lsls	r2, r1, #2
 8001eb6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001eba:	f7fe f991 	bl	80001e0 <__aeabi_uldivmod>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	4b0d      	ldr	r3, [pc, #52]	; (8001ef8 <UART_SetConfig+0x4e4>)
 8001ec4:	fba3 1302 	umull	r1, r3, r3, r2
 8001ec8:	095b      	lsrs	r3, r3, #5
 8001eca:	2164      	movs	r1, #100	; 0x64
 8001ecc:	fb01 f303 	mul.w	r3, r1, r3
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	011b      	lsls	r3, r3, #4
 8001ed4:	3332      	adds	r3, #50	; 0x32
 8001ed6:	4a08      	ldr	r2, [pc, #32]	; (8001ef8 <UART_SetConfig+0x4e4>)
 8001ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8001edc:	095b      	lsrs	r3, r3, #5
 8001ede:	f003 020f 	and.w	r2, r3, #15
 8001ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4422      	add	r2, r4
 8001eea:	609a      	str	r2, [r3, #8]
}
 8001eec:	bf00      	nop
 8001eee:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ef8:	51eb851f 	.word	0x51eb851f

08001efc <__NVIC_SetPriority>:
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	6039      	str	r1, [r7, #0]
 8001f06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	db0a      	blt.n	8001f26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	490c      	ldr	r1, [pc, #48]	; (8001f48 <__NVIC_SetPriority+0x4c>)
 8001f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1a:	0112      	lsls	r2, r2, #4
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	440b      	add	r3, r1
 8001f20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f24:	e00a      	b.n	8001f3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	4908      	ldr	r1, [pc, #32]	; (8001f4c <__NVIC_SetPriority+0x50>)
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	3b04      	subs	r3, #4
 8001f34:	0112      	lsls	r2, r2, #4
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	440b      	add	r3, r1
 8001f3a:	761a      	strb	r2, [r3, #24]
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	e000e100 	.word	0xe000e100
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001f54:	2100      	movs	r1, #0
 8001f56:	f06f 0004 	mvn.w	r0, #4
 8001f5a:	f7ff ffcf 	bl	8001efc <__NVIC_SetPriority>
#endif
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
	...

08001f64 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f6a:	f3ef 8305 	mrs	r3, IPSR
 8001f6e:	603b      	str	r3, [r7, #0]
  return(result);
 8001f70:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001f76:	f06f 0305 	mvn.w	r3, #5
 8001f7a:	607b      	str	r3, [r7, #4]
 8001f7c:	e00c      	b.n	8001f98 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001f7e:	4b0a      	ldr	r3, [pc, #40]	; (8001fa8 <osKernelInitialize+0x44>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d105      	bne.n	8001f92 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001f86:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <osKernelInitialize+0x44>)
 8001f88:	2201      	movs	r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	607b      	str	r3, [r7, #4]
 8001f90:	e002      	b.n	8001f98 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001f92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f96:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001f98:	687b      	ldr	r3, [r7, #4]
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	200000dc 	.word	0x200000dc

08001fac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fb2:	f3ef 8305 	mrs	r3, IPSR
 8001fb6:	603b      	str	r3, [r7, #0]
  return(result);
 8001fb8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8001fbe:	f06f 0305 	mvn.w	r3, #5
 8001fc2:	607b      	str	r3, [r7, #4]
 8001fc4:	e010      	b.n	8001fe8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001fc6:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <osKernelStart+0x48>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d109      	bne.n	8001fe2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001fce:	f7ff ffbf 	bl	8001f50 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001fd2:	4b08      	ldr	r3, [pc, #32]	; (8001ff4 <osKernelStart+0x48>)
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001fd8:	f001 f93a 	bl	8003250 <vTaskStartScheduler>
      stat = osOK;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	607b      	str	r3, [r7, #4]
 8001fe0:	e002      	b.n	8001fe8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001fe2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fe6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001fe8:	687b      	ldr	r3, [r7, #4]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	200000dc 	.word	0x200000dc

08001ff8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08e      	sub	sp, #56	; 0x38
 8001ffc:	af04      	add	r7, sp, #16
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002004:	2300      	movs	r3, #0
 8002006:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002008:	f3ef 8305 	mrs	r3, IPSR
 800200c:	617b      	str	r3, [r7, #20]
  return(result);
 800200e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002010:	2b00      	cmp	r3, #0
 8002012:	d17e      	bne.n	8002112 <osThreadNew+0x11a>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d07b      	beq.n	8002112 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800201a:	2380      	movs	r3, #128	; 0x80
 800201c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800201e:	2318      	movs	r3, #24
 8002020:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002022:	2300      	movs	r3, #0
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002026:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800202a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d045      	beq.n	80020be <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d002      	beq.n	8002040 <osThreadNew+0x48>
        name = attr->name;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d002      	beq.n	800204e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d008      	beq.n	8002066 <osThreadNew+0x6e>
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	2b38      	cmp	r3, #56	; 0x38
 8002058:	d805      	bhi.n	8002066 <osThreadNew+0x6e>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <osThreadNew+0x72>
        return (NULL);
 8002066:	2300      	movs	r3, #0
 8002068:	e054      	b.n	8002114 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	089b      	lsrs	r3, r3, #2
 8002078:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00e      	beq.n	80020a0 <osThreadNew+0xa8>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	2ba7      	cmp	r3, #167	; 0xa7
 8002088:	d90a      	bls.n	80020a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800208e:	2b00      	cmp	r3, #0
 8002090:	d006      	beq.n	80020a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d002      	beq.n	80020a0 <osThreadNew+0xa8>
        mem = 1;
 800209a:	2301      	movs	r3, #1
 800209c:	61bb      	str	r3, [r7, #24]
 800209e:	e010      	b.n	80020c2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d10c      	bne.n	80020c2 <osThreadNew+0xca>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d108      	bne.n	80020c2 <osThreadNew+0xca>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d104      	bne.n	80020c2 <osThreadNew+0xca>
          mem = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	61bb      	str	r3, [r7, #24]
 80020bc:	e001      	b.n	80020c2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d110      	bne.n	80020ea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80020d0:	9202      	str	r2, [sp, #8]
 80020d2:	9301      	str	r3, [sp, #4]
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	9300      	str	r3, [sp, #0]
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	6a3a      	ldr	r2, [r7, #32]
 80020dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f000 feca 	bl	8002e78 <xTaskCreateStatic>
 80020e4:	4603      	mov	r3, r0
 80020e6:	613b      	str	r3, [r7, #16]
 80020e8:	e013      	b.n	8002112 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d110      	bne.n	8002112 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80020f0:	6a3b      	ldr	r3, [r7, #32]
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	f107 0310 	add.w	r3, r7, #16
 80020f8:	9301      	str	r3, [sp, #4]
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f000 ff15 	bl	8002f32 <xTaskCreate>
 8002108:	4603      	mov	r3, r0
 800210a:	2b01      	cmp	r3, #1
 800210c:	d001      	beq.n	8002112 <osThreadNew+0x11a>
            hTask = NULL;
 800210e:	2300      	movs	r3, #0
 8002110:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002112:	693b      	ldr	r3, [r7, #16]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3728      	adds	r7, #40	; 0x28
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002124:	f3ef 8305 	mrs	r3, IPSR
 8002128:	60bb      	str	r3, [r7, #8]
  return(result);
 800212a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <osDelay+0x1c>
    stat = osErrorISR;
 8002130:	f06f 0305 	mvn.w	r3, #5
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	e007      	b.n	8002148 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002138:	2300      	movs	r3, #0
 800213a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d002      	beq.n	8002148 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f001 f850 	bl	80031e8 <vTaskDelay>
    }
  }

  return (stat);
 8002148:	68fb      	ldr	r3, [r7, #12]
}
 800214a:	4618      	mov	r0, r3
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8002152:	b580      	push	{r7, lr}
 8002154:	b084      	sub	sp, #16
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f002 f99c 	bl	8004498 <pvTimerGetTimerID>
 8002160:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d005      	beq.n	8002174 <TimerCallback+0x22>
    callb->func (callb->arg);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	6852      	ldr	r2, [r2, #4]
 8002170:	4610      	mov	r0, r2
 8002172:	4798      	blx	r3
  }
}
 8002174:	bf00      	nop
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800217c:	b580      	push	{r7, lr}
 800217e:	b08c      	sub	sp, #48	; 0x30
 8002180:	af02      	add	r7, sp, #8
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	607a      	str	r2, [r7, #4]
 8002186:	603b      	str	r3, [r7, #0]
 8002188:	460b      	mov	r3, r1
 800218a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800218c:	2300      	movs	r3, #0
 800218e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002190:	f3ef 8305 	mrs	r3, IPSR
 8002194:	613b      	str	r3, [r7, #16]
  return(result);
 8002196:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8002198:	2b00      	cmp	r3, #0
 800219a:	d163      	bne.n	8002264 <osTimerNew+0xe8>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d060      	beq.n	8002264 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80021a2:	2008      	movs	r0, #8
 80021a4:	f002 fbe8 	bl	8004978 <pvPortMalloc>
 80021a8:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d059      	beq.n	8002264 <osTimerNew+0xe8>
      callb->func = func;
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80021bc:	7afb      	ldrb	r3, [r7, #11]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d102      	bne.n	80021c8 <osTimerNew+0x4c>
        reload = pdFALSE;
 80021c2:	2300      	movs	r3, #0
 80021c4:	61fb      	str	r3, [r7, #28]
 80021c6:	e001      	b.n	80021cc <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 80021c8:	2301      	movs	r3, #1
 80021ca:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 80021cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021d0:	61bb      	str	r3, [r7, #24]
      name = NULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d01c      	beq.n	8002216 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d002      	beq.n	80021ea <osTimerNew+0x6e>
          name = attr->name;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d006      	beq.n	8002200 <osTimerNew+0x84>
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	2b2b      	cmp	r3, #43	; 0x2b
 80021f8:	d902      	bls.n	8002200 <osTimerNew+0x84>
          mem = 1;
 80021fa:	2301      	movs	r3, #1
 80021fc:	61bb      	str	r3, [r7, #24]
 80021fe:	e00c      	b.n	800221a <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d108      	bne.n	800221a <osTimerNew+0x9e>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d104      	bne.n	800221a <osTimerNew+0x9e>
            mem = 0;
 8002210:	2300      	movs	r3, #0
 8002212:	61bb      	str	r3, [r7, #24]
 8002214:	e001      	b.n	800221a <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8002216:	2300      	movs	r3, #0
 8002218:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d10c      	bne.n	800223a <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	9301      	str	r3, [sp, #4]
 8002226:	4b12      	ldr	r3, [pc, #72]	; (8002270 <osTimerNew+0xf4>)
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	69fa      	ldr	r2, [r7, #28]
 800222e:	2101      	movs	r1, #1
 8002230:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002232:	f001 fdb2 	bl	8003d9a <xTimerCreateStatic>
 8002236:	6238      	str	r0, [r7, #32]
 8002238:	e00b      	b.n	8002252 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d108      	bne.n	8002252 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8002240:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <osTimerNew+0xf4>)
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	69fa      	ldr	r2, [r7, #28]
 8002248:	2101      	movs	r1, #1
 800224a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800224c:	f001 fd84 	bl	8003d58 <xTimerCreate>
 8002250:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8002252:	6a3b      	ldr	r3, [r7, #32]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d105      	bne.n	8002264 <osTimerNew+0xe8>
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d002      	beq.n	8002264 <osTimerNew+0xe8>
        vPortFree (callb);
 800225e:	6978      	ldr	r0, [r7, #20]
 8002260:	f002 fc56 	bl	8004b10 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8002264:	6a3b      	ldr	r3, [r7, #32]
}
 8002266:	4618      	mov	r0, r3
 8002268:	3728      	adds	r7, #40	; 0x28
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	08002153 	.word	0x08002153

08002274 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8002274:	b580      	push	{r7, lr}
 8002276:	b088      	sub	sp, #32
 8002278:	af02      	add	r7, sp, #8
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002282:	f3ef 8305 	mrs	r3, IPSR
 8002286:	60fb      	str	r3, [r7, #12]
  return(result);
 8002288:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <osTimerStart+0x22>
    stat = osErrorISR;
 800228e:	f06f 0305 	mvn.w	r3, #5
 8002292:	617b      	str	r3, [r7, #20]
 8002294:	e017      	b.n	80022c6 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d103      	bne.n	80022a4 <osTimerStart+0x30>
    stat = osErrorParameter;
 800229c:	f06f 0303 	mvn.w	r3, #3
 80022a0:	617b      	str	r3, [r7, #20]
 80022a2:	e010      	b.n	80022c6 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80022a4:	2300      	movs	r3, #0
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	2300      	movs	r3, #0
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	2104      	movs	r1, #4
 80022ae:	6938      	ldr	r0, [r7, #16]
 80022b0:	f001 fdec 	bl	8003e8c <xTimerGenericCommand>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d102      	bne.n	80022c0 <osTimerStart+0x4c>
      stat = osOK;
 80022ba:	2300      	movs	r3, #0
 80022bc:	617b      	str	r3, [r7, #20]
 80022be:	e002      	b.n	80022c6 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 80022c0:	f06f 0302 	mvn.w	r3, #2
 80022c4:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80022c6:	697b      	ldr	r3, [r7, #20]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3718      	adds	r7, #24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	4a07      	ldr	r2, [pc, #28]	; (80022fc <vApplicationGetIdleTaskMemory+0x2c>)
 80022e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	4a06      	ldr	r2, [pc, #24]	; (8002300 <vApplicationGetIdleTaskMemory+0x30>)
 80022e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2280      	movs	r2, #128	; 0x80
 80022ec:	601a      	str	r2, [r3, #0]
}
 80022ee:	bf00      	nop
 80022f0:	3714      	adds	r7, #20
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	200000e0 	.word	0x200000e0
 8002300:	20000188 	.word	0x20000188

08002304 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4a07      	ldr	r2, [pc, #28]	; (8002330 <vApplicationGetTimerTaskMemory+0x2c>)
 8002314:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	4a06      	ldr	r2, [pc, #24]	; (8002334 <vApplicationGetTimerTaskMemory+0x30>)
 800231a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002322:	601a      	str	r2, [r3, #0]
}
 8002324:	bf00      	nop
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	20000388 	.word	0x20000388
 8002334:	20000430 	.word	0x20000430

08002338 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f103 0208 	add.w	r2, r3, #8
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002350:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f103 0208 	add.w	r2, r3, #8
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f103 0208 	add.w	r2, r3, #8
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr

08002392 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002392:	b480      	push	{r7}
 8002394:	b085      	sub	sp, #20
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
 800239a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	1c5a      	adds	r2, r3, #1
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	601a      	str	r2, [r3, #0]
}
 80023ce:	bf00      	nop
 80023d0:	3714      	adds	r7, #20
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80023da:	b480      	push	{r7}
 80023dc:	b085      	sub	sp, #20
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
 80023e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023f0:	d103      	bne.n	80023fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	e00c      	b.n	8002414 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3308      	adds	r3, #8
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	e002      	b.n	8002408 <vListInsert+0x2e>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	429a      	cmp	r2, r3
 8002412:	d2f6      	bcs.n	8002402 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	1c5a      	adds	r2, r3, #1
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	601a      	str	r2, [r3, #0]
}
 8002440:	bf00      	nop
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	6892      	ldr	r2, [r2, #8]
 8002462:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	6852      	ldr	r2, [r2, #4]
 800246c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	429a      	cmp	r2, r3
 8002476:	d103      	bne.n	8002480 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	1e5a      	subs	r2, r3, #1
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10a      	bne.n	80024ca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80024b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b8:	f383 8811 	msr	BASEPRI, r3
 80024bc:	f3bf 8f6f 	isb	sy
 80024c0:	f3bf 8f4f 	dsb	sy
 80024c4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80024c6:	bf00      	nop
 80024c8:	e7fe      	b.n	80024c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80024ca:	f002 f933 	bl	8004734 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d6:	68f9      	ldr	r1, [r7, #12]
 80024d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80024da:	fb01 f303 	mul.w	r3, r1, r3
 80024de:	441a      	add	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fa:	3b01      	subs	r3, #1
 80024fc:	68f9      	ldr	r1, [r7, #12]
 80024fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002500:	fb01 f303 	mul.w	r3, r1, r3
 8002504:	441a      	add	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	22ff      	movs	r2, #255	; 0xff
 800250e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	22ff      	movs	r2, #255	; 0xff
 8002516:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d114      	bne.n	800254a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d01a      	beq.n	800255e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	3310      	adds	r3, #16
 800252c:	4618      	mov	r0, r3
 800252e:	f001 f929 	bl	8003784 <xTaskRemoveFromEventList>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d012      	beq.n	800255e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002538:	4b0c      	ldr	r3, [pc, #48]	; (800256c <xQueueGenericReset+0xcc>)
 800253a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	f3bf 8f4f 	dsb	sy
 8002544:	f3bf 8f6f 	isb	sy
 8002548:	e009      	b.n	800255e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	3310      	adds	r3, #16
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff fef2 	bl	8002338 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	3324      	adds	r3, #36	; 0x24
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff feed 	bl	8002338 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800255e:	f002 f919 	bl	8004794 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002562:	2301      	movs	r3, #1
}
 8002564:	4618      	mov	r0, r3
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	e000ed04 	.word	0xe000ed04

08002570 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002570:	b580      	push	{r7, lr}
 8002572:	b08e      	sub	sp, #56	; 0x38
 8002574:	af02      	add	r7, sp, #8
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
 800257c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d10a      	bne.n	800259a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002588:	f383 8811 	msr	BASEPRI, r3
 800258c:	f3bf 8f6f 	isb	sy
 8002590:	f3bf 8f4f 	dsb	sy
 8002594:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002596:	bf00      	nop
 8002598:	e7fe      	b.n	8002598 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10a      	bne.n	80025b6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80025a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a4:	f383 8811 	msr	BASEPRI, r3
 80025a8:	f3bf 8f6f 	isb	sy
 80025ac:	f3bf 8f4f 	dsb	sy
 80025b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80025b2:	bf00      	nop
 80025b4:	e7fe      	b.n	80025b4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d002      	beq.n	80025c2 <xQueueGenericCreateStatic+0x52>
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <xQueueGenericCreateStatic+0x56>
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <xQueueGenericCreateStatic+0x58>
 80025c6:	2300      	movs	r3, #0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10a      	bne.n	80025e2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80025cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d0:	f383 8811 	msr	BASEPRI, r3
 80025d4:	f3bf 8f6f 	isb	sy
 80025d8:	f3bf 8f4f 	dsb	sy
 80025dc:	623b      	str	r3, [r7, #32]
}
 80025de:	bf00      	nop
 80025e0:	e7fe      	b.n	80025e0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d102      	bne.n	80025ee <xQueueGenericCreateStatic+0x7e>
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <xQueueGenericCreateStatic+0x82>
 80025ee:	2301      	movs	r3, #1
 80025f0:	e000      	b.n	80025f4 <xQueueGenericCreateStatic+0x84>
 80025f2:	2300      	movs	r3, #0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d10a      	bne.n	800260e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80025f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025fc:	f383 8811 	msr	BASEPRI, r3
 8002600:	f3bf 8f6f 	isb	sy
 8002604:	f3bf 8f4f 	dsb	sy
 8002608:	61fb      	str	r3, [r7, #28]
}
 800260a:	bf00      	nop
 800260c:	e7fe      	b.n	800260c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800260e:	2350      	movs	r3, #80	; 0x50
 8002610:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	2b50      	cmp	r3, #80	; 0x50
 8002616:	d00a      	beq.n	800262e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800261c:	f383 8811 	msr	BASEPRI, r3
 8002620:	f3bf 8f6f 	isb	sy
 8002624:	f3bf 8f4f 	dsb	sy
 8002628:	61bb      	str	r3, [r7, #24]
}
 800262a:	bf00      	nop
 800262c:	e7fe      	b.n	800262c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800262e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00d      	beq.n	8002656 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800263a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002642:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	4613      	mov	r3, r2
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	68b9      	ldr	r1, [r7, #8]
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f000 f805 	bl	8002660 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002658:	4618      	mov	r0, r3
 800265a:	3730      	adds	r7, #48	; 0x30
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
 800266c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d103      	bne.n	800267c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	e002      	b.n	8002682 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800268e:	2101      	movs	r1, #1
 8002690:	69b8      	ldr	r0, [r7, #24]
 8002692:	f7ff ff05 	bl	80024a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	78fa      	ldrb	r2, [r7, #3]
 800269a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800269e:	bf00      	nop
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
	...

080026a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08e      	sub	sp, #56	; 0x38
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
 80026b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80026b6:	2300      	movs	r3, #0
 80026b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80026be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10a      	bne.n	80026da <xQueueGenericSend+0x32>
	__asm volatile
 80026c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c8:	f383 8811 	msr	BASEPRI, r3
 80026cc:	f3bf 8f6f 	isb	sy
 80026d0:	f3bf 8f4f 	dsb	sy
 80026d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80026d6:	bf00      	nop
 80026d8:	e7fe      	b.n	80026d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d103      	bne.n	80026e8 <xQueueGenericSend+0x40>
 80026e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d101      	bne.n	80026ec <xQueueGenericSend+0x44>
 80026e8:	2301      	movs	r3, #1
 80026ea:	e000      	b.n	80026ee <xQueueGenericSend+0x46>
 80026ec:	2300      	movs	r3, #0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10a      	bne.n	8002708 <xQueueGenericSend+0x60>
	__asm volatile
 80026f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f6:	f383 8811 	msr	BASEPRI, r3
 80026fa:	f3bf 8f6f 	isb	sy
 80026fe:	f3bf 8f4f 	dsb	sy
 8002702:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002704:	bf00      	nop
 8002706:	e7fe      	b.n	8002706 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	2b02      	cmp	r3, #2
 800270c:	d103      	bne.n	8002716 <xQueueGenericSend+0x6e>
 800270e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002712:	2b01      	cmp	r3, #1
 8002714:	d101      	bne.n	800271a <xQueueGenericSend+0x72>
 8002716:	2301      	movs	r3, #1
 8002718:	e000      	b.n	800271c <xQueueGenericSend+0x74>
 800271a:	2300      	movs	r3, #0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10a      	bne.n	8002736 <xQueueGenericSend+0x8e>
	__asm volatile
 8002720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002724:	f383 8811 	msr	BASEPRI, r3
 8002728:	f3bf 8f6f 	isb	sy
 800272c:	f3bf 8f4f 	dsb	sy
 8002730:	623b      	str	r3, [r7, #32]
}
 8002732:	bf00      	nop
 8002734:	e7fe      	b.n	8002734 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002736:	f001 f9e7 	bl	8003b08 <xTaskGetSchedulerState>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d102      	bne.n	8002746 <xQueueGenericSend+0x9e>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <xQueueGenericSend+0xa2>
 8002746:	2301      	movs	r3, #1
 8002748:	e000      	b.n	800274c <xQueueGenericSend+0xa4>
 800274a:	2300      	movs	r3, #0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10a      	bne.n	8002766 <xQueueGenericSend+0xbe>
	__asm volatile
 8002750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002754:	f383 8811 	msr	BASEPRI, r3
 8002758:	f3bf 8f6f 	isb	sy
 800275c:	f3bf 8f4f 	dsb	sy
 8002760:	61fb      	str	r3, [r7, #28]
}
 8002762:	bf00      	nop
 8002764:	e7fe      	b.n	8002764 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002766:	f001 ffe5 	bl	8004734 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800276a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800276c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800276e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002772:	429a      	cmp	r2, r3
 8002774:	d302      	bcc.n	800277c <xQueueGenericSend+0xd4>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	2b02      	cmp	r3, #2
 800277a:	d129      	bne.n	80027d0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	68b9      	ldr	r1, [r7, #8]
 8002780:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002782:	f000 fa0b 	bl	8002b9c <prvCopyDataToQueue>
 8002786:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	2b00      	cmp	r3, #0
 800278e:	d010      	beq.n	80027b2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002792:	3324      	adds	r3, #36	; 0x24
 8002794:	4618      	mov	r0, r3
 8002796:	f000 fff5 	bl	8003784 <xTaskRemoveFromEventList>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d013      	beq.n	80027c8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80027a0:	4b3f      	ldr	r3, [pc, #252]	; (80028a0 <xQueueGenericSend+0x1f8>)
 80027a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	f3bf 8f4f 	dsb	sy
 80027ac:	f3bf 8f6f 	isb	sy
 80027b0:	e00a      	b.n	80027c8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80027b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d007      	beq.n	80027c8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80027b8:	4b39      	ldr	r3, [pc, #228]	; (80028a0 <xQueueGenericSend+0x1f8>)
 80027ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	f3bf 8f4f 	dsb	sy
 80027c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80027c8:	f001 ffe4 	bl	8004794 <vPortExitCritical>
				return pdPASS;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e063      	b.n	8002898 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d103      	bne.n	80027de <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80027d6:	f001 ffdd 	bl	8004794 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	e05c      	b.n	8002898 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80027de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d106      	bne.n	80027f2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80027e4:	f107 0314 	add.w	r3, r7, #20
 80027e8:	4618      	mov	r0, r3
 80027ea:	f001 f82f 	bl	800384c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80027ee:	2301      	movs	r3, #1
 80027f0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80027f2:	f001 ffcf 	bl	8004794 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80027f6:	f000 fd9b 	bl	8003330 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80027fa:	f001 ff9b 	bl	8004734 <vPortEnterCritical>
 80027fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002800:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002804:	b25b      	sxtb	r3, r3
 8002806:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800280a:	d103      	bne.n	8002814 <xQueueGenericSend+0x16c>
 800280c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800280e:	2200      	movs	r2, #0
 8002810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002816:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800281a:	b25b      	sxtb	r3, r3
 800281c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002820:	d103      	bne.n	800282a <xQueueGenericSend+0x182>
 8002822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800282a:	f001 ffb3 	bl	8004794 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800282e:	1d3a      	adds	r2, r7, #4
 8002830:	f107 0314 	add.w	r3, r7, #20
 8002834:	4611      	mov	r1, r2
 8002836:	4618      	mov	r0, r3
 8002838:	f001 f81e 	bl	8003878 <xTaskCheckForTimeOut>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d124      	bne.n	800288c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002842:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002844:	f000 faa2 	bl	8002d8c <prvIsQueueFull>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d018      	beq.n	8002880 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800284e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002850:	3310      	adds	r3, #16
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	4611      	mov	r1, r2
 8002856:	4618      	mov	r0, r3
 8002858:	f000 ff44 	bl	80036e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800285c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800285e:	f000 fa2d 	bl	8002cbc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002862:	f000 fd73 	bl	800334c <xTaskResumeAll>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	f47f af7c 	bne.w	8002766 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800286e:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <xQueueGenericSend+0x1f8>)
 8002870:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	f3bf 8f4f 	dsb	sy
 800287a:	f3bf 8f6f 	isb	sy
 800287e:	e772      	b.n	8002766 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002880:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002882:	f000 fa1b 	bl	8002cbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002886:	f000 fd61 	bl	800334c <xTaskResumeAll>
 800288a:	e76c      	b.n	8002766 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800288c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800288e:	f000 fa15 	bl	8002cbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002892:	f000 fd5b 	bl	800334c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002896:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002898:	4618      	mov	r0, r3
 800289a:	3738      	adds	r7, #56	; 0x38
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	e000ed04 	.word	0xe000ed04

080028a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b090      	sub	sp, #64	; 0x40
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
 80028b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80028b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10a      	bne.n	80028d2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80028bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c0:	f383 8811 	msr	BASEPRI, r3
 80028c4:	f3bf 8f6f 	isb	sy
 80028c8:	f3bf 8f4f 	dsb	sy
 80028cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80028ce:	bf00      	nop
 80028d0:	e7fe      	b.n	80028d0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d103      	bne.n	80028e0 <xQueueGenericSendFromISR+0x3c>
 80028d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <xQueueGenericSendFromISR+0x40>
 80028e0:	2301      	movs	r3, #1
 80028e2:	e000      	b.n	80028e6 <xQueueGenericSendFromISR+0x42>
 80028e4:	2300      	movs	r3, #0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10a      	bne.n	8002900 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80028ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ee:	f383 8811 	msr	BASEPRI, r3
 80028f2:	f3bf 8f6f 	isb	sy
 80028f6:	f3bf 8f4f 	dsb	sy
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80028fc:	bf00      	nop
 80028fe:	e7fe      	b.n	80028fe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	2b02      	cmp	r3, #2
 8002904:	d103      	bne.n	800290e <xQueueGenericSendFromISR+0x6a>
 8002906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800290a:	2b01      	cmp	r3, #1
 800290c:	d101      	bne.n	8002912 <xQueueGenericSendFromISR+0x6e>
 800290e:	2301      	movs	r3, #1
 8002910:	e000      	b.n	8002914 <xQueueGenericSendFromISR+0x70>
 8002912:	2300      	movs	r3, #0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10a      	bne.n	800292e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800291c:	f383 8811 	msr	BASEPRI, r3
 8002920:	f3bf 8f6f 	isb	sy
 8002924:	f3bf 8f4f 	dsb	sy
 8002928:	623b      	str	r3, [r7, #32]
}
 800292a:	bf00      	nop
 800292c:	e7fe      	b.n	800292c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800292e:	f001 ffe3 	bl	80048f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002932:	f3ef 8211 	mrs	r2, BASEPRI
 8002936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800293a:	f383 8811 	msr	BASEPRI, r3
 800293e:	f3bf 8f6f 	isb	sy
 8002942:	f3bf 8f4f 	dsb	sy
 8002946:	61fa      	str	r2, [r7, #28]
 8002948:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800294a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800294c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800294e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002950:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002956:	429a      	cmp	r2, r3
 8002958:	d302      	bcc.n	8002960 <xQueueGenericSendFromISR+0xbc>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	2b02      	cmp	r3, #2
 800295e:	d12f      	bne.n	80029c0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002962:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800296a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800296c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	68b9      	ldr	r1, [r7, #8]
 8002974:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002976:	f000 f911 	bl	8002b9c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800297a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800297e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002982:	d112      	bne.n	80029aa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	2b00      	cmp	r3, #0
 800298a:	d016      	beq.n	80029ba <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800298c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800298e:	3324      	adds	r3, #36	; 0x24
 8002990:	4618      	mov	r0, r3
 8002992:	f000 fef7 	bl	8003784 <xTaskRemoveFromEventList>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00e      	beq.n	80029ba <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00b      	beq.n	80029ba <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	e007      	b.n	80029ba <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80029aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80029ae:	3301      	adds	r3, #1
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	b25a      	sxtb	r2, r3
 80029b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80029ba:	2301      	movs	r3, #1
 80029bc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80029be:	e001      	b.n	80029c4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80029ce:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80029d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3740      	adds	r7, #64	; 0x40
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
	...

080029dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b08c      	sub	sp, #48	; 0x30
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80029e8:	2300      	movs	r3, #0
 80029ea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80029f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10a      	bne.n	8002a0c <xQueueReceive+0x30>
	__asm volatile
 80029f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029fa:	f383 8811 	msr	BASEPRI, r3
 80029fe:	f3bf 8f6f 	isb	sy
 8002a02:	f3bf 8f4f 	dsb	sy
 8002a06:	623b      	str	r3, [r7, #32]
}
 8002a08:	bf00      	nop
 8002a0a:	e7fe      	b.n	8002a0a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d103      	bne.n	8002a1a <xQueueReceive+0x3e>
 8002a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <xQueueReceive+0x42>
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e000      	b.n	8002a20 <xQueueReceive+0x44>
 8002a1e:	2300      	movs	r3, #0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10a      	bne.n	8002a3a <xQueueReceive+0x5e>
	__asm volatile
 8002a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a28:	f383 8811 	msr	BASEPRI, r3
 8002a2c:	f3bf 8f6f 	isb	sy
 8002a30:	f3bf 8f4f 	dsb	sy
 8002a34:	61fb      	str	r3, [r7, #28]
}
 8002a36:	bf00      	nop
 8002a38:	e7fe      	b.n	8002a38 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a3a:	f001 f865 	bl	8003b08 <xTaskGetSchedulerState>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d102      	bne.n	8002a4a <xQueueReceive+0x6e>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <xQueueReceive+0x72>
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e000      	b.n	8002a50 <xQueueReceive+0x74>
 8002a4e:	2300      	movs	r3, #0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d10a      	bne.n	8002a6a <xQueueReceive+0x8e>
	__asm volatile
 8002a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a58:	f383 8811 	msr	BASEPRI, r3
 8002a5c:	f3bf 8f6f 	isb	sy
 8002a60:	f3bf 8f4f 	dsb	sy
 8002a64:	61bb      	str	r3, [r7, #24]
}
 8002a66:	bf00      	nop
 8002a68:	e7fe      	b.n	8002a68 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a6a:	f001 fe63 	bl	8004734 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a72:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d01f      	beq.n	8002aba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a7a:	68b9      	ldr	r1, [r7, #8]
 8002a7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a7e:	f000 f8f7 	bl	8002c70 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	1e5a      	subs	r2, r3, #1
 8002a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a88:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00f      	beq.n	8002ab2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a94:	3310      	adds	r3, #16
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 fe74 	bl	8003784 <xTaskRemoveFromEventList>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d007      	beq.n	8002ab2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002aa2:	4b3d      	ldr	r3, [pc, #244]	; (8002b98 <xQueueReceive+0x1bc>)
 8002aa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	f3bf 8f4f 	dsb	sy
 8002aae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002ab2:	f001 fe6f 	bl	8004794 <vPortExitCritical>
				return pdPASS;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e069      	b.n	8002b8e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d103      	bne.n	8002ac8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ac0:	f001 fe68 	bl	8004794 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	e062      	b.n	8002b8e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d106      	bne.n	8002adc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ace:	f107 0310 	add.w	r3, r7, #16
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f000 feba 	bl	800384c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002adc:	f001 fe5a 	bl	8004794 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ae0:	f000 fc26 	bl	8003330 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ae4:	f001 fe26 	bl	8004734 <vPortEnterCritical>
 8002ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002aee:	b25b      	sxtb	r3, r3
 8002af0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002af4:	d103      	bne.n	8002afe <xQueueReceive+0x122>
 8002af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b04:	b25b      	sxtb	r3, r3
 8002b06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b0a:	d103      	bne.n	8002b14 <xQueueReceive+0x138>
 8002b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b14:	f001 fe3e 	bl	8004794 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b18:	1d3a      	adds	r2, r7, #4
 8002b1a:	f107 0310 	add.w	r3, r7, #16
 8002b1e:	4611      	mov	r1, r2
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 fea9 	bl	8003878 <xTaskCheckForTimeOut>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d123      	bne.n	8002b74 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b2e:	f000 f917 	bl	8002d60 <prvIsQueueEmpty>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d017      	beq.n	8002b68 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3a:	3324      	adds	r3, #36	; 0x24
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	4611      	mov	r1, r2
 8002b40:	4618      	mov	r0, r3
 8002b42:	f000 fdcf 	bl	80036e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002b46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b48:	f000 f8b8 	bl	8002cbc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002b4c:	f000 fbfe 	bl	800334c <xTaskResumeAll>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d189      	bne.n	8002a6a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002b56:	4b10      	ldr	r3, [pc, #64]	; (8002b98 <xQueueReceive+0x1bc>)
 8002b58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	f3bf 8f4f 	dsb	sy
 8002b62:	f3bf 8f6f 	isb	sy
 8002b66:	e780      	b.n	8002a6a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002b68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b6a:	f000 f8a7 	bl	8002cbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b6e:	f000 fbed 	bl	800334c <xTaskResumeAll>
 8002b72:	e77a      	b.n	8002a6a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002b74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b76:	f000 f8a1 	bl	8002cbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b7a:	f000 fbe7 	bl	800334c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b80:	f000 f8ee 	bl	8002d60 <prvIsQueueEmpty>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f43f af6f 	beq.w	8002a6a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002b8c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3730      	adds	r7, #48	; 0x30
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	e000ed04 	.word	0xe000ed04

08002b9c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10d      	bne.n	8002bd6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d14d      	bne.n	8002c5e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 ffbc 	bl	8003b44 <xTaskPriorityDisinherit>
 8002bcc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	609a      	str	r2, [r3, #8]
 8002bd4:	e043      	b.n	8002c5e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d119      	bne.n	8002c10 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6858      	ldr	r0, [r3, #4]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	461a      	mov	r2, r3
 8002be6:	68b9      	ldr	r1, [r7, #8]
 8002be8:	f002 f934 	bl	8004e54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	441a      	add	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d32b      	bcc.n	8002c5e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	605a      	str	r2, [r3, #4]
 8002c0e:	e026      	b.n	8002c5e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	68d8      	ldr	r0, [r3, #12]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	461a      	mov	r2, r3
 8002c1a:	68b9      	ldr	r1, [r7, #8]
 8002c1c:	f002 f91a 	bl	8004e54 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	68da      	ldr	r2, [r3, #12]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c28:	425b      	negs	r3, r3
 8002c2a:	441a      	add	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	68da      	ldr	r2, [r3, #12]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d207      	bcs.n	8002c4c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c44:	425b      	negs	r3, r3
 8002c46:	441a      	add	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d105      	bne.n	8002c5e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d002      	beq.n	8002c5e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1c5a      	adds	r2, r3, #1
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002c66:	697b      	ldr	r3, [r7, #20]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3718      	adds	r7, #24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d018      	beq.n	8002cb4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	68da      	ldr	r2, [r3, #12]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	441a      	add	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68da      	ldr	r2, [r3, #12]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d303      	bcc.n	8002ca4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68d9      	ldr	r1, [r3, #12]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cac:	461a      	mov	r2, r3
 8002cae:	6838      	ldr	r0, [r7, #0]
 8002cb0:	f002 f8d0 	bl	8004e54 <memcpy>
	}
}
 8002cb4:	bf00      	nop
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002cc4:	f001 fd36 	bl	8004734 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002cd0:	e011      	b.n	8002cf6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d012      	beq.n	8002d00 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	3324      	adds	r3, #36	; 0x24
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f000 fd50 	bl	8003784 <xTaskRemoveFromEventList>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002cea:	f000 fe27 	bl	800393c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002cee:	7bfb      	ldrb	r3, [r7, #15]
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	dce9      	bgt.n	8002cd2 <prvUnlockQueue+0x16>
 8002cfe:	e000      	b.n	8002d02 <prvUnlockQueue+0x46>
					break;
 8002d00:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	22ff      	movs	r2, #255	; 0xff
 8002d06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002d0a:	f001 fd43 	bl	8004794 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002d0e:	f001 fd11 	bl	8004734 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d18:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d1a:	e011      	b.n	8002d40 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d012      	beq.n	8002d4a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3310      	adds	r3, #16
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f000 fd2b 	bl	8003784 <xTaskRemoveFromEventList>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002d34:	f000 fe02 	bl	800393c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002d38:	7bbb      	ldrb	r3, [r7, #14]
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	dce9      	bgt.n	8002d1c <prvUnlockQueue+0x60>
 8002d48:	e000      	b.n	8002d4c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002d4a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	22ff      	movs	r2, #255	; 0xff
 8002d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002d54:	f001 fd1e 	bl	8004794 <vPortExitCritical>
}
 8002d58:	bf00      	nop
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002d68:	f001 fce4 	bl	8004734 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d102      	bne.n	8002d7a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002d74:	2301      	movs	r3, #1
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	e001      	b.n	8002d7e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002d7e:	f001 fd09 	bl	8004794 <vPortExitCritical>

	return xReturn;
 8002d82:	68fb      	ldr	r3, [r7, #12]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002d94:	f001 fcce 	bl	8004734 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d102      	bne.n	8002daa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002da4:	2301      	movs	r3, #1
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	e001      	b.n	8002dae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002daa:	2300      	movs	r3, #0
 8002dac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002dae:	f001 fcf1 	bl	8004794 <vPortExitCritical>

	return xReturn;
 8002db2:	68fb      	ldr	r3, [r7, #12]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	e014      	b.n	8002df6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002dcc:	4a0f      	ldr	r2, [pc, #60]	; (8002e0c <vQueueAddToRegistry+0x50>)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10b      	bne.n	8002df0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002dd8:	490c      	ldr	r1, [pc, #48]	; (8002e0c <vQueueAddToRegistry+0x50>)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002de2:	4a0a      	ldr	r2, [pc, #40]	; (8002e0c <vQueueAddToRegistry+0x50>)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	4413      	add	r3, r2
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002dee:	e006      	b.n	8002dfe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	3301      	adds	r3, #1
 8002df4:	60fb      	str	r3, [r7, #12]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2b07      	cmp	r3, #7
 8002dfa:	d9e7      	bls.n	8002dcc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002dfc:	bf00      	nop
 8002dfe:	bf00      	nop
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	20000830 	.word	0x20000830

08002e10 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002e20:	f001 fc88 	bl	8004734 <vPortEnterCritical>
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e2a:	b25b      	sxtb	r3, r3
 8002e2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e30:	d103      	bne.n	8002e3a <vQueueWaitForMessageRestricted+0x2a>
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e40:	b25b      	sxtb	r3, r3
 8002e42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e46:	d103      	bne.n	8002e50 <vQueueWaitForMessageRestricted+0x40>
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e50:	f001 fca0 	bl	8004794 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d106      	bne.n	8002e6a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	3324      	adds	r3, #36	; 0x24
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	68b9      	ldr	r1, [r7, #8]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f000 fc61 	bl	800372c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002e6a:	6978      	ldr	r0, [r7, #20]
 8002e6c:	f7ff ff26 	bl	8002cbc <prvUnlockQueue>
	}
 8002e70:	bf00      	nop
 8002e72:	3718      	adds	r7, #24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08e      	sub	sp, #56	; 0x38
 8002e7c:	af04      	add	r7, sp, #16
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
 8002e84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10a      	bne.n	8002ea2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e90:	f383 8811 	msr	BASEPRI, r3
 8002e94:	f3bf 8f6f 	isb	sy
 8002e98:	f3bf 8f4f 	dsb	sy
 8002e9c:	623b      	str	r3, [r7, #32]
}
 8002e9e:	bf00      	nop
 8002ea0:	e7fe      	b.n	8002ea0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10a      	bne.n	8002ebe <xTaskCreateStatic+0x46>
	__asm volatile
 8002ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eac:	f383 8811 	msr	BASEPRI, r3
 8002eb0:	f3bf 8f6f 	isb	sy
 8002eb4:	f3bf 8f4f 	dsb	sy
 8002eb8:	61fb      	str	r3, [r7, #28]
}
 8002eba:	bf00      	nop
 8002ebc:	e7fe      	b.n	8002ebc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002ebe:	23a8      	movs	r3, #168	; 0xa8
 8002ec0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	2ba8      	cmp	r3, #168	; 0xa8
 8002ec6:	d00a      	beq.n	8002ede <xTaskCreateStatic+0x66>
	__asm volatile
 8002ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ecc:	f383 8811 	msr	BASEPRI, r3
 8002ed0:	f3bf 8f6f 	isb	sy
 8002ed4:	f3bf 8f4f 	dsb	sy
 8002ed8:	61bb      	str	r3, [r7, #24]
}
 8002eda:	bf00      	nop
 8002edc:	e7fe      	b.n	8002edc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002ede:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d01e      	beq.n	8002f24 <xTaskCreateStatic+0xac>
 8002ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d01b      	beq.n	8002f24 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ef4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	2202      	movs	r2, #2
 8002efa:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002efe:	2300      	movs	r3, #0
 8002f00:	9303      	str	r3, [sp, #12]
 8002f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f04:	9302      	str	r3, [sp, #8]
 8002f06:	f107 0314 	add.w	r3, r7, #20
 8002f0a:	9301      	str	r3, [sp, #4]
 8002f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	68b9      	ldr	r1, [r7, #8]
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 f850 	bl	8002fbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002f1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f1e:	f000 f8f3 	bl	8003108 <prvAddNewTaskToReadyList>
 8002f22:	e001      	b.n	8002f28 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002f24:	2300      	movs	r3, #0
 8002f26:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002f28:	697b      	ldr	r3, [r7, #20]
	}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3728      	adds	r7, #40	; 0x28
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b08c      	sub	sp, #48	; 0x30
 8002f36:	af04      	add	r7, sp, #16
 8002f38:	60f8      	str	r0, [r7, #12]
 8002f3a:	60b9      	str	r1, [r7, #8]
 8002f3c:	603b      	str	r3, [r7, #0]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002f42:	88fb      	ldrh	r3, [r7, #6]
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	4618      	mov	r0, r3
 8002f48:	f001 fd16 	bl	8004978 <pvPortMalloc>
 8002f4c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00e      	beq.n	8002f72 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002f54:	20a8      	movs	r0, #168	; 0xa8
 8002f56:	f001 fd0f 	bl	8004978 <pvPortMalloc>
 8002f5a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	631a      	str	r2, [r3, #48]	; 0x30
 8002f68:	e005      	b.n	8002f76 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002f6a:	6978      	ldr	r0, [r7, #20]
 8002f6c:	f001 fdd0 	bl	8004b10 <vPortFree>
 8002f70:	e001      	b.n	8002f76 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d017      	beq.n	8002fac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002f84:	88fa      	ldrh	r2, [r7, #6]
 8002f86:	2300      	movs	r3, #0
 8002f88:	9303      	str	r3, [sp, #12]
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	9302      	str	r3, [sp, #8]
 8002f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f90:	9301      	str	r3, [sp, #4]
 8002f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	68b9      	ldr	r1, [r7, #8]
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 f80e 	bl	8002fbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002fa0:	69f8      	ldr	r0, [r7, #28]
 8002fa2:	f000 f8b1 	bl	8003108 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	61bb      	str	r3, [r7, #24]
 8002faa:	e002      	b.n	8002fb2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002fac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fb0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002fb2:	69bb      	ldr	r3, [r7, #24]
	}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3720      	adds	r7, #32
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b088      	sub	sp, #32
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
 8002fc8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fcc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	21a5      	movs	r1, #165	; 0xa5
 8002fd6:	f001 feb9 	bl	8004d4c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	f023 0307 	bic.w	r3, r3, #7
 8002ff2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00a      	beq.n	8003014 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003002:	f383 8811 	msr	BASEPRI, r3
 8003006:	f3bf 8f6f 	isb	sy
 800300a:	f3bf 8f4f 	dsb	sy
 800300e:	617b      	str	r3, [r7, #20]
}
 8003010:	bf00      	nop
 8003012:	e7fe      	b.n	8003012 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d01f      	beq.n	800305a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800301a:	2300      	movs	r3, #0
 800301c:	61fb      	str	r3, [r7, #28]
 800301e:	e012      	b.n	8003046 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003020:	68ba      	ldr	r2, [r7, #8]
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	4413      	add	r3, r2
 8003026:	7819      	ldrb	r1, [r3, #0]
 8003028:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	4413      	add	r3, r2
 800302e:	3334      	adds	r3, #52	; 0x34
 8003030:	460a      	mov	r2, r1
 8003032:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003034:	68ba      	ldr	r2, [r7, #8]
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	4413      	add	r3, r2
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d006      	beq.n	800304e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	3301      	adds	r3, #1
 8003044:	61fb      	str	r3, [r7, #28]
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	2b0f      	cmp	r3, #15
 800304a:	d9e9      	bls.n	8003020 <prvInitialiseNewTask+0x64>
 800304c:	e000      	b.n	8003050 <prvInitialiseNewTask+0x94>
			{
				break;
 800304e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003052:	2200      	movs	r2, #0
 8003054:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003058:	e003      	b.n	8003062 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800305a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003064:	2b37      	cmp	r3, #55	; 0x37
 8003066:	d901      	bls.n	800306c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003068:	2337      	movs	r3, #55	; 0x37
 800306a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800306c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800306e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003070:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003074:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003076:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307a:	2200      	movs	r2, #0
 800307c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800307e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003080:	3304      	adds	r3, #4
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff f978 	bl	8002378 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308a:	3318      	adds	r3, #24
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff f973 	bl	8002378 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003096:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800309e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80030a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80030a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030aa:	2200      	movs	r2, #0
 80030ac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80030b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80030b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ba:	3354      	adds	r3, #84	; 0x54
 80030bc:	224c      	movs	r2, #76	; 0x4c
 80030be:	2100      	movs	r1, #0
 80030c0:	4618      	mov	r0, r3
 80030c2:	f001 fe43 	bl	8004d4c <memset>
 80030c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c8:	4a0c      	ldr	r2, [pc, #48]	; (80030fc <prvInitialiseNewTask+0x140>)
 80030ca:	659a      	str	r2, [r3, #88]	; 0x58
 80030cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ce:	4a0c      	ldr	r2, [pc, #48]	; (8003100 <prvInitialiseNewTask+0x144>)
 80030d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80030d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d4:	4a0b      	ldr	r2, [pc, #44]	; (8003104 <prvInitialiseNewTask+0x148>)
 80030d6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	68f9      	ldr	r1, [r7, #12]
 80030dc:	69b8      	ldr	r0, [r7, #24]
 80030de:	f001 f9fb 	bl	80044d8 <pxPortInitialiseStack>
 80030e2:	4602      	mov	r2, r0
 80030e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80030e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d002      	beq.n	80030f4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80030ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030f2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80030f4:	bf00      	nop
 80030f6:	3720      	adds	r7, #32
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	20004ac4 	.word	0x20004ac4
 8003100:	20004b2c 	.word	0x20004b2c
 8003104:	20004b94 	.word	0x20004b94

08003108 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003110:	f001 fb10 	bl	8004734 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003114:	4b2d      	ldr	r3, [pc, #180]	; (80031cc <prvAddNewTaskToReadyList+0xc4>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	3301      	adds	r3, #1
 800311a:	4a2c      	ldr	r2, [pc, #176]	; (80031cc <prvAddNewTaskToReadyList+0xc4>)
 800311c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800311e:	4b2c      	ldr	r3, [pc, #176]	; (80031d0 <prvAddNewTaskToReadyList+0xc8>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d109      	bne.n	800313a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003126:	4a2a      	ldr	r2, [pc, #168]	; (80031d0 <prvAddNewTaskToReadyList+0xc8>)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800312c:	4b27      	ldr	r3, [pc, #156]	; (80031cc <prvAddNewTaskToReadyList+0xc4>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d110      	bne.n	8003156 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003134:	f000 fc26 	bl	8003984 <prvInitialiseTaskLists>
 8003138:	e00d      	b.n	8003156 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800313a:	4b26      	ldr	r3, [pc, #152]	; (80031d4 <prvAddNewTaskToReadyList+0xcc>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d109      	bne.n	8003156 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003142:	4b23      	ldr	r3, [pc, #140]	; (80031d0 <prvAddNewTaskToReadyList+0xc8>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	429a      	cmp	r2, r3
 800314e:	d802      	bhi.n	8003156 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003150:	4a1f      	ldr	r2, [pc, #124]	; (80031d0 <prvAddNewTaskToReadyList+0xc8>)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003156:	4b20      	ldr	r3, [pc, #128]	; (80031d8 <prvAddNewTaskToReadyList+0xd0>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	3301      	adds	r3, #1
 800315c:	4a1e      	ldr	r2, [pc, #120]	; (80031d8 <prvAddNewTaskToReadyList+0xd0>)
 800315e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003160:	4b1d      	ldr	r3, [pc, #116]	; (80031d8 <prvAddNewTaskToReadyList+0xd0>)
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800316c:	4b1b      	ldr	r3, [pc, #108]	; (80031dc <prvAddNewTaskToReadyList+0xd4>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	429a      	cmp	r2, r3
 8003172:	d903      	bls.n	800317c <prvAddNewTaskToReadyList+0x74>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003178:	4a18      	ldr	r2, [pc, #96]	; (80031dc <prvAddNewTaskToReadyList+0xd4>)
 800317a:	6013      	str	r3, [r2, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003180:	4613      	mov	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4a15      	ldr	r2, [pc, #84]	; (80031e0 <prvAddNewTaskToReadyList+0xd8>)
 800318a:	441a      	add	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	3304      	adds	r3, #4
 8003190:	4619      	mov	r1, r3
 8003192:	4610      	mov	r0, r2
 8003194:	f7ff f8fd 	bl	8002392 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003198:	f001 fafc 	bl	8004794 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800319c:	4b0d      	ldr	r3, [pc, #52]	; (80031d4 <prvAddNewTaskToReadyList+0xcc>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00e      	beq.n	80031c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80031a4:	4b0a      	ldr	r3, [pc, #40]	; (80031d0 <prvAddNewTaskToReadyList+0xc8>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d207      	bcs.n	80031c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80031b2:	4b0c      	ldr	r3, [pc, #48]	; (80031e4 <prvAddNewTaskToReadyList+0xdc>)
 80031b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	f3bf 8f4f 	dsb	sy
 80031be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80031c2:	bf00      	nop
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	20000d44 	.word	0x20000d44
 80031d0:	20000870 	.word	0x20000870
 80031d4:	20000d50 	.word	0x20000d50
 80031d8:	20000d60 	.word	0x20000d60
 80031dc:	20000d4c 	.word	0x20000d4c
 80031e0:	20000874 	.word	0x20000874
 80031e4:	e000ed04 	.word	0xe000ed04

080031e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80031f0:	2300      	movs	r3, #0
 80031f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d017      	beq.n	800322a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80031fa:	4b13      	ldr	r3, [pc, #76]	; (8003248 <vTaskDelay+0x60>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00a      	beq.n	8003218 <vTaskDelay+0x30>
	__asm volatile
 8003202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003206:	f383 8811 	msr	BASEPRI, r3
 800320a:	f3bf 8f6f 	isb	sy
 800320e:	f3bf 8f4f 	dsb	sy
 8003212:	60bb      	str	r3, [r7, #8]
}
 8003214:	bf00      	nop
 8003216:	e7fe      	b.n	8003216 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003218:	f000 f88a 	bl	8003330 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800321c:	2100      	movs	r1, #0
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 fcfe 	bl	8003c20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003224:	f000 f892 	bl	800334c <xTaskResumeAll>
 8003228:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d107      	bne.n	8003240 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003230:	4b06      	ldr	r3, [pc, #24]	; (800324c <vTaskDelay+0x64>)
 8003232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	f3bf 8f4f 	dsb	sy
 800323c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003240:	bf00      	nop
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	20000d6c 	.word	0x20000d6c
 800324c:	e000ed04 	.word	0xe000ed04

08003250 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b08a      	sub	sp, #40	; 0x28
 8003254:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003256:	2300      	movs	r3, #0
 8003258:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800325a:	2300      	movs	r3, #0
 800325c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800325e:	463a      	mov	r2, r7
 8003260:	1d39      	adds	r1, r7, #4
 8003262:	f107 0308 	add.w	r3, r7, #8
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff f832 	bl	80022d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800326c:	6839      	ldr	r1, [r7, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	68ba      	ldr	r2, [r7, #8]
 8003272:	9202      	str	r2, [sp, #8]
 8003274:	9301      	str	r3, [sp, #4]
 8003276:	2300      	movs	r3, #0
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	2300      	movs	r3, #0
 800327c:	460a      	mov	r2, r1
 800327e:	4924      	ldr	r1, [pc, #144]	; (8003310 <vTaskStartScheduler+0xc0>)
 8003280:	4824      	ldr	r0, [pc, #144]	; (8003314 <vTaskStartScheduler+0xc4>)
 8003282:	f7ff fdf9 	bl	8002e78 <xTaskCreateStatic>
 8003286:	4603      	mov	r3, r0
 8003288:	4a23      	ldr	r2, [pc, #140]	; (8003318 <vTaskStartScheduler+0xc8>)
 800328a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800328c:	4b22      	ldr	r3, [pc, #136]	; (8003318 <vTaskStartScheduler+0xc8>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d002      	beq.n	800329a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003294:	2301      	movs	r3, #1
 8003296:	617b      	str	r3, [r7, #20]
 8003298:	e001      	b.n	800329e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800329a:	2300      	movs	r3, #0
 800329c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d102      	bne.n	80032aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80032a4:	f000 fd10 	bl	8003cc8 <xTimerCreateTimerTask>
 80032a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d11b      	bne.n	80032e8 <vTaskStartScheduler+0x98>
	__asm volatile
 80032b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b4:	f383 8811 	msr	BASEPRI, r3
 80032b8:	f3bf 8f6f 	isb	sy
 80032bc:	f3bf 8f4f 	dsb	sy
 80032c0:	613b      	str	r3, [r7, #16]
}
 80032c2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80032c4:	4b15      	ldr	r3, [pc, #84]	; (800331c <vTaskStartScheduler+0xcc>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	3354      	adds	r3, #84	; 0x54
 80032ca:	4a15      	ldr	r2, [pc, #84]	; (8003320 <vTaskStartScheduler+0xd0>)
 80032cc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80032ce:	4b15      	ldr	r3, [pc, #84]	; (8003324 <vTaskStartScheduler+0xd4>)
 80032d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80032d6:	4b14      	ldr	r3, [pc, #80]	; (8003328 <vTaskStartScheduler+0xd8>)
 80032d8:	2201      	movs	r2, #1
 80032da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80032dc:	4b13      	ldr	r3, [pc, #76]	; (800332c <vTaskStartScheduler+0xdc>)
 80032de:	2200      	movs	r2, #0
 80032e0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80032e2:	f001 f985 	bl	80045f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80032e6:	e00e      	b.n	8003306 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032ee:	d10a      	bne.n	8003306 <vTaskStartScheduler+0xb6>
	__asm volatile
 80032f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f4:	f383 8811 	msr	BASEPRI, r3
 80032f8:	f3bf 8f6f 	isb	sy
 80032fc:	f3bf 8f4f 	dsb	sy
 8003300:	60fb      	str	r3, [r7, #12]
}
 8003302:	bf00      	nop
 8003304:	e7fe      	b.n	8003304 <vTaskStartScheduler+0xb4>
}
 8003306:	bf00      	nop
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	08004f70 	.word	0x08004f70
 8003314:	08003955 	.word	0x08003955
 8003318:	20000d68 	.word	0x20000d68
 800331c:	20000870 	.word	0x20000870
 8003320:	2000005c 	.word	0x2000005c
 8003324:	20000d64 	.word	0x20000d64
 8003328:	20000d50 	.word	0x20000d50
 800332c:	20000d48 	.word	0x20000d48

08003330 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003334:	4b04      	ldr	r3, [pc, #16]	; (8003348 <vTaskSuspendAll+0x18>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	3301      	adds	r3, #1
 800333a:	4a03      	ldr	r2, [pc, #12]	; (8003348 <vTaskSuspendAll+0x18>)
 800333c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800333e:	bf00      	nop
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	20000d6c 	.word	0x20000d6c

0800334c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003352:	2300      	movs	r3, #0
 8003354:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003356:	2300      	movs	r3, #0
 8003358:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800335a:	4b42      	ldr	r3, [pc, #264]	; (8003464 <xTaskResumeAll+0x118>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10a      	bne.n	8003378 <xTaskResumeAll+0x2c>
	__asm volatile
 8003362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003366:	f383 8811 	msr	BASEPRI, r3
 800336a:	f3bf 8f6f 	isb	sy
 800336e:	f3bf 8f4f 	dsb	sy
 8003372:	603b      	str	r3, [r7, #0]
}
 8003374:	bf00      	nop
 8003376:	e7fe      	b.n	8003376 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003378:	f001 f9dc 	bl	8004734 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800337c:	4b39      	ldr	r3, [pc, #228]	; (8003464 <xTaskResumeAll+0x118>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	3b01      	subs	r3, #1
 8003382:	4a38      	ldr	r2, [pc, #224]	; (8003464 <xTaskResumeAll+0x118>)
 8003384:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003386:	4b37      	ldr	r3, [pc, #220]	; (8003464 <xTaskResumeAll+0x118>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d162      	bne.n	8003454 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800338e:	4b36      	ldr	r3, [pc, #216]	; (8003468 <xTaskResumeAll+0x11c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d05e      	beq.n	8003454 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003396:	e02f      	b.n	80033f8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003398:	4b34      	ldr	r3, [pc, #208]	; (800346c <xTaskResumeAll+0x120>)
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	3318      	adds	r3, #24
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff f851 	bl	800244c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	3304      	adds	r3, #4
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff f84c 	bl	800244c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b8:	4b2d      	ldr	r3, [pc, #180]	; (8003470 <xTaskResumeAll+0x124>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d903      	bls.n	80033c8 <xTaskResumeAll+0x7c>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c4:	4a2a      	ldr	r2, [pc, #168]	; (8003470 <xTaskResumeAll+0x124>)
 80033c6:	6013      	str	r3, [r2, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033cc:	4613      	mov	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4a27      	ldr	r2, [pc, #156]	; (8003474 <xTaskResumeAll+0x128>)
 80033d6:	441a      	add	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	3304      	adds	r3, #4
 80033dc:	4619      	mov	r1, r3
 80033de:	4610      	mov	r0, r2
 80033e0:	f7fe ffd7 	bl	8002392 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e8:	4b23      	ldr	r3, [pc, #140]	; (8003478 <xTaskResumeAll+0x12c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d302      	bcc.n	80033f8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80033f2:	4b22      	ldr	r3, [pc, #136]	; (800347c <xTaskResumeAll+0x130>)
 80033f4:	2201      	movs	r2, #1
 80033f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033f8:	4b1c      	ldr	r3, [pc, #112]	; (800346c <xTaskResumeAll+0x120>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1cb      	bne.n	8003398 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003406:	f000 fb5f 	bl	8003ac8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800340a:	4b1d      	ldr	r3, [pc, #116]	; (8003480 <xTaskResumeAll+0x134>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d010      	beq.n	8003438 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003416:	f000 f847 	bl	80034a8 <xTaskIncrementTick>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d002      	beq.n	8003426 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003420:	4b16      	ldr	r3, [pc, #88]	; (800347c <xTaskResumeAll+0x130>)
 8003422:	2201      	movs	r2, #1
 8003424:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	3b01      	subs	r3, #1
 800342a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1f1      	bne.n	8003416 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003432:	4b13      	ldr	r3, [pc, #76]	; (8003480 <xTaskResumeAll+0x134>)
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003438:	4b10      	ldr	r3, [pc, #64]	; (800347c <xTaskResumeAll+0x130>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d009      	beq.n	8003454 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003440:	2301      	movs	r3, #1
 8003442:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003444:	4b0f      	ldr	r3, [pc, #60]	; (8003484 <xTaskResumeAll+0x138>)
 8003446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	f3bf 8f4f 	dsb	sy
 8003450:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003454:	f001 f99e 	bl	8004794 <vPortExitCritical>

	return xAlreadyYielded;
 8003458:	68bb      	ldr	r3, [r7, #8]
}
 800345a:	4618      	mov	r0, r3
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	20000d6c 	.word	0x20000d6c
 8003468:	20000d44 	.word	0x20000d44
 800346c:	20000d04 	.word	0x20000d04
 8003470:	20000d4c 	.word	0x20000d4c
 8003474:	20000874 	.word	0x20000874
 8003478:	20000870 	.word	0x20000870
 800347c:	20000d58 	.word	0x20000d58
 8003480:	20000d54 	.word	0x20000d54
 8003484:	e000ed04 	.word	0xe000ed04

08003488 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800348e:	4b05      	ldr	r3, [pc, #20]	; (80034a4 <xTaskGetTickCount+0x1c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003494:	687b      	ldr	r3, [r7, #4]
}
 8003496:	4618      	mov	r0, r3
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	20000d48 	.word	0x20000d48

080034a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80034ae:	2300      	movs	r3, #0
 80034b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034b2:	4b4f      	ldr	r3, [pc, #316]	; (80035f0 <xTaskIncrementTick+0x148>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f040 808f 	bne.w	80035da <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80034bc:	4b4d      	ldr	r3, [pc, #308]	; (80035f4 <xTaskIncrementTick+0x14c>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	3301      	adds	r3, #1
 80034c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80034c4:	4a4b      	ldr	r2, [pc, #300]	; (80035f4 <xTaskIncrementTick+0x14c>)
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d120      	bne.n	8003512 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80034d0:	4b49      	ldr	r3, [pc, #292]	; (80035f8 <xTaskIncrementTick+0x150>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00a      	beq.n	80034f0 <xTaskIncrementTick+0x48>
	__asm volatile
 80034da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034de:	f383 8811 	msr	BASEPRI, r3
 80034e2:	f3bf 8f6f 	isb	sy
 80034e6:	f3bf 8f4f 	dsb	sy
 80034ea:	603b      	str	r3, [r7, #0]
}
 80034ec:	bf00      	nop
 80034ee:	e7fe      	b.n	80034ee <xTaskIncrementTick+0x46>
 80034f0:	4b41      	ldr	r3, [pc, #260]	; (80035f8 <xTaskIncrementTick+0x150>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	4b41      	ldr	r3, [pc, #260]	; (80035fc <xTaskIncrementTick+0x154>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a3f      	ldr	r2, [pc, #252]	; (80035f8 <xTaskIncrementTick+0x150>)
 80034fc:	6013      	str	r3, [r2, #0]
 80034fe:	4a3f      	ldr	r2, [pc, #252]	; (80035fc <xTaskIncrementTick+0x154>)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6013      	str	r3, [r2, #0]
 8003504:	4b3e      	ldr	r3, [pc, #248]	; (8003600 <xTaskIncrementTick+0x158>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	3301      	adds	r3, #1
 800350a:	4a3d      	ldr	r2, [pc, #244]	; (8003600 <xTaskIncrementTick+0x158>)
 800350c:	6013      	str	r3, [r2, #0]
 800350e:	f000 fadb 	bl	8003ac8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003512:	4b3c      	ldr	r3, [pc, #240]	; (8003604 <xTaskIncrementTick+0x15c>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	429a      	cmp	r2, r3
 800351a:	d349      	bcc.n	80035b0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800351c:	4b36      	ldr	r3, [pc, #216]	; (80035f8 <xTaskIncrementTick+0x150>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d104      	bne.n	8003530 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003526:	4b37      	ldr	r3, [pc, #220]	; (8003604 <xTaskIncrementTick+0x15c>)
 8003528:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800352c:	601a      	str	r2, [r3, #0]
					break;
 800352e:	e03f      	b.n	80035b0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003530:	4b31      	ldr	r3, [pc, #196]	; (80035f8 <xTaskIncrementTick+0x150>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	429a      	cmp	r2, r3
 8003546:	d203      	bcs.n	8003550 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003548:	4a2e      	ldr	r2, [pc, #184]	; (8003604 <xTaskIncrementTick+0x15c>)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800354e:	e02f      	b.n	80035b0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	3304      	adds	r3, #4
 8003554:	4618      	mov	r0, r3
 8003556:	f7fe ff79 	bl	800244c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355e:	2b00      	cmp	r3, #0
 8003560:	d004      	beq.n	800356c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	3318      	adds	r3, #24
 8003566:	4618      	mov	r0, r3
 8003568:	f7fe ff70 	bl	800244c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003570:	4b25      	ldr	r3, [pc, #148]	; (8003608 <xTaskIncrementTick+0x160>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	429a      	cmp	r2, r3
 8003576:	d903      	bls.n	8003580 <xTaskIncrementTick+0xd8>
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357c:	4a22      	ldr	r2, [pc, #136]	; (8003608 <xTaskIncrementTick+0x160>)
 800357e:	6013      	str	r3, [r2, #0]
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003584:	4613      	mov	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4a1f      	ldr	r2, [pc, #124]	; (800360c <xTaskIncrementTick+0x164>)
 800358e:	441a      	add	r2, r3
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	3304      	adds	r3, #4
 8003594:	4619      	mov	r1, r3
 8003596:	4610      	mov	r0, r2
 8003598:	f7fe fefb 	bl	8002392 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a0:	4b1b      	ldr	r3, [pc, #108]	; (8003610 <xTaskIncrementTick+0x168>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d3b8      	bcc.n	800351c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80035aa:	2301      	movs	r3, #1
 80035ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035ae:	e7b5      	b.n	800351c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80035b0:	4b17      	ldr	r3, [pc, #92]	; (8003610 <xTaskIncrementTick+0x168>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b6:	4915      	ldr	r1, [pc, #84]	; (800360c <xTaskIncrementTick+0x164>)
 80035b8:	4613      	mov	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	440b      	add	r3, r1
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d901      	bls.n	80035cc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80035c8:	2301      	movs	r3, #1
 80035ca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80035cc:	4b11      	ldr	r3, [pc, #68]	; (8003614 <xTaskIncrementTick+0x16c>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d007      	beq.n	80035e4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80035d4:	2301      	movs	r3, #1
 80035d6:	617b      	str	r3, [r7, #20]
 80035d8:	e004      	b.n	80035e4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80035da:	4b0f      	ldr	r3, [pc, #60]	; (8003618 <xTaskIncrementTick+0x170>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	3301      	adds	r3, #1
 80035e0:	4a0d      	ldr	r2, [pc, #52]	; (8003618 <xTaskIncrementTick+0x170>)
 80035e2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80035e4:	697b      	ldr	r3, [r7, #20]
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3718      	adds	r7, #24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	20000d6c 	.word	0x20000d6c
 80035f4:	20000d48 	.word	0x20000d48
 80035f8:	20000cfc 	.word	0x20000cfc
 80035fc:	20000d00 	.word	0x20000d00
 8003600:	20000d5c 	.word	0x20000d5c
 8003604:	20000d64 	.word	0x20000d64
 8003608:	20000d4c 	.word	0x20000d4c
 800360c:	20000874 	.word	0x20000874
 8003610:	20000870 	.word	0x20000870
 8003614:	20000d58 	.word	0x20000d58
 8003618:	20000d54 	.word	0x20000d54

0800361c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003622:	4b2a      	ldr	r3, [pc, #168]	; (80036cc <vTaskSwitchContext+0xb0>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800362a:	4b29      	ldr	r3, [pc, #164]	; (80036d0 <vTaskSwitchContext+0xb4>)
 800362c:	2201      	movs	r2, #1
 800362e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003630:	e046      	b.n	80036c0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003632:	4b27      	ldr	r3, [pc, #156]	; (80036d0 <vTaskSwitchContext+0xb4>)
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003638:	4b26      	ldr	r3, [pc, #152]	; (80036d4 <vTaskSwitchContext+0xb8>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	60fb      	str	r3, [r7, #12]
 800363e:	e010      	b.n	8003662 <vTaskSwitchContext+0x46>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10a      	bne.n	800365c <vTaskSwitchContext+0x40>
	__asm volatile
 8003646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800364a:	f383 8811 	msr	BASEPRI, r3
 800364e:	f3bf 8f6f 	isb	sy
 8003652:	f3bf 8f4f 	dsb	sy
 8003656:	607b      	str	r3, [r7, #4]
}
 8003658:	bf00      	nop
 800365a:	e7fe      	b.n	800365a <vTaskSwitchContext+0x3e>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	3b01      	subs	r3, #1
 8003660:	60fb      	str	r3, [r7, #12]
 8003662:	491d      	ldr	r1, [pc, #116]	; (80036d8 <vTaskSwitchContext+0xbc>)
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	4613      	mov	r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	4413      	add	r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	440b      	add	r3, r1
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d0e4      	beq.n	8003640 <vTaskSwitchContext+0x24>
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	4613      	mov	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4413      	add	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4a15      	ldr	r2, [pc, #84]	; (80036d8 <vTaskSwitchContext+0xbc>)
 8003682:	4413      	add	r3, r2
 8003684:	60bb      	str	r3, [r7, #8]
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	605a      	str	r2, [r3, #4]
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	3308      	adds	r3, #8
 8003698:	429a      	cmp	r2, r3
 800369a:	d104      	bne.n	80036a6 <vTaskSwitchContext+0x8a>
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	605a      	str	r2, [r3, #4]
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	4a0b      	ldr	r2, [pc, #44]	; (80036dc <vTaskSwitchContext+0xc0>)
 80036ae:	6013      	str	r3, [r2, #0]
 80036b0:	4a08      	ldr	r2, [pc, #32]	; (80036d4 <vTaskSwitchContext+0xb8>)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80036b6:	4b09      	ldr	r3, [pc, #36]	; (80036dc <vTaskSwitchContext+0xc0>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	3354      	adds	r3, #84	; 0x54
 80036bc:	4a08      	ldr	r2, [pc, #32]	; (80036e0 <vTaskSwitchContext+0xc4>)
 80036be:	6013      	str	r3, [r2, #0]
}
 80036c0:	bf00      	nop
 80036c2:	3714      	adds	r7, #20
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	20000d6c 	.word	0x20000d6c
 80036d0:	20000d58 	.word	0x20000d58
 80036d4:	20000d4c 	.word	0x20000d4c
 80036d8:	20000874 	.word	0x20000874
 80036dc:	20000870 	.word	0x20000870
 80036e0:	2000005c 	.word	0x2000005c

080036e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10a      	bne.n	800370a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80036f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f8:	f383 8811 	msr	BASEPRI, r3
 80036fc:	f3bf 8f6f 	isb	sy
 8003700:	f3bf 8f4f 	dsb	sy
 8003704:	60fb      	str	r3, [r7, #12]
}
 8003706:	bf00      	nop
 8003708:	e7fe      	b.n	8003708 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800370a:	4b07      	ldr	r3, [pc, #28]	; (8003728 <vTaskPlaceOnEventList+0x44>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	3318      	adds	r3, #24
 8003710:	4619      	mov	r1, r3
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7fe fe61 	bl	80023da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003718:	2101      	movs	r1, #1
 800371a:	6838      	ldr	r0, [r7, #0]
 800371c:	f000 fa80 	bl	8003c20 <prvAddCurrentTaskToDelayedList>
}
 8003720:	bf00      	nop
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	20000870 	.word	0x20000870

0800372c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10a      	bne.n	8003754 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800373e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003742:	f383 8811 	msr	BASEPRI, r3
 8003746:	f3bf 8f6f 	isb	sy
 800374a:	f3bf 8f4f 	dsb	sy
 800374e:	617b      	str	r3, [r7, #20]
}
 8003750:	bf00      	nop
 8003752:	e7fe      	b.n	8003752 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003754:	4b0a      	ldr	r3, [pc, #40]	; (8003780 <vTaskPlaceOnEventListRestricted+0x54>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	3318      	adds	r3, #24
 800375a:	4619      	mov	r1, r3
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f7fe fe18 	bl	8002392 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d002      	beq.n	800376e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003768:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800376c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800376e:	6879      	ldr	r1, [r7, #4]
 8003770:	68b8      	ldr	r0, [r7, #8]
 8003772:	f000 fa55 	bl	8003c20 <prvAddCurrentTaskToDelayedList>
	}
 8003776:	bf00      	nop
 8003778:	3718      	adds	r7, #24
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	20000870 	.word	0x20000870

08003784 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10a      	bne.n	80037b0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800379a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379e:	f383 8811 	msr	BASEPRI, r3
 80037a2:	f3bf 8f6f 	isb	sy
 80037a6:	f3bf 8f4f 	dsb	sy
 80037aa:	60fb      	str	r3, [r7, #12]
}
 80037ac:	bf00      	nop
 80037ae:	e7fe      	b.n	80037ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	3318      	adds	r3, #24
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7fe fe49 	bl	800244c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037ba:	4b1e      	ldr	r3, [pc, #120]	; (8003834 <xTaskRemoveFromEventList+0xb0>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d11d      	bne.n	80037fe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	3304      	adds	r3, #4
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7fe fe40 	bl	800244c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d0:	4b19      	ldr	r3, [pc, #100]	; (8003838 <xTaskRemoveFromEventList+0xb4>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d903      	bls.n	80037e0 <xTaskRemoveFromEventList+0x5c>
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037dc:	4a16      	ldr	r2, [pc, #88]	; (8003838 <xTaskRemoveFromEventList+0xb4>)
 80037de:	6013      	str	r3, [r2, #0]
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e4:	4613      	mov	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4a13      	ldr	r2, [pc, #76]	; (800383c <xTaskRemoveFromEventList+0xb8>)
 80037ee:	441a      	add	r2, r3
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	3304      	adds	r3, #4
 80037f4:	4619      	mov	r1, r3
 80037f6:	4610      	mov	r0, r2
 80037f8:	f7fe fdcb 	bl	8002392 <vListInsertEnd>
 80037fc:	e005      	b.n	800380a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	3318      	adds	r3, #24
 8003802:	4619      	mov	r1, r3
 8003804:	480e      	ldr	r0, [pc, #56]	; (8003840 <xTaskRemoveFromEventList+0xbc>)
 8003806:	f7fe fdc4 	bl	8002392 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800380e:	4b0d      	ldr	r3, [pc, #52]	; (8003844 <xTaskRemoveFromEventList+0xc0>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	429a      	cmp	r2, r3
 8003816:	d905      	bls.n	8003824 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003818:	2301      	movs	r3, #1
 800381a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800381c:	4b0a      	ldr	r3, [pc, #40]	; (8003848 <xTaskRemoveFromEventList+0xc4>)
 800381e:	2201      	movs	r2, #1
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	e001      	b.n	8003828 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003824:	2300      	movs	r3, #0
 8003826:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003828:	697b      	ldr	r3, [r7, #20]
}
 800382a:	4618      	mov	r0, r3
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	20000d6c 	.word	0x20000d6c
 8003838:	20000d4c 	.word	0x20000d4c
 800383c:	20000874 	.word	0x20000874
 8003840:	20000d04 	.word	0x20000d04
 8003844:	20000870 	.word	0x20000870
 8003848:	20000d58 	.word	0x20000d58

0800384c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003854:	4b06      	ldr	r3, [pc, #24]	; (8003870 <vTaskInternalSetTimeOutState+0x24>)
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800385c:	4b05      	ldr	r3, [pc, #20]	; (8003874 <vTaskInternalSetTimeOutState+0x28>)
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	605a      	str	r2, [r3, #4]
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr
 8003870:	20000d5c 	.word	0x20000d5c
 8003874:	20000d48 	.word	0x20000d48

08003878 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b088      	sub	sp, #32
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10a      	bne.n	800389e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388c:	f383 8811 	msr	BASEPRI, r3
 8003890:	f3bf 8f6f 	isb	sy
 8003894:	f3bf 8f4f 	dsb	sy
 8003898:	613b      	str	r3, [r7, #16]
}
 800389a:	bf00      	nop
 800389c:	e7fe      	b.n	800389c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10a      	bne.n	80038ba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80038a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a8:	f383 8811 	msr	BASEPRI, r3
 80038ac:	f3bf 8f6f 	isb	sy
 80038b0:	f3bf 8f4f 	dsb	sy
 80038b4:	60fb      	str	r3, [r7, #12]
}
 80038b6:	bf00      	nop
 80038b8:	e7fe      	b.n	80038b8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80038ba:	f000 ff3b 	bl	8004734 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80038be:	4b1d      	ldr	r3, [pc, #116]	; (8003934 <xTaskCheckForTimeOut+0xbc>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038d6:	d102      	bne.n	80038de <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80038d8:	2300      	movs	r3, #0
 80038da:	61fb      	str	r3, [r7, #28]
 80038dc:	e023      	b.n	8003926 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	4b15      	ldr	r3, [pc, #84]	; (8003938 <xTaskCheckForTimeOut+0xc0>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d007      	beq.n	80038fa <xTaskCheckForTimeOut+0x82>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d302      	bcc.n	80038fa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80038f4:	2301      	movs	r3, #1
 80038f6:	61fb      	str	r3, [r7, #28]
 80038f8:	e015      	b.n	8003926 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	429a      	cmp	r2, r3
 8003902:	d20b      	bcs.n	800391c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	1ad2      	subs	r2, r2, r3
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f7ff ff9b 	bl	800384c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003916:	2300      	movs	r3, #0
 8003918:	61fb      	str	r3, [r7, #28]
 800391a:	e004      	b.n	8003926 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003922:	2301      	movs	r3, #1
 8003924:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003926:	f000 ff35 	bl	8004794 <vPortExitCritical>

	return xReturn;
 800392a:	69fb      	ldr	r3, [r7, #28]
}
 800392c:	4618      	mov	r0, r3
 800392e:	3720      	adds	r7, #32
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	20000d48 	.word	0x20000d48
 8003938:	20000d5c 	.word	0x20000d5c

0800393c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003940:	4b03      	ldr	r3, [pc, #12]	; (8003950 <vTaskMissedYield+0x14>)
 8003942:	2201      	movs	r2, #1
 8003944:	601a      	str	r2, [r3, #0]
}
 8003946:	bf00      	nop
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr
 8003950:	20000d58 	.word	0x20000d58

08003954 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800395c:	f000 f852 	bl	8003a04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003960:	4b06      	ldr	r3, [pc, #24]	; (800397c <prvIdleTask+0x28>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d9f9      	bls.n	800395c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003968:	4b05      	ldr	r3, [pc, #20]	; (8003980 <prvIdleTask+0x2c>)
 800396a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	f3bf 8f4f 	dsb	sy
 8003974:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003978:	e7f0      	b.n	800395c <prvIdleTask+0x8>
 800397a:	bf00      	nop
 800397c:	20000874 	.word	0x20000874
 8003980:	e000ed04 	.word	0xe000ed04

08003984 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800398a:	2300      	movs	r3, #0
 800398c:	607b      	str	r3, [r7, #4]
 800398e:	e00c      	b.n	80039aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	4613      	mov	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4a12      	ldr	r2, [pc, #72]	; (80039e4 <prvInitialiseTaskLists+0x60>)
 800399c:	4413      	add	r3, r2
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fe fcca 	bl	8002338 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3301      	adds	r3, #1
 80039a8:	607b      	str	r3, [r7, #4]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2b37      	cmp	r3, #55	; 0x37
 80039ae:	d9ef      	bls.n	8003990 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80039b0:	480d      	ldr	r0, [pc, #52]	; (80039e8 <prvInitialiseTaskLists+0x64>)
 80039b2:	f7fe fcc1 	bl	8002338 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80039b6:	480d      	ldr	r0, [pc, #52]	; (80039ec <prvInitialiseTaskLists+0x68>)
 80039b8:	f7fe fcbe 	bl	8002338 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80039bc:	480c      	ldr	r0, [pc, #48]	; (80039f0 <prvInitialiseTaskLists+0x6c>)
 80039be:	f7fe fcbb 	bl	8002338 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80039c2:	480c      	ldr	r0, [pc, #48]	; (80039f4 <prvInitialiseTaskLists+0x70>)
 80039c4:	f7fe fcb8 	bl	8002338 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80039c8:	480b      	ldr	r0, [pc, #44]	; (80039f8 <prvInitialiseTaskLists+0x74>)
 80039ca:	f7fe fcb5 	bl	8002338 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80039ce:	4b0b      	ldr	r3, [pc, #44]	; (80039fc <prvInitialiseTaskLists+0x78>)
 80039d0:	4a05      	ldr	r2, [pc, #20]	; (80039e8 <prvInitialiseTaskLists+0x64>)
 80039d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80039d4:	4b0a      	ldr	r3, [pc, #40]	; (8003a00 <prvInitialiseTaskLists+0x7c>)
 80039d6:	4a05      	ldr	r2, [pc, #20]	; (80039ec <prvInitialiseTaskLists+0x68>)
 80039d8:	601a      	str	r2, [r3, #0]
}
 80039da:	bf00      	nop
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	20000874 	.word	0x20000874
 80039e8:	20000cd4 	.word	0x20000cd4
 80039ec:	20000ce8 	.word	0x20000ce8
 80039f0:	20000d04 	.word	0x20000d04
 80039f4:	20000d18 	.word	0x20000d18
 80039f8:	20000d30 	.word	0x20000d30
 80039fc:	20000cfc 	.word	0x20000cfc
 8003a00:	20000d00 	.word	0x20000d00

08003a04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a0a:	e019      	b.n	8003a40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003a0c:	f000 fe92 	bl	8004734 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a10:	4b10      	ldr	r3, [pc, #64]	; (8003a54 <prvCheckTasksWaitingTermination+0x50>)
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	3304      	adds	r3, #4
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7fe fd15 	bl	800244c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003a22:	4b0d      	ldr	r3, [pc, #52]	; (8003a58 <prvCheckTasksWaitingTermination+0x54>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	3b01      	subs	r3, #1
 8003a28:	4a0b      	ldr	r2, [pc, #44]	; (8003a58 <prvCheckTasksWaitingTermination+0x54>)
 8003a2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003a2c:	4b0b      	ldr	r3, [pc, #44]	; (8003a5c <prvCheckTasksWaitingTermination+0x58>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	3b01      	subs	r3, #1
 8003a32:	4a0a      	ldr	r2, [pc, #40]	; (8003a5c <prvCheckTasksWaitingTermination+0x58>)
 8003a34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003a36:	f000 fead 	bl	8004794 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 f810 	bl	8003a60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a40:	4b06      	ldr	r3, [pc, #24]	; (8003a5c <prvCheckTasksWaitingTermination+0x58>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1e1      	bne.n	8003a0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003a48:	bf00      	nop
 8003a4a:	bf00      	nop
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	20000d18 	.word	0x20000d18
 8003a58:	20000d44 	.word	0x20000d44
 8003a5c:	20000d2c 	.word	0x20000d2c

08003a60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3354      	adds	r3, #84	; 0x54
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f001 f975 	bl	8004d5c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d108      	bne.n	8003a8e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a80:	4618      	mov	r0, r3
 8003a82:	f001 f845 	bl	8004b10 <vPortFree>
				vPortFree( pxTCB );
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f001 f842 	bl	8004b10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003a8c:	e018      	b.n	8003ac0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d103      	bne.n	8003aa0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f001 f839 	bl	8004b10 <vPortFree>
	}
 8003a9e:	e00f      	b.n	8003ac0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d00a      	beq.n	8003ac0 <prvDeleteTCB+0x60>
	__asm volatile
 8003aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aae:	f383 8811 	msr	BASEPRI, r3
 8003ab2:	f3bf 8f6f 	isb	sy
 8003ab6:	f3bf 8f4f 	dsb	sy
 8003aba:	60fb      	str	r3, [r7, #12]
}
 8003abc:	bf00      	nop
 8003abe:	e7fe      	b.n	8003abe <prvDeleteTCB+0x5e>
	}
 8003ac0:	bf00      	nop
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ace:	4b0c      	ldr	r3, [pc, #48]	; (8003b00 <prvResetNextTaskUnblockTime+0x38>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d104      	bne.n	8003ae2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ad8:	4b0a      	ldr	r3, [pc, #40]	; (8003b04 <prvResetNextTaskUnblockTime+0x3c>)
 8003ada:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ade:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003ae0:	e008      	b.n	8003af4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ae2:	4b07      	ldr	r3, [pc, #28]	; (8003b00 <prvResetNextTaskUnblockTime+0x38>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	4a04      	ldr	r2, [pc, #16]	; (8003b04 <prvResetNextTaskUnblockTime+0x3c>)
 8003af2:	6013      	str	r3, [r2, #0]
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	20000cfc 	.word	0x20000cfc
 8003b04:	20000d64 	.word	0x20000d64

08003b08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003b0e:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <xTaskGetSchedulerState+0x34>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d102      	bne.n	8003b1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003b16:	2301      	movs	r3, #1
 8003b18:	607b      	str	r3, [r7, #4]
 8003b1a:	e008      	b.n	8003b2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b1c:	4b08      	ldr	r3, [pc, #32]	; (8003b40 <xTaskGetSchedulerState+0x38>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d102      	bne.n	8003b2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003b24:	2302      	movs	r3, #2
 8003b26:	607b      	str	r3, [r7, #4]
 8003b28:	e001      	b.n	8003b2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003b2e:	687b      	ldr	r3, [r7, #4]
	}
 8003b30:	4618      	mov	r0, r3
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	20000d50 	.word	0x20000d50
 8003b40:	20000d6c 	.word	0x20000d6c

08003b44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003b50:	2300      	movs	r3, #0
 8003b52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d056      	beq.n	8003c08 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003b5a:	4b2e      	ldr	r3, [pc, #184]	; (8003c14 <xTaskPriorityDisinherit+0xd0>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d00a      	beq.n	8003b7a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b68:	f383 8811 	msr	BASEPRI, r3
 8003b6c:	f3bf 8f6f 	isb	sy
 8003b70:	f3bf 8f4f 	dsb	sy
 8003b74:	60fb      	str	r3, [r7, #12]
}
 8003b76:	bf00      	nop
 8003b78:	e7fe      	b.n	8003b78 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10a      	bne.n	8003b98 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b86:	f383 8811 	msr	BASEPRI, r3
 8003b8a:	f3bf 8f6f 	isb	sy
 8003b8e:	f3bf 8f4f 	dsb	sy
 8003b92:	60bb      	str	r3, [r7, #8]
}
 8003b94:	bf00      	nop
 8003b96:	e7fe      	b.n	8003b96 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b9c:	1e5a      	subs	r2, r3, #1
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d02c      	beq.n	8003c08 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d128      	bne.n	8003c08 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	3304      	adds	r3, #4
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7fe fc46 	bl	800244c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bcc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd8:	4b0f      	ldr	r3, [pc, #60]	; (8003c18 <xTaskPriorityDisinherit+0xd4>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d903      	bls.n	8003be8 <xTaskPriorityDisinherit+0xa4>
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be4:	4a0c      	ldr	r2, [pc, #48]	; (8003c18 <xTaskPriorityDisinherit+0xd4>)
 8003be6:	6013      	str	r3, [r2, #0]
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bec:	4613      	mov	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4a09      	ldr	r2, [pc, #36]	; (8003c1c <xTaskPriorityDisinherit+0xd8>)
 8003bf6:	441a      	add	r2, r3
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	3304      	adds	r3, #4
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	4610      	mov	r0, r2
 8003c00:	f7fe fbc7 	bl	8002392 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003c04:	2301      	movs	r3, #1
 8003c06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003c08:	697b      	ldr	r3, [r7, #20]
	}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3718      	adds	r7, #24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	20000870 	.word	0x20000870
 8003c18:	20000d4c 	.word	0x20000d4c
 8003c1c:	20000874 	.word	0x20000874

08003c20 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003c2a:	4b21      	ldr	r3, [pc, #132]	; (8003cb0 <prvAddCurrentTaskToDelayedList+0x90>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c30:	4b20      	ldr	r3, [pc, #128]	; (8003cb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	3304      	adds	r3, #4
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7fe fc08 	bl	800244c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c42:	d10a      	bne.n	8003c5a <prvAddCurrentTaskToDelayedList+0x3a>
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d007      	beq.n	8003c5a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c4a:	4b1a      	ldr	r3, [pc, #104]	; (8003cb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	3304      	adds	r3, #4
 8003c50:	4619      	mov	r1, r3
 8003c52:	4819      	ldr	r0, [pc, #100]	; (8003cb8 <prvAddCurrentTaskToDelayedList+0x98>)
 8003c54:	f7fe fb9d 	bl	8002392 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003c58:	e026      	b.n	8003ca8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4413      	add	r3, r2
 8003c60:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003c62:	4b14      	ldr	r3, [pc, #80]	; (8003cb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68ba      	ldr	r2, [r7, #8]
 8003c68:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d209      	bcs.n	8003c86 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c72:	4b12      	ldr	r3, [pc, #72]	; (8003cbc <prvAddCurrentTaskToDelayedList+0x9c>)
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	4b0f      	ldr	r3, [pc, #60]	; (8003cb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	3304      	adds	r3, #4
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4610      	mov	r0, r2
 8003c80:	f7fe fbab 	bl	80023da <vListInsert>
}
 8003c84:	e010      	b.n	8003ca8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c86:	4b0e      	ldr	r3, [pc, #56]	; (8003cc0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	4b0a      	ldr	r3, [pc, #40]	; (8003cb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	3304      	adds	r3, #4
 8003c90:	4619      	mov	r1, r3
 8003c92:	4610      	mov	r0, r2
 8003c94:	f7fe fba1 	bl	80023da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003c98:	4b0a      	ldr	r3, [pc, #40]	; (8003cc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d202      	bcs.n	8003ca8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003ca2:	4a08      	ldr	r2, [pc, #32]	; (8003cc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	6013      	str	r3, [r2, #0]
}
 8003ca8:	bf00      	nop
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	20000d48 	.word	0x20000d48
 8003cb4:	20000870 	.word	0x20000870
 8003cb8:	20000d30 	.word	0x20000d30
 8003cbc:	20000d00 	.word	0x20000d00
 8003cc0:	20000cfc 	.word	0x20000cfc
 8003cc4:	20000d64 	.word	0x20000d64

08003cc8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b08a      	sub	sp, #40	; 0x28
 8003ccc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003cd2:	f000 fba1 	bl	8004418 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003cd6:	4b1c      	ldr	r3, [pc, #112]	; (8003d48 <xTimerCreateTimerTask+0x80>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d021      	beq.n	8003d22 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003ce6:	1d3a      	adds	r2, r7, #4
 8003ce8:	f107 0108 	add.w	r1, r7, #8
 8003cec:	f107 030c 	add.w	r3, r7, #12
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7fe fb07 	bl	8002304 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003cf6:	6879      	ldr	r1, [r7, #4]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	9202      	str	r2, [sp, #8]
 8003cfe:	9301      	str	r3, [sp, #4]
 8003d00:	2302      	movs	r3, #2
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	2300      	movs	r3, #0
 8003d06:	460a      	mov	r2, r1
 8003d08:	4910      	ldr	r1, [pc, #64]	; (8003d4c <xTimerCreateTimerTask+0x84>)
 8003d0a:	4811      	ldr	r0, [pc, #68]	; (8003d50 <xTimerCreateTimerTask+0x88>)
 8003d0c:	f7ff f8b4 	bl	8002e78 <xTaskCreateStatic>
 8003d10:	4603      	mov	r3, r0
 8003d12:	4a10      	ldr	r2, [pc, #64]	; (8003d54 <xTimerCreateTimerTask+0x8c>)
 8003d14:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003d16:	4b0f      	ldr	r3, [pc, #60]	; (8003d54 <xTimerCreateTimerTask+0x8c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10a      	bne.n	8003d3e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d2c:	f383 8811 	msr	BASEPRI, r3
 8003d30:	f3bf 8f6f 	isb	sy
 8003d34:	f3bf 8f4f 	dsb	sy
 8003d38:	613b      	str	r3, [r7, #16]
}
 8003d3a:	bf00      	nop
 8003d3c:	e7fe      	b.n	8003d3c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003d3e:	697b      	ldr	r3, [r7, #20]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3718      	adds	r7, #24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	20000da0 	.word	0x20000da0
 8003d4c:	08004f78 	.word	0x08004f78
 8003d50:	08003fc1 	.word	0x08003fc1
 8003d54:	20000da4 	.word	0x20000da4

08003d58 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b088      	sub	sp, #32
 8003d5c:	af02      	add	r7, sp, #8
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
 8003d64:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8003d66:	202c      	movs	r0, #44	; 0x2c
 8003d68:	f000 fe06 	bl	8004978 <pvPortMalloc>
 8003d6c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00d      	beq.n	8003d90 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	9301      	str	r3, [sp, #4]
 8003d80:	6a3b      	ldr	r3, [r7, #32]
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	68b9      	ldr	r1, [r7, #8]
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f000 f843 	bl	8003e16 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8003d90:	697b      	ldr	r3, [r7, #20]
	}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3718      	adds	r7, #24
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b08a      	sub	sp, #40	; 0x28
 8003d9e:	af02      	add	r7, sp, #8
 8003da0:	60f8      	str	r0, [r7, #12]
 8003da2:	60b9      	str	r1, [r7, #8]
 8003da4:	607a      	str	r2, [r7, #4]
 8003da6:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8003da8:	232c      	movs	r3, #44	; 0x2c
 8003daa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	2b2c      	cmp	r3, #44	; 0x2c
 8003db0:	d00a      	beq.n	8003dc8 <xTimerCreateStatic+0x2e>
	__asm volatile
 8003db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db6:	f383 8811 	msr	BASEPRI, r3
 8003dba:	f3bf 8f6f 	isb	sy
 8003dbe:	f3bf 8f4f 	dsb	sy
 8003dc2:	61bb      	str	r3, [r7, #24]
}
 8003dc4:	bf00      	nop
 8003dc6:	e7fe      	b.n	8003dc6 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003dc8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8003dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10a      	bne.n	8003de6 <xTimerCreateStatic+0x4c>
	__asm volatile
 8003dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd4:	f383 8811 	msr	BASEPRI, r3
 8003dd8:	f3bf 8f6f 	isb	sy
 8003ddc:	f3bf 8f4f 	dsb	sy
 8003de0:	617b      	str	r3, [r7, #20]
}
 8003de2:	bf00      	nop
 8003de4:	e7fe      	b.n	8003de4 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8003de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de8:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00d      	beq.n	8003e0c <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	2202      	movs	r2, #2
 8003df4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	9301      	str	r3, [sp, #4]
 8003dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfe:	9300      	str	r3, [sp, #0]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	68b9      	ldr	r1, [r7, #8]
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f000 f805 	bl	8003e16 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8003e0c:	69fb      	ldr	r3, [r7, #28]
	}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3720      	adds	r7, #32
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b086      	sub	sp, #24
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	60f8      	str	r0, [r7, #12]
 8003e1e:	60b9      	str	r1, [r7, #8]
 8003e20:	607a      	str	r2, [r7, #4]
 8003e22:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10a      	bne.n	8003e40 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8003e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2e:	f383 8811 	msr	BASEPRI, r3
 8003e32:	f3bf 8f6f 	isb	sy
 8003e36:	f3bf 8f4f 	dsb	sy
 8003e3a:	617b      	str	r3, [r7, #20]
}
 8003e3c:	bf00      	nop
 8003e3e:	e7fe      	b.n	8003e3e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d01e      	beq.n	8003e84 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8003e46:	f000 fae7 	bl	8004418 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	6a3a      	ldr	r2, [r7, #32]
 8003e60:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	3304      	adds	r3, #4
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fe fa86 	bl	8002378 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d008      	beq.n	8003e84 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8003e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e78:	f043 0304 	orr.w	r3, r3, #4
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8003e84:	bf00      	nop
 8003e86:	3718      	adds	r7, #24
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b08a      	sub	sp, #40	; 0x28
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
 8003e98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d10a      	bne.n	8003eba <xTimerGenericCommand+0x2e>
	__asm volatile
 8003ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea8:	f383 8811 	msr	BASEPRI, r3
 8003eac:	f3bf 8f6f 	isb	sy
 8003eb0:	f3bf 8f4f 	dsb	sy
 8003eb4:	623b      	str	r3, [r7, #32]
}
 8003eb6:	bf00      	nop
 8003eb8:	e7fe      	b.n	8003eb8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003eba:	4b1a      	ldr	r3, [pc, #104]	; (8003f24 <xTimerGenericCommand+0x98>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d02a      	beq.n	8003f18 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	2b05      	cmp	r3, #5
 8003ed2:	dc18      	bgt.n	8003f06 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003ed4:	f7ff fe18 	bl	8003b08 <xTaskGetSchedulerState>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d109      	bne.n	8003ef2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003ede:	4b11      	ldr	r3, [pc, #68]	; (8003f24 <xTimerGenericCommand+0x98>)
 8003ee0:	6818      	ldr	r0, [r3, #0]
 8003ee2:	f107 0110 	add.w	r1, r7, #16
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eea:	f7fe fbdd 	bl	80026a8 <xQueueGenericSend>
 8003eee:	6278      	str	r0, [r7, #36]	; 0x24
 8003ef0:	e012      	b.n	8003f18 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003ef2:	4b0c      	ldr	r3, [pc, #48]	; (8003f24 <xTimerGenericCommand+0x98>)
 8003ef4:	6818      	ldr	r0, [r3, #0]
 8003ef6:	f107 0110 	add.w	r1, r7, #16
 8003efa:	2300      	movs	r3, #0
 8003efc:	2200      	movs	r2, #0
 8003efe:	f7fe fbd3 	bl	80026a8 <xQueueGenericSend>
 8003f02:	6278      	str	r0, [r7, #36]	; 0x24
 8003f04:	e008      	b.n	8003f18 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003f06:	4b07      	ldr	r3, [pc, #28]	; (8003f24 <xTimerGenericCommand+0x98>)
 8003f08:	6818      	ldr	r0, [r3, #0]
 8003f0a:	f107 0110 	add.w	r1, r7, #16
 8003f0e:	2300      	movs	r3, #0
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	f7fe fcc7 	bl	80028a4 <xQueueGenericSendFromISR>
 8003f16:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3728      	adds	r7, #40	; 0x28
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	20000da0 	.word	0x20000da0

08003f28 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b088      	sub	sp, #32
 8003f2c:	af02      	add	r7, sp, #8
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f32:	4b22      	ldr	r3, [pc, #136]	; (8003fbc <prvProcessExpiredTimer+0x94>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	3304      	adds	r3, #4
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7fe fa83 	bl	800244c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d022      	beq.n	8003f9a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	699a      	ldr	r2, [r3, #24]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	18d1      	adds	r1, r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	6978      	ldr	r0, [r7, #20]
 8003f62:	f000 f8d1 	bl	8004108 <prvInsertTimerInActiveList>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d01f      	beq.n	8003fac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	9300      	str	r3, [sp, #0]
 8003f70:	2300      	movs	r3, #0
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	2100      	movs	r1, #0
 8003f76:	6978      	ldr	r0, [r7, #20]
 8003f78:	f7ff ff88 	bl	8003e8c <xTimerGenericCommand>
 8003f7c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d113      	bne.n	8003fac <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f88:	f383 8811 	msr	BASEPRI, r3
 8003f8c:	f3bf 8f6f 	isb	sy
 8003f90:	f3bf 8f4f 	dsb	sy
 8003f94:	60fb      	str	r3, [r7, #12]
}
 8003f96:	bf00      	nop
 8003f98:	e7fe      	b.n	8003f98 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fa0:	f023 0301 	bic.w	r3, r3, #1
 8003fa4:	b2da      	uxtb	r2, r3
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	6a1b      	ldr	r3, [r3, #32]
 8003fb0:	6978      	ldr	r0, [r7, #20]
 8003fb2:	4798      	blx	r3
}
 8003fb4:	bf00      	nop
 8003fb6:	3718      	adds	r7, #24
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	20000d98 	.word	0x20000d98

08003fc0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003fc8:	f107 0308 	add.w	r3, r7, #8
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 f857 	bl	8004080 <prvGetNextExpireTime>
 8003fd2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f000 f803 	bl	8003fe4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003fde:	f000 f8d5 	bl	800418c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003fe2:	e7f1      	b.n	8003fc8 <prvTimerTask+0x8>

08003fe4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003fee:	f7ff f99f 	bl	8003330 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ff2:	f107 0308 	add.w	r3, r7, #8
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 f866 	bl	80040c8 <prvSampleTimeNow>
 8003ffc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d130      	bne.n	8004066 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10a      	bne.n	8004020 <prvProcessTimerOrBlockTask+0x3c>
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	429a      	cmp	r2, r3
 8004010:	d806      	bhi.n	8004020 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004012:	f7ff f99b 	bl	800334c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004016:	68f9      	ldr	r1, [r7, #12]
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f7ff ff85 	bl	8003f28 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800401e:	e024      	b.n	800406a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d008      	beq.n	8004038 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004026:	4b13      	ldr	r3, [pc, #76]	; (8004074 <prvProcessTimerOrBlockTask+0x90>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d101      	bne.n	8004034 <prvProcessTimerOrBlockTask+0x50>
 8004030:	2301      	movs	r3, #1
 8004032:	e000      	b.n	8004036 <prvProcessTimerOrBlockTask+0x52>
 8004034:	2300      	movs	r3, #0
 8004036:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004038:	4b0f      	ldr	r3, [pc, #60]	; (8004078 <prvProcessTimerOrBlockTask+0x94>)
 800403a:	6818      	ldr	r0, [r3, #0]
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	4619      	mov	r1, r3
 8004046:	f7fe fee3 	bl	8002e10 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800404a:	f7ff f97f 	bl	800334c <xTaskResumeAll>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10a      	bne.n	800406a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004054:	4b09      	ldr	r3, [pc, #36]	; (800407c <prvProcessTimerOrBlockTask+0x98>)
 8004056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800405a:	601a      	str	r2, [r3, #0]
 800405c:	f3bf 8f4f 	dsb	sy
 8004060:	f3bf 8f6f 	isb	sy
}
 8004064:	e001      	b.n	800406a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004066:	f7ff f971 	bl	800334c <xTaskResumeAll>
}
 800406a:	bf00      	nop
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	20000d9c 	.word	0x20000d9c
 8004078:	20000da0 	.word	0x20000da0
 800407c:	e000ed04 	.word	0xe000ed04

08004080 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004088:	4b0e      	ldr	r3, [pc, #56]	; (80040c4 <prvGetNextExpireTime+0x44>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <prvGetNextExpireTime+0x16>
 8004092:	2201      	movs	r2, #1
 8004094:	e000      	b.n	8004098 <prvGetNextExpireTime+0x18>
 8004096:	2200      	movs	r2, #0
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d105      	bne.n	80040b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040a4:	4b07      	ldr	r3, [pc, #28]	; (80040c4 <prvGetNextExpireTime+0x44>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	60fb      	str	r3, [r7, #12]
 80040ae:	e001      	b.n	80040b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80040b0:	2300      	movs	r3, #0
 80040b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80040b4:	68fb      	ldr	r3, [r7, #12]
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3714      	adds	r7, #20
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	20000d98 	.word	0x20000d98

080040c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80040d0:	f7ff f9da 	bl	8003488 <xTaskGetTickCount>
 80040d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80040d6:	4b0b      	ldr	r3, [pc, #44]	; (8004104 <prvSampleTimeNow+0x3c>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d205      	bcs.n	80040ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80040e0:	f000 f936 	bl	8004350 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	e002      	b.n	80040f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80040f2:	4a04      	ldr	r2, [pc, #16]	; (8004104 <prvSampleTimeNow+0x3c>)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80040f8:	68fb      	ldr	r3, [r7, #12]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	20000da8 	.word	0x20000da8

08004108 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
 8004114:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004116:	2300      	movs	r3, #0
 8004118:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	68ba      	ldr	r2, [r7, #8]
 800411e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	429a      	cmp	r2, r3
 800412c:	d812      	bhi.n	8004154 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	1ad2      	subs	r2, r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	429a      	cmp	r2, r3
 800413a:	d302      	bcc.n	8004142 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800413c:	2301      	movs	r3, #1
 800413e:	617b      	str	r3, [r7, #20]
 8004140:	e01b      	b.n	800417a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004142:	4b10      	ldr	r3, [pc, #64]	; (8004184 <prvInsertTimerInActiveList+0x7c>)
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	3304      	adds	r3, #4
 800414a:	4619      	mov	r1, r3
 800414c:	4610      	mov	r0, r2
 800414e:	f7fe f944 	bl	80023da <vListInsert>
 8004152:	e012      	b.n	800417a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	429a      	cmp	r2, r3
 800415a:	d206      	bcs.n	800416a <prvInsertTimerInActiveList+0x62>
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	429a      	cmp	r2, r3
 8004162:	d302      	bcc.n	800416a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004164:	2301      	movs	r3, #1
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	e007      	b.n	800417a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800416a:	4b07      	ldr	r3, [pc, #28]	; (8004188 <prvInsertTimerInActiveList+0x80>)
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	3304      	adds	r3, #4
 8004172:	4619      	mov	r1, r3
 8004174:	4610      	mov	r0, r2
 8004176:	f7fe f930 	bl	80023da <vListInsert>
		}
	}

	return xProcessTimerNow;
 800417a:	697b      	ldr	r3, [r7, #20]
}
 800417c:	4618      	mov	r0, r3
 800417e:	3718      	adds	r7, #24
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	20000d9c 	.word	0x20000d9c
 8004188:	20000d98 	.word	0x20000d98

0800418c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b08e      	sub	sp, #56	; 0x38
 8004190:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004192:	e0ca      	b.n	800432a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	da18      	bge.n	80041cc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800419a:	1d3b      	adds	r3, r7, #4
 800419c:	3304      	adds	r3, #4
 800419e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80041a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10a      	bne.n	80041bc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80041a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041aa:	f383 8811 	msr	BASEPRI, r3
 80041ae:	f3bf 8f6f 	isb	sy
 80041b2:	f3bf 8f4f 	dsb	sy
 80041b6:	61fb      	str	r3, [r7, #28]
}
 80041b8:	bf00      	nop
 80041ba:	e7fe      	b.n	80041ba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80041bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041c2:	6850      	ldr	r0, [r2, #4]
 80041c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041c6:	6892      	ldr	r2, [r2, #8]
 80041c8:	4611      	mov	r1, r2
 80041ca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f2c0 80ab 	blt.w	800432a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80041d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d004      	beq.n	80041ea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e2:	3304      	adds	r3, #4
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7fe f931 	bl	800244c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80041ea:	463b      	mov	r3, r7
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7ff ff6b 	bl	80040c8 <prvSampleTimeNow>
 80041f2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b09      	cmp	r3, #9
 80041f8:	f200 8096 	bhi.w	8004328 <prvProcessReceivedCommands+0x19c>
 80041fc:	a201      	add	r2, pc, #4	; (adr r2, 8004204 <prvProcessReceivedCommands+0x78>)
 80041fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004202:	bf00      	nop
 8004204:	0800422d 	.word	0x0800422d
 8004208:	0800422d 	.word	0x0800422d
 800420c:	0800422d 	.word	0x0800422d
 8004210:	080042a1 	.word	0x080042a1
 8004214:	080042b5 	.word	0x080042b5
 8004218:	080042ff 	.word	0x080042ff
 800421c:	0800422d 	.word	0x0800422d
 8004220:	0800422d 	.word	0x0800422d
 8004224:	080042a1 	.word	0x080042a1
 8004228:	080042b5 	.word	0x080042b5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800422c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004232:	f043 0301 	orr.w	r3, r3, #1
 8004236:	b2da      	uxtb	r2, r3
 8004238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	18d1      	adds	r1, r2, r3
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800424a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800424c:	f7ff ff5c 	bl	8004108 <prvInsertTimerInActiveList>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d069      	beq.n	800432a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800425c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800425e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004260:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004264:	f003 0304 	and.w	r3, r3, #4
 8004268:	2b00      	cmp	r3, #0
 800426a:	d05e      	beq.n	800432a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	441a      	add	r2, r3
 8004274:	2300      	movs	r3, #0
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	2300      	movs	r3, #0
 800427a:	2100      	movs	r1, #0
 800427c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800427e:	f7ff fe05 	bl	8003e8c <xTimerGenericCommand>
 8004282:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004284:	6a3b      	ldr	r3, [r7, #32]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d14f      	bne.n	800432a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800428a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428e:	f383 8811 	msr	BASEPRI, r3
 8004292:	f3bf 8f6f 	isb	sy
 8004296:	f3bf 8f4f 	dsb	sy
 800429a:	61bb      	str	r3, [r7, #24]
}
 800429c:	bf00      	nop
 800429e:	e7fe      	b.n	800429e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80042a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042a6:	f023 0301 	bic.w	r3, r3, #1
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80042b2:	e03a      	b.n	800432a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80042b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042ba:	f043 0301 	orr.w	r3, r3, #1
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80042cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10a      	bne.n	80042ea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80042d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d8:	f383 8811 	msr	BASEPRI, r3
 80042dc:	f3bf 8f6f 	isb	sy
 80042e0:	f3bf 8f4f 	dsb	sy
 80042e4:	617b      	str	r3, [r7, #20]
}
 80042e6:	bf00      	nop
 80042e8:	e7fe      	b.n	80042e8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80042ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ec:	699a      	ldr	r2, [r3, #24]
 80042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f0:	18d1      	adds	r1, r2, r3
 80042f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042f8:	f7ff ff06 	bl	8004108 <prvInsertTimerInActiveList>
					break;
 80042fc:	e015      	b.n	800432a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80042fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004300:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004304:	f003 0302 	and.w	r3, r3, #2
 8004308:	2b00      	cmp	r3, #0
 800430a:	d103      	bne.n	8004314 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800430c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800430e:	f000 fbff 	bl	8004b10 <vPortFree>
 8004312:	e00a      	b.n	800432a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004316:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800431a:	f023 0301 	bic.w	r3, r3, #1
 800431e:	b2da      	uxtb	r2, r3
 8004320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004322:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004326:	e000      	b.n	800432a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004328:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800432a:	4b08      	ldr	r3, [pc, #32]	; (800434c <prvProcessReceivedCommands+0x1c0>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	1d39      	adds	r1, r7, #4
 8004330:	2200      	movs	r2, #0
 8004332:	4618      	mov	r0, r3
 8004334:	f7fe fb52 	bl	80029dc <xQueueReceive>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	f47f af2a 	bne.w	8004194 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004340:	bf00      	nop
 8004342:	bf00      	nop
 8004344:	3730      	adds	r7, #48	; 0x30
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	20000da0 	.word	0x20000da0

08004350 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b088      	sub	sp, #32
 8004354:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004356:	e048      	b.n	80043ea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004358:	4b2d      	ldr	r3, [pc, #180]	; (8004410 <prvSwitchTimerLists+0xc0>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004362:	4b2b      	ldr	r3, [pc, #172]	; (8004410 <prvSwitchTimerLists+0xc0>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	3304      	adds	r3, #4
 8004370:	4618      	mov	r0, r3
 8004372:	f7fe f86b 	bl	800244c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004384:	f003 0304 	and.w	r3, r3, #4
 8004388:	2b00      	cmp	r3, #0
 800438a:	d02e      	beq.n	80043ea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	4413      	add	r3, r2
 8004394:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	429a      	cmp	r2, r3
 800439c:	d90e      	bls.n	80043bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80043aa:	4b19      	ldr	r3, [pc, #100]	; (8004410 <prvSwitchTimerLists+0xc0>)
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	3304      	adds	r3, #4
 80043b2:	4619      	mov	r1, r3
 80043b4:	4610      	mov	r0, r2
 80043b6:	f7fe f810 	bl	80023da <vListInsert>
 80043ba:	e016      	b.n	80043ea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80043bc:	2300      	movs	r3, #0
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	2300      	movs	r3, #0
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	2100      	movs	r1, #0
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f7ff fd60 	bl	8003e8c <xTimerGenericCommand>
 80043cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10a      	bne.n	80043ea <prvSwitchTimerLists+0x9a>
	__asm volatile
 80043d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d8:	f383 8811 	msr	BASEPRI, r3
 80043dc:	f3bf 8f6f 	isb	sy
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	603b      	str	r3, [r7, #0]
}
 80043e6:	bf00      	nop
 80043e8:	e7fe      	b.n	80043e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80043ea:	4b09      	ldr	r3, [pc, #36]	; (8004410 <prvSwitchTimerLists+0xc0>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1b1      	bne.n	8004358 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80043f4:	4b06      	ldr	r3, [pc, #24]	; (8004410 <prvSwitchTimerLists+0xc0>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80043fa:	4b06      	ldr	r3, [pc, #24]	; (8004414 <prvSwitchTimerLists+0xc4>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a04      	ldr	r2, [pc, #16]	; (8004410 <prvSwitchTimerLists+0xc0>)
 8004400:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004402:	4a04      	ldr	r2, [pc, #16]	; (8004414 <prvSwitchTimerLists+0xc4>)
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	6013      	str	r3, [r2, #0]
}
 8004408:	bf00      	nop
 800440a:	3718      	adds	r7, #24
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	20000d98 	.word	0x20000d98
 8004414:	20000d9c 	.word	0x20000d9c

08004418 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800441e:	f000 f989 	bl	8004734 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004422:	4b15      	ldr	r3, [pc, #84]	; (8004478 <prvCheckForValidListAndQueue+0x60>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d120      	bne.n	800446c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800442a:	4814      	ldr	r0, [pc, #80]	; (800447c <prvCheckForValidListAndQueue+0x64>)
 800442c:	f7fd ff84 	bl	8002338 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004430:	4813      	ldr	r0, [pc, #76]	; (8004480 <prvCheckForValidListAndQueue+0x68>)
 8004432:	f7fd ff81 	bl	8002338 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004436:	4b13      	ldr	r3, [pc, #76]	; (8004484 <prvCheckForValidListAndQueue+0x6c>)
 8004438:	4a10      	ldr	r2, [pc, #64]	; (800447c <prvCheckForValidListAndQueue+0x64>)
 800443a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800443c:	4b12      	ldr	r3, [pc, #72]	; (8004488 <prvCheckForValidListAndQueue+0x70>)
 800443e:	4a10      	ldr	r2, [pc, #64]	; (8004480 <prvCheckForValidListAndQueue+0x68>)
 8004440:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004442:	2300      	movs	r3, #0
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	4b11      	ldr	r3, [pc, #68]	; (800448c <prvCheckForValidListAndQueue+0x74>)
 8004448:	4a11      	ldr	r2, [pc, #68]	; (8004490 <prvCheckForValidListAndQueue+0x78>)
 800444a:	2110      	movs	r1, #16
 800444c:	200a      	movs	r0, #10
 800444e:	f7fe f88f 	bl	8002570 <xQueueGenericCreateStatic>
 8004452:	4603      	mov	r3, r0
 8004454:	4a08      	ldr	r2, [pc, #32]	; (8004478 <prvCheckForValidListAndQueue+0x60>)
 8004456:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004458:	4b07      	ldr	r3, [pc, #28]	; (8004478 <prvCheckForValidListAndQueue+0x60>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d005      	beq.n	800446c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004460:	4b05      	ldr	r3, [pc, #20]	; (8004478 <prvCheckForValidListAndQueue+0x60>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	490b      	ldr	r1, [pc, #44]	; (8004494 <prvCheckForValidListAndQueue+0x7c>)
 8004466:	4618      	mov	r0, r3
 8004468:	f7fe fca8 	bl	8002dbc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800446c:	f000 f992 	bl	8004794 <vPortExitCritical>
}
 8004470:	bf00      	nop
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	20000da0 	.word	0x20000da0
 800447c:	20000d70 	.word	0x20000d70
 8004480:	20000d84 	.word	0x20000d84
 8004484:	20000d98 	.word	0x20000d98
 8004488:	20000d9c 	.word	0x20000d9c
 800448c:	20000e4c 	.word	0x20000e4c
 8004490:	20000dac 	.word	0x20000dac
 8004494:	08004f80 	.word	0x08004f80

08004498 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b086      	sub	sp, #24
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10a      	bne.n	80044c0 <pvTimerGetTimerID+0x28>
	__asm volatile
 80044aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ae:	f383 8811 	msr	BASEPRI, r3
 80044b2:	f3bf 8f6f 	isb	sy
 80044b6:	f3bf 8f4f 	dsb	sy
 80044ba:	60fb      	str	r3, [r7, #12]
}
 80044bc:	bf00      	nop
 80044be:	e7fe      	b.n	80044be <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80044c0:	f000 f938 	bl	8004734 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	69db      	ldr	r3, [r3, #28]
 80044c8:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80044ca:	f000 f963 	bl	8004794 <vPortExitCritical>

	return pvReturn;
 80044ce:	693b      	ldr	r3, [r7, #16]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3718      	adds	r7, #24
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	3b04      	subs	r3, #4
 80044e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	3b04      	subs	r3, #4
 80044f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f023 0201 	bic.w	r2, r3, #1
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	3b04      	subs	r3, #4
 8004506:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004508:	4a0c      	ldr	r2, [pc, #48]	; (800453c <pxPortInitialiseStack+0x64>)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	3b14      	subs	r3, #20
 8004512:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	3b04      	subs	r3, #4
 800451e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f06f 0202 	mvn.w	r2, #2
 8004526:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	3b20      	subs	r3, #32
 800452c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800452e:	68fb      	ldr	r3, [r7, #12]
}
 8004530:	4618      	mov	r0, r3
 8004532:	3714      	adds	r7, #20
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	08004541 	.word	0x08004541

08004540 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004546:	2300      	movs	r3, #0
 8004548:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800454a:	4b12      	ldr	r3, [pc, #72]	; (8004594 <prvTaskExitError+0x54>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004552:	d00a      	beq.n	800456a <prvTaskExitError+0x2a>
	__asm volatile
 8004554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004558:	f383 8811 	msr	BASEPRI, r3
 800455c:	f3bf 8f6f 	isb	sy
 8004560:	f3bf 8f4f 	dsb	sy
 8004564:	60fb      	str	r3, [r7, #12]
}
 8004566:	bf00      	nop
 8004568:	e7fe      	b.n	8004568 <prvTaskExitError+0x28>
	__asm volatile
 800456a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456e:	f383 8811 	msr	BASEPRI, r3
 8004572:	f3bf 8f6f 	isb	sy
 8004576:	f3bf 8f4f 	dsb	sy
 800457a:	60bb      	str	r3, [r7, #8]
}
 800457c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800457e:	bf00      	nop
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d0fc      	beq.n	8004580 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004586:	bf00      	nop
 8004588:	bf00      	nop
 800458a:	3714      	adds	r7, #20
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	2000000c 	.word	0x2000000c
	...

080045a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80045a0:	4b07      	ldr	r3, [pc, #28]	; (80045c0 <pxCurrentTCBConst2>)
 80045a2:	6819      	ldr	r1, [r3, #0]
 80045a4:	6808      	ldr	r0, [r1, #0]
 80045a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045aa:	f380 8809 	msr	PSP, r0
 80045ae:	f3bf 8f6f 	isb	sy
 80045b2:	f04f 0000 	mov.w	r0, #0
 80045b6:	f380 8811 	msr	BASEPRI, r0
 80045ba:	4770      	bx	lr
 80045bc:	f3af 8000 	nop.w

080045c0 <pxCurrentTCBConst2>:
 80045c0:	20000870 	.word	0x20000870
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80045c4:	bf00      	nop
 80045c6:	bf00      	nop

080045c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80045c8:	4808      	ldr	r0, [pc, #32]	; (80045ec <prvPortStartFirstTask+0x24>)
 80045ca:	6800      	ldr	r0, [r0, #0]
 80045cc:	6800      	ldr	r0, [r0, #0]
 80045ce:	f380 8808 	msr	MSP, r0
 80045d2:	f04f 0000 	mov.w	r0, #0
 80045d6:	f380 8814 	msr	CONTROL, r0
 80045da:	b662      	cpsie	i
 80045dc:	b661      	cpsie	f
 80045de:	f3bf 8f4f 	dsb	sy
 80045e2:	f3bf 8f6f 	isb	sy
 80045e6:	df00      	svc	0
 80045e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80045ea:	bf00      	nop
 80045ec:	e000ed08 	.word	0xe000ed08

080045f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80045f6:	4b46      	ldr	r3, [pc, #280]	; (8004710 <xPortStartScheduler+0x120>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a46      	ldr	r2, [pc, #280]	; (8004714 <xPortStartScheduler+0x124>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d10a      	bne.n	8004616 <xPortStartScheduler+0x26>
	__asm volatile
 8004600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004604:	f383 8811 	msr	BASEPRI, r3
 8004608:	f3bf 8f6f 	isb	sy
 800460c:	f3bf 8f4f 	dsb	sy
 8004610:	613b      	str	r3, [r7, #16]
}
 8004612:	bf00      	nop
 8004614:	e7fe      	b.n	8004614 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004616:	4b3e      	ldr	r3, [pc, #248]	; (8004710 <xPortStartScheduler+0x120>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a3f      	ldr	r2, [pc, #252]	; (8004718 <xPortStartScheduler+0x128>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d10a      	bne.n	8004636 <xPortStartScheduler+0x46>
	__asm volatile
 8004620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004624:	f383 8811 	msr	BASEPRI, r3
 8004628:	f3bf 8f6f 	isb	sy
 800462c:	f3bf 8f4f 	dsb	sy
 8004630:	60fb      	str	r3, [r7, #12]
}
 8004632:	bf00      	nop
 8004634:	e7fe      	b.n	8004634 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004636:	4b39      	ldr	r3, [pc, #228]	; (800471c <xPortStartScheduler+0x12c>)
 8004638:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	b2db      	uxtb	r3, r3
 8004640:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	22ff      	movs	r2, #255	; 0xff
 8004646:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	b2db      	uxtb	r3, r3
 800464e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004650:	78fb      	ldrb	r3, [r7, #3]
 8004652:	b2db      	uxtb	r3, r3
 8004654:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004658:	b2da      	uxtb	r2, r3
 800465a:	4b31      	ldr	r3, [pc, #196]	; (8004720 <xPortStartScheduler+0x130>)
 800465c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800465e:	4b31      	ldr	r3, [pc, #196]	; (8004724 <xPortStartScheduler+0x134>)
 8004660:	2207      	movs	r2, #7
 8004662:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004664:	e009      	b.n	800467a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004666:	4b2f      	ldr	r3, [pc, #188]	; (8004724 <xPortStartScheduler+0x134>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	3b01      	subs	r3, #1
 800466c:	4a2d      	ldr	r2, [pc, #180]	; (8004724 <xPortStartScheduler+0x134>)
 800466e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004670:	78fb      	ldrb	r3, [r7, #3]
 8004672:	b2db      	uxtb	r3, r3
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	b2db      	uxtb	r3, r3
 8004678:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800467a:	78fb      	ldrb	r3, [r7, #3]
 800467c:	b2db      	uxtb	r3, r3
 800467e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004682:	2b80      	cmp	r3, #128	; 0x80
 8004684:	d0ef      	beq.n	8004666 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004686:	4b27      	ldr	r3, [pc, #156]	; (8004724 <xPortStartScheduler+0x134>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f1c3 0307 	rsb	r3, r3, #7
 800468e:	2b04      	cmp	r3, #4
 8004690:	d00a      	beq.n	80046a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004696:	f383 8811 	msr	BASEPRI, r3
 800469a:	f3bf 8f6f 	isb	sy
 800469e:	f3bf 8f4f 	dsb	sy
 80046a2:	60bb      	str	r3, [r7, #8]
}
 80046a4:	bf00      	nop
 80046a6:	e7fe      	b.n	80046a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80046a8:	4b1e      	ldr	r3, [pc, #120]	; (8004724 <xPortStartScheduler+0x134>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	021b      	lsls	r3, r3, #8
 80046ae:	4a1d      	ldr	r2, [pc, #116]	; (8004724 <xPortStartScheduler+0x134>)
 80046b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80046b2:	4b1c      	ldr	r3, [pc, #112]	; (8004724 <xPortStartScheduler+0x134>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046ba:	4a1a      	ldr	r2, [pc, #104]	; (8004724 <xPortStartScheduler+0x134>)
 80046bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80046c6:	4b18      	ldr	r3, [pc, #96]	; (8004728 <xPortStartScheduler+0x138>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a17      	ldr	r2, [pc, #92]	; (8004728 <xPortStartScheduler+0x138>)
 80046cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80046d2:	4b15      	ldr	r3, [pc, #84]	; (8004728 <xPortStartScheduler+0x138>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a14      	ldr	r2, [pc, #80]	; (8004728 <xPortStartScheduler+0x138>)
 80046d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80046dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80046de:	f000 f8dd 	bl	800489c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80046e2:	4b12      	ldr	r3, [pc, #72]	; (800472c <xPortStartScheduler+0x13c>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80046e8:	f000 f8fc 	bl	80048e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80046ec:	4b10      	ldr	r3, [pc, #64]	; (8004730 <xPortStartScheduler+0x140>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a0f      	ldr	r2, [pc, #60]	; (8004730 <xPortStartScheduler+0x140>)
 80046f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80046f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80046f8:	f7ff ff66 	bl	80045c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80046fc:	f7fe ff8e 	bl	800361c <vTaskSwitchContext>
	prvTaskExitError();
 8004700:	f7ff ff1e 	bl	8004540 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3718      	adds	r7, #24
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	e000ed00 	.word	0xe000ed00
 8004714:	410fc271 	.word	0x410fc271
 8004718:	410fc270 	.word	0x410fc270
 800471c:	e000e400 	.word	0xe000e400
 8004720:	20000e9c 	.word	0x20000e9c
 8004724:	20000ea0 	.word	0x20000ea0
 8004728:	e000ed20 	.word	0xe000ed20
 800472c:	2000000c 	.word	0x2000000c
 8004730:	e000ef34 	.word	0xe000ef34

08004734 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
	__asm volatile
 800473a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473e:	f383 8811 	msr	BASEPRI, r3
 8004742:	f3bf 8f6f 	isb	sy
 8004746:	f3bf 8f4f 	dsb	sy
 800474a:	607b      	str	r3, [r7, #4]
}
 800474c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800474e:	4b0f      	ldr	r3, [pc, #60]	; (800478c <vPortEnterCritical+0x58>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	3301      	adds	r3, #1
 8004754:	4a0d      	ldr	r2, [pc, #52]	; (800478c <vPortEnterCritical+0x58>)
 8004756:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004758:	4b0c      	ldr	r3, [pc, #48]	; (800478c <vPortEnterCritical+0x58>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d10f      	bne.n	8004780 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004760:	4b0b      	ldr	r3, [pc, #44]	; (8004790 <vPortEnterCritical+0x5c>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00a      	beq.n	8004780 <vPortEnterCritical+0x4c>
	__asm volatile
 800476a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476e:	f383 8811 	msr	BASEPRI, r3
 8004772:	f3bf 8f6f 	isb	sy
 8004776:	f3bf 8f4f 	dsb	sy
 800477a:	603b      	str	r3, [r7, #0]
}
 800477c:	bf00      	nop
 800477e:	e7fe      	b.n	800477e <vPortEnterCritical+0x4a>
	}
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr
 800478c:	2000000c 	.word	0x2000000c
 8004790:	e000ed04 	.word	0xe000ed04

08004794 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800479a:	4b12      	ldr	r3, [pc, #72]	; (80047e4 <vPortExitCritical+0x50>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10a      	bne.n	80047b8 <vPortExitCritical+0x24>
	__asm volatile
 80047a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a6:	f383 8811 	msr	BASEPRI, r3
 80047aa:	f3bf 8f6f 	isb	sy
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	607b      	str	r3, [r7, #4]
}
 80047b4:	bf00      	nop
 80047b6:	e7fe      	b.n	80047b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80047b8:	4b0a      	ldr	r3, [pc, #40]	; (80047e4 <vPortExitCritical+0x50>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	3b01      	subs	r3, #1
 80047be:	4a09      	ldr	r2, [pc, #36]	; (80047e4 <vPortExitCritical+0x50>)
 80047c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80047c2:	4b08      	ldr	r3, [pc, #32]	; (80047e4 <vPortExitCritical+0x50>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d105      	bne.n	80047d6 <vPortExitCritical+0x42>
 80047ca:	2300      	movs	r3, #0
 80047cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	f383 8811 	msr	BASEPRI, r3
}
 80047d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80047d6:	bf00      	nop
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	2000000c 	.word	0x2000000c
	...

080047f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80047f0:	f3ef 8009 	mrs	r0, PSP
 80047f4:	f3bf 8f6f 	isb	sy
 80047f8:	4b15      	ldr	r3, [pc, #84]	; (8004850 <pxCurrentTCBConst>)
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	f01e 0f10 	tst.w	lr, #16
 8004800:	bf08      	it	eq
 8004802:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004806:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800480a:	6010      	str	r0, [r2, #0]
 800480c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004810:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004814:	f380 8811 	msr	BASEPRI, r0
 8004818:	f3bf 8f4f 	dsb	sy
 800481c:	f3bf 8f6f 	isb	sy
 8004820:	f7fe fefc 	bl	800361c <vTaskSwitchContext>
 8004824:	f04f 0000 	mov.w	r0, #0
 8004828:	f380 8811 	msr	BASEPRI, r0
 800482c:	bc09      	pop	{r0, r3}
 800482e:	6819      	ldr	r1, [r3, #0]
 8004830:	6808      	ldr	r0, [r1, #0]
 8004832:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004836:	f01e 0f10 	tst.w	lr, #16
 800483a:	bf08      	it	eq
 800483c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004840:	f380 8809 	msr	PSP, r0
 8004844:	f3bf 8f6f 	isb	sy
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	f3af 8000 	nop.w

08004850 <pxCurrentTCBConst>:
 8004850:	20000870 	.word	0x20000870
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004854:	bf00      	nop
 8004856:	bf00      	nop

08004858 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
	__asm volatile
 800485e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004862:	f383 8811 	msr	BASEPRI, r3
 8004866:	f3bf 8f6f 	isb	sy
 800486a:	f3bf 8f4f 	dsb	sy
 800486e:	607b      	str	r3, [r7, #4]
}
 8004870:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004872:	f7fe fe19 	bl	80034a8 <xTaskIncrementTick>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d003      	beq.n	8004884 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800487c:	4b06      	ldr	r3, [pc, #24]	; (8004898 <xPortSysTickHandler+0x40>)
 800487e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004882:	601a      	str	r2, [r3, #0]
 8004884:	2300      	movs	r3, #0
 8004886:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	f383 8811 	msr	BASEPRI, r3
}
 800488e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004890:	bf00      	nop
 8004892:	3708      	adds	r7, #8
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	e000ed04 	.word	0xe000ed04

0800489c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800489c:	b480      	push	{r7}
 800489e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80048a0:	4b0b      	ldr	r3, [pc, #44]	; (80048d0 <vPortSetupTimerInterrupt+0x34>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80048a6:	4b0b      	ldr	r3, [pc, #44]	; (80048d4 <vPortSetupTimerInterrupt+0x38>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80048ac:	4b0a      	ldr	r3, [pc, #40]	; (80048d8 <vPortSetupTimerInterrupt+0x3c>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a0a      	ldr	r2, [pc, #40]	; (80048dc <vPortSetupTimerInterrupt+0x40>)
 80048b2:	fba2 2303 	umull	r2, r3, r2, r3
 80048b6:	099b      	lsrs	r3, r3, #6
 80048b8:	4a09      	ldr	r2, [pc, #36]	; (80048e0 <vPortSetupTimerInterrupt+0x44>)
 80048ba:	3b01      	subs	r3, #1
 80048bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80048be:	4b04      	ldr	r3, [pc, #16]	; (80048d0 <vPortSetupTimerInterrupt+0x34>)
 80048c0:	2207      	movs	r2, #7
 80048c2:	601a      	str	r2, [r3, #0]
}
 80048c4:	bf00      	nop
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	e000e010 	.word	0xe000e010
 80048d4:	e000e018 	.word	0xe000e018
 80048d8:	20000000 	.word	0x20000000
 80048dc:	10624dd3 	.word	0x10624dd3
 80048e0:	e000e014 	.word	0xe000e014

080048e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80048e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80048f4 <vPortEnableVFP+0x10>
 80048e8:	6801      	ldr	r1, [r0, #0]
 80048ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80048ee:	6001      	str	r1, [r0, #0]
 80048f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80048f2:	bf00      	nop
 80048f4:	e000ed88 	.word	0xe000ed88

080048f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80048fe:	f3ef 8305 	mrs	r3, IPSR
 8004902:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2b0f      	cmp	r3, #15
 8004908:	d914      	bls.n	8004934 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800490a:	4a17      	ldr	r2, [pc, #92]	; (8004968 <vPortValidateInterruptPriority+0x70>)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4413      	add	r3, r2
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004914:	4b15      	ldr	r3, [pc, #84]	; (800496c <vPortValidateInterruptPriority+0x74>)
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	7afa      	ldrb	r2, [r7, #11]
 800491a:	429a      	cmp	r2, r3
 800491c:	d20a      	bcs.n	8004934 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800491e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004922:	f383 8811 	msr	BASEPRI, r3
 8004926:	f3bf 8f6f 	isb	sy
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	607b      	str	r3, [r7, #4]
}
 8004930:	bf00      	nop
 8004932:	e7fe      	b.n	8004932 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004934:	4b0e      	ldr	r3, [pc, #56]	; (8004970 <vPortValidateInterruptPriority+0x78>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800493c:	4b0d      	ldr	r3, [pc, #52]	; (8004974 <vPortValidateInterruptPriority+0x7c>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	429a      	cmp	r2, r3
 8004942:	d90a      	bls.n	800495a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004948:	f383 8811 	msr	BASEPRI, r3
 800494c:	f3bf 8f6f 	isb	sy
 8004950:	f3bf 8f4f 	dsb	sy
 8004954:	603b      	str	r3, [r7, #0]
}
 8004956:	bf00      	nop
 8004958:	e7fe      	b.n	8004958 <vPortValidateInterruptPriority+0x60>
	}
 800495a:	bf00      	nop
 800495c:	3714      	adds	r7, #20
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	e000e3f0 	.word	0xe000e3f0
 800496c:	20000e9c 	.word	0x20000e9c
 8004970:	e000ed0c 	.word	0xe000ed0c
 8004974:	20000ea0 	.word	0x20000ea0

08004978 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b08a      	sub	sp, #40	; 0x28
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004980:	2300      	movs	r3, #0
 8004982:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004984:	f7fe fcd4 	bl	8003330 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004988:	4b5b      	ldr	r3, [pc, #364]	; (8004af8 <pvPortMalloc+0x180>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d101      	bne.n	8004994 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004990:	f000 f920 	bl	8004bd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004994:	4b59      	ldr	r3, [pc, #356]	; (8004afc <pvPortMalloc+0x184>)
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4013      	ands	r3, r2
 800499c:	2b00      	cmp	r3, #0
 800499e:	f040 8093 	bne.w	8004ac8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d01d      	beq.n	80049e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80049a8:	2208      	movs	r2, #8
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4413      	add	r3, r2
 80049ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f003 0307 	and.w	r3, r3, #7
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d014      	beq.n	80049e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f023 0307 	bic.w	r3, r3, #7
 80049c0:	3308      	adds	r3, #8
 80049c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f003 0307 	and.w	r3, r3, #7
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00a      	beq.n	80049e4 <pvPortMalloc+0x6c>
	__asm volatile
 80049ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d2:	f383 8811 	msr	BASEPRI, r3
 80049d6:	f3bf 8f6f 	isb	sy
 80049da:	f3bf 8f4f 	dsb	sy
 80049de:	617b      	str	r3, [r7, #20]
}
 80049e0:	bf00      	nop
 80049e2:	e7fe      	b.n	80049e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d06e      	beq.n	8004ac8 <pvPortMalloc+0x150>
 80049ea:	4b45      	ldr	r3, [pc, #276]	; (8004b00 <pvPortMalloc+0x188>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d869      	bhi.n	8004ac8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80049f4:	4b43      	ldr	r3, [pc, #268]	; (8004b04 <pvPortMalloc+0x18c>)
 80049f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80049f8:	4b42      	ldr	r3, [pc, #264]	; (8004b04 <pvPortMalloc+0x18c>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049fe:	e004      	b.n	8004a0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d903      	bls.n	8004a1c <pvPortMalloc+0xa4>
 8004a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1f1      	bne.n	8004a00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004a1c:	4b36      	ldr	r3, [pc, #216]	; (8004af8 <pvPortMalloc+0x180>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d050      	beq.n	8004ac8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004a26:	6a3b      	ldr	r3, [r7, #32]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2208      	movs	r2, #8
 8004a2c:	4413      	add	r3, r2
 8004a2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	6a3b      	ldr	r3, [r7, #32]
 8004a36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	1ad2      	subs	r2, r2, r3
 8004a40:	2308      	movs	r3, #8
 8004a42:	005b      	lsls	r3, r3, #1
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d91f      	bls.n	8004a88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	f003 0307 	and.w	r3, r3, #7
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00a      	beq.n	8004a70 <pvPortMalloc+0xf8>
	__asm volatile
 8004a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5e:	f383 8811 	msr	BASEPRI, r3
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	f3bf 8f4f 	dsb	sy
 8004a6a:	613b      	str	r3, [r7, #16]
}
 8004a6c:	bf00      	nop
 8004a6e:	e7fe      	b.n	8004a6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	1ad2      	subs	r2, r2, r3
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a82:	69b8      	ldr	r0, [r7, #24]
 8004a84:	f000 f908 	bl	8004c98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a88:	4b1d      	ldr	r3, [pc, #116]	; (8004b00 <pvPortMalloc+0x188>)
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	4a1b      	ldr	r2, [pc, #108]	; (8004b00 <pvPortMalloc+0x188>)
 8004a94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a96:	4b1a      	ldr	r3, [pc, #104]	; (8004b00 <pvPortMalloc+0x188>)
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	4b1b      	ldr	r3, [pc, #108]	; (8004b08 <pvPortMalloc+0x190>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d203      	bcs.n	8004aaa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004aa2:	4b17      	ldr	r3, [pc, #92]	; (8004b00 <pvPortMalloc+0x188>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a18      	ldr	r2, [pc, #96]	; (8004b08 <pvPortMalloc+0x190>)
 8004aa8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	4b13      	ldr	r3, [pc, #76]	; (8004afc <pvPortMalloc+0x184>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aba:	2200      	movs	r2, #0
 8004abc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004abe:	4b13      	ldr	r3, [pc, #76]	; (8004b0c <pvPortMalloc+0x194>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	4a11      	ldr	r2, [pc, #68]	; (8004b0c <pvPortMalloc+0x194>)
 8004ac6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004ac8:	f7fe fc40 	bl	800334c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	f003 0307 	and.w	r3, r3, #7
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00a      	beq.n	8004aec <pvPortMalloc+0x174>
	__asm volatile
 8004ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ada:	f383 8811 	msr	BASEPRI, r3
 8004ade:	f3bf 8f6f 	isb	sy
 8004ae2:	f3bf 8f4f 	dsb	sy
 8004ae6:	60fb      	str	r3, [r7, #12]
}
 8004ae8:	bf00      	nop
 8004aea:	e7fe      	b.n	8004aea <pvPortMalloc+0x172>
	return pvReturn;
 8004aec:	69fb      	ldr	r3, [r7, #28]
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3728      	adds	r7, #40	; 0x28
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	20004aac 	.word	0x20004aac
 8004afc:	20004ac0 	.word	0x20004ac0
 8004b00:	20004ab0 	.word	0x20004ab0
 8004b04:	20004aa4 	.word	0x20004aa4
 8004b08:	20004ab4 	.word	0x20004ab4
 8004b0c:	20004ab8 	.word	0x20004ab8

08004b10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d04d      	beq.n	8004bbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004b22:	2308      	movs	r3, #8
 8004b24:	425b      	negs	r3, r3
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	4413      	add	r3, r2
 8004b2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	685a      	ldr	r2, [r3, #4]
 8004b34:	4b24      	ldr	r3, [pc, #144]	; (8004bc8 <vPortFree+0xb8>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4013      	ands	r3, r2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10a      	bne.n	8004b54 <vPortFree+0x44>
	__asm volatile
 8004b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b42:	f383 8811 	msr	BASEPRI, r3
 8004b46:	f3bf 8f6f 	isb	sy
 8004b4a:	f3bf 8f4f 	dsb	sy
 8004b4e:	60fb      	str	r3, [r7, #12]
}
 8004b50:	bf00      	nop
 8004b52:	e7fe      	b.n	8004b52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00a      	beq.n	8004b72 <vPortFree+0x62>
	__asm volatile
 8004b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b60:	f383 8811 	msr	BASEPRI, r3
 8004b64:	f3bf 8f6f 	isb	sy
 8004b68:	f3bf 8f4f 	dsb	sy
 8004b6c:	60bb      	str	r3, [r7, #8]
}
 8004b6e:	bf00      	nop
 8004b70:	e7fe      	b.n	8004b70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	4b14      	ldr	r3, [pc, #80]	; (8004bc8 <vPortFree+0xb8>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d01e      	beq.n	8004bbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d11a      	bne.n	8004bbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	4b0e      	ldr	r3, [pc, #56]	; (8004bc8 <vPortFree+0xb8>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	43db      	mvns	r3, r3
 8004b92:	401a      	ands	r2, r3
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004b98:	f7fe fbca 	bl	8003330 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	685a      	ldr	r2, [r3, #4]
 8004ba0:	4b0a      	ldr	r3, [pc, #40]	; (8004bcc <vPortFree+0xbc>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	4a09      	ldr	r2, [pc, #36]	; (8004bcc <vPortFree+0xbc>)
 8004ba8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004baa:	6938      	ldr	r0, [r7, #16]
 8004bac:	f000 f874 	bl	8004c98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004bb0:	4b07      	ldr	r3, [pc, #28]	; (8004bd0 <vPortFree+0xc0>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	4a06      	ldr	r2, [pc, #24]	; (8004bd0 <vPortFree+0xc0>)
 8004bb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004bba:	f7fe fbc7 	bl	800334c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004bbe:	bf00      	nop
 8004bc0:	3718      	adds	r7, #24
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20004ac0 	.word	0x20004ac0
 8004bcc:	20004ab0 	.word	0x20004ab0
 8004bd0:	20004abc 	.word	0x20004abc

08004bd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004bda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004bde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004be0:	4b27      	ldr	r3, [pc, #156]	; (8004c80 <prvHeapInit+0xac>)
 8004be2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f003 0307 	and.w	r3, r3, #7
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00c      	beq.n	8004c08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	3307      	adds	r3, #7
 8004bf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f023 0307 	bic.w	r3, r3, #7
 8004bfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	4a1f      	ldr	r2, [pc, #124]	; (8004c80 <prvHeapInit+0xac>)
 8004c04:	4413      	add	r3, r2
 8004c06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c0c:	4a1d      	ldr	r2, [pc, #116]	; (8004c84 <prvHeapInit+0xb0>)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004c12:	4b1c      	ldr	r3, [pc, #112]	; (8004c84 <prvHeapInit+0xb0>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004c20:	2208      	movs	r2, #8
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	1a9b      	subs	r3, r3, r2
 8004c26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f023 0307 	bic.w	r3, r3, #7
 8004c2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	4a15      	ldr	r2, [pc, #84]	; (8004c88 <prvHeapInit+0xb4>)
 8004c34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004c36:	4b14      	ldr	r3, [pc, #80]	; (8004c88 <prvHeapInit+0xb4>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004c3e:	4b12      	ldr	r3, [pc, #72]	; (8004c88 <prvHeapInit+0xb4>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2200      	movs	r2, #0
 8004c44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	1ad2      	subs	r2, r2, r3
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004c54:	4b0c      	ldr	r3, [pc, #48]	; (8004c88 <prvHeapInit+0xb4>)
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	4a0a      	ldr	r2, [pc, #40]	; (8004c8c <prvHeapInit+0xb8>)
 8004c62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	4a09      	ldr	r2, [pc, #36]	; (8004c90 <prvHeapInit+0xbc>)
 8004c6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004c6c:	4b09      	ldr	r3, [pc, #36]	; (8004c94 <prvHeapInit+0xc0>)
 8004c6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004c72:	601a      	str	r2, [r3, #0]
}
 8004c74:	bf00      	nop
 8004c76:	3714      	adds	r7, #20
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr
 8004c80:	20000ea4 	.word	0x20000ea4
 8004c84:	20004aa4 	.word	0x20004aa4
 8004c88:	20004aac 	.word	0x20004aac
 8004c8c:	20004ab4 	.word	0x20004ab4
 8004c90:	20004ab0 	.word	0x20004ab0
 8004c94:	20004ac0 	.word	0x20004ac0

08004c98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ca0:	4b28      	ldr	r3, [pc, #160]	; (8004d44 <prvInsertBlockIntoFreeList+0xac>)
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	e002      	b.n	8004cac <prvInsertBlockIntoFreeList+0x14>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	60fb      	str	r3, [r7, #12]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d8f7      	bhi.n	8004ca6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	68ba      	ldr	r2, [r7, #8]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d108      	bne.n	8004cda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	441a      	add	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	441a      	add	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d118      	bne.n	8004d20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	4b15      	ldr	r3, [pc, #84]	; (8004d48 <prvInsertBlockIntoFreeList+0xb0>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d00d      	beq.n	8004d16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685a      	ldr	r2, [r3, #4]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	441a      	add	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	601a      	str	r2, [r3, #0]
 8004d14:	e008      	b.n	8004d28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004d16:	4b0c      	ldr	r3, [pc, #48]	; (8004d48 <prvInsertBlockIntoFreeList+0xb0>)
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	601a      	str	r2, [r3, #0]
 8004d1e:	e003      	b.n	8004d28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d002      	beq.n	8004d36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d36:	bf00      	nop
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	20004aa4 	.word	0x20004aa4
 8004d48:	20004aac 	.word	0x20004aac

08004d4c <memset>:
 8004d4c:	4402      	add	r2, r0
 8004d4e:	4603      	mov	r3, r0
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d100      	bne.n	8004d56 <memset+0xa>
 8004d54:	4770      	bx	lr
 8004d56:	f803 1b01 	strb.w	r1, [r3], #1
 8004d5a:	e7f9      	b.n	8004d50 <memset+0x4>

08004d5c <_reclaim_reent>:
 8004d5c:	4b29      	ldr	r3, [pc, #164]	; (8004e04 <_reclaim_reent+0xa8>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4283      	cmp	r3, r0
 8004d62:	b570      	push	{r4, r5, r6, lr}
 8004d64:	4604      	mov	r4, r0
 8004d66:	d04b      	beq.n	8004e00 <_reclaim_reent+0xa4>
 8004d68:	69c3      	ldr	r3, [r0, #28]
 8004d6a:	b143      	cbz	r3, 8004d7e <_reclaim_reent+0x22>
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d144      	bne.n	8004dfc <_reclaim_reent+0xa0>
 8004d72:	69e3      	ldr	r3, [r4, #28]
 8004d74:	6819      	ldr	r1, [r3, #0]
 8004d76:	b111      	cbz	r1, 8004d7e <_reclaim_reent+0x22>
 8004d78:	4620      	mov	r0, r4
 8004d7a:	f000 f879 	bl	8004e70 <_free_r>
 8004d7e:	6961      	ldr	r1, [r4, #20]
 8004d80:	b111      	cbz	r1, 8004d88 <_reclaim_reent+0x2c>
 8004d82:	4620      	mov	r0, r4
 8004d84:	f000 f874 	bl	8004e70 <_free_r>
 8004d88:	69e1      	ldr	r1, [r4, #28]
 8004d8a:	b111      	cbz	r1, 8004d92 <_reclaim_reent+0x36>
 8004d8c:	4620      	mov	r0, r4
 8004d8e:	f000 f86f 	bl	8004e70 <_free_r>
 8004d92:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004d94:	b111      	cbz	r1, 8004d9c <_reclaim_reent+0x40>
 8004d96:	4620      	mov	r0, r4
 8004d98:	f000 f86a 	bl	8004e70 <_free_r>
 8004d9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d9e:	b111      	cbz	r1, 8004da6 <_reclaim_reent+0x4a>
 8004da0:	4620      	mov	r0, r4
 8004da2:	f000 f865 	bl	8004e70 <_free_r>
 8004da6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004da8:	b111      	cbz	r1, 8004db0 <_reclaim_reent+0x54>
 8004daa:	4620      	mov	r0, r4
 8004dac:	f000 f860 	bl	8004e70 <_free_r>
 8004db0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004db2:	b111      	cbz	r1, 8004dba <_reclaim_reent+0x5e>
 8004db4:	4620      	mov	r0, r4
 8004db6:	f000 f85b 	bl	8004e70 <_free_r>
 8004dba:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004dbc:	b111      	cbz	r1, 8004dc4 <_reclaim_reent+0x68>
 8004dbe:	4620      	mov	r0, r4
 8004dc0:	f000 f856 	bl	8004e70 <_free_r>
 8004dc4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004dc6:	b111      	cbz	r1, 8004dce <_reclaim_reent+0x72>
 8004dc8:	4620      	mov	r0, r4
 8004dca:	f000 f851 	bl	8004e70 <_free_r>
 8004dce:	6a23      	ldr	r3, [r4, #32]
 8004dd0:	b1b3      	cbz	r3, 8004e00 <_reclaim_reent+0xa4>
 8004dd2:	4620      	mov	r0, r4
 8004dd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004dd8:	4718      	bx	r3
 8004dda:	5949      	ldr	r1, [r1, r5]
 8004ddc:	b941      	cbnz	r1, 8004df0 <_reclaim_reent+0x94>
 8004dde:	3504      	adds	r5, #4
 8004de0:	69e3      	ldr	r3, [r4, #28]
 8004de2:	2d80      	cmp	r5, #128	; 0x80
 8004de4:	68d9      	ldr	r1, [r3, #12]
 8004de6:	d1f8      	bne.n	8004dda <_reclaim_reent+0x7e>
 8004de8:	4620      	mov	r0, r4
 8004dea:	f000 f841 	bl	8004e70 <_free_r>
 8004dee:	e7c0      	b.n	8004d72 <_reclaim_reent+0x16>
 8004df0:	680e      	ldr	r6, [r1, #0]
 8004df2:	4620      	mov	r0, r4
 8004df4:	f000 f83c 	bl	8004e70 <_free_r>
 8004df8:	4631      	mov	r1, r6
 8004dfa:	e7ef      	b.n	8004ddc <_reclaim_reent+0x80>
 8004dfc:	2500      	movs	r5, #0
 8004dfe:	e7ef      	b.n	8004de0 <_reclaim_reent+0x84>
 8004e00:	bd70      	pop	{r4, r5, r6, pc}
 8004e02:	bf00      	nop
 8004e04:	2000005c 	.word	0x2000005c

08004e08 <__libc_init_array>:
 8004e08:	b570      	push	{r4, r5, r6, lr}
 8004e0a:	4d0d      	ldr	r5, [pc, #52]	; (8004e40 <__libc_init_array+0x38>)
 8004e0c:	4c0d      	ldr	r4, [pc, #52]	; (8004e44 <__libc_init_array+0x3c>)
 8004e0e:	1b64      	subs	r4, r4, r5
 8004e10:	10a4      	asrs	r4, r4, #2
 8004e12:	2600      	movs	r6, #0
 8004e14:	42a6      	cmp	r6, r4
 8004e16:	d109      	bne.n	8004e2c <__libc_init_array+0x24>
 8004e18:	4d0b      	ldr	r5, [pc, #44]	; (8004e48 <__libc_init_array+0x40>)
 8004e1a:	4c0c      	ldr	r4, [pc, #48]	; (8004e4c <__libc_init_array+0x44>)
 8004e1c:	f000 f880 	bl	8004f20 <_init>
 8004e20:	1b64      	subs	r4, r4, r5
 8004e22:	10a4      	asrs	r4, r4, #2
 8004e24:	2600      	movs	r6, #0
 8004e26:	42a6      	cmp	r6, r4
 8004e28:	d105      	bne.n	8004e36 <__libc_init_array+0x2e>
 8004e2a:	bd70      	pop	{r4, r5, r6, pc}
 8004e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e30:	4798      	blx	r3
 8004e32:	3601      	adds	r6, #1
 8004e34:	e7ee      	b.n	8004e14 <__libc_init_array+0xc>
 8004e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e3a:	4798      	blx	r3
 8004e3c:	3601      	adds	r6, #1
 8004e3e:	e7f2      	b.n	8004e26 <__libc_init_array+0x1e>
 8004e40:	0800500c 	.word	0x0800500c
 8004e44:	0800500c 	.word	0x0800500c
 8004e48:	0800500c 	.word	0x0800500c
 8004e4c:	08005010 	.word	0x08005010

08004e50 <__retarget_lock_acquire_recursive>:
 8004e50:	4770      	bx	lr

08004e52 <__retarget_lock_release_recursive>:
 8004e52:	4770      	bx	lr

08004e54 <memcpy>:
 8004e54:	440a      	add	r2, r1
 8004e56:	4291      	cmp	r1, r2
 8004e58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004e5c:	d100      	bne.n	8004e60 <memcpy+0xc>
 8004e5e:	4770      	bx	lr
 8004e60:	b510      	push	{r4, lr}
 8004e62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e6a:	4291      	cmp	r1, r2
 8004e6c:	d1f9      	bne.n	8004e62 <memcpy+0xe>
 8004e6e:	bd10      	pop	{r4, pc}

08004e70 <_free_r>:
 8004e70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e72:	2900      	cmp	r1, #0
 8004e74:	d044      	beq.n	8004f00 <_free_r+0x90>
 8004e76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e7a:	9001      	str	r0, [sp, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f1a1 0404 	sub.w	r4, r1, #4
 8004e82:	bfb8      	it	lt
 8004e84:	18e4      	addlt	r4, r4, r3
 8004e86:	f000 f83f 	bl	8004f08 <__malloc_lock>
 8004e8a:	4a1e      	ldr	r2, [pc, #120]	; (8004f04 <_free_r+0x94>)
 8004e8c:	9801      	ldr	r0, [sp, #4]
 8004e8e:	6813      	ldr	r3, [r2, #0]
 8004e90:	b933      	cbnz	r3, 8004ea0 <_free_r+0x30>
 8004e92:	6063      	str	r3, [r4, #4]
 8004e94:	6014      	str	r4, [r2, #0]
 8004e96:	b003      	add	sp, #12
 8004e98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e9c:	f000 b83a 	b.w	8004f14 <__malloc_unlock>
 8004ea0:	42a3      	cmp	r3, r4
 8004ea2:	d908      	bls.n	8004eb6 <_free_r+0x46>
 8004ea4:	6825      	ldr	r5, [r4, #0]
 8004ea6:	1961      	adds	r1, r4, r5
 8004ea8:	428b      	cmp	r3, r1
 8004eaa:	bf01      	itttt	eq
 8004eac:	6819      	ldreq	r1, [r3, #0]
 8004eae:	685b      	ldreq	r3, [r3, #4]
 8004eb0:	1949      	addeq	r1, r1, r5
 8004eb2:	6021      	streq	r1, [r4, #0]
 8004eb4:	e7ed      	b.n	8004e92 <_free_r+0x22>
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	b10b      	cbz	r3, 8004ec0 <_free_r+0x50>
 8004ebc:	42a3      	cmp	r3, r4
 8004ebe:	d9fa      	bls.n	8004eb6 <_free_r+0x46>
 8004ec0:	6811      	ldr	r1, [r2, #0]
 8004ec2:	1855      	adds	r5, r2, r1
 8004ec4:	42a5      	cmp	r5, r4
 8004ec6:	d10b      	bne.n	8004ee0 <_free_r+0x70>
 8004ec8:	6824      	ldr	r4, [r4, #0]
 8004eca:	4421      	add	r1, r4
 8004ecc:	1854      	adds	r4, r2, r1
 8004ece:	42a3      	cmp	r3, r4
 8004ed0:	6011      	str	r1, [r2, #0]
 8004ed2:	d1e0      	bne.n	8004e96 <_free_r+0x26>
 8004ed4:	681c      	ldr	r4, [r3, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	6053      	str	r3, [r2, #4]
 8004eda:	440c      	add	r4, r1
 8004edc:	6014      	str	r4, [r2, #0]
 8004ede:	e7da      	b.n	8004e96 <_free_r+0x26>
 8004ee0:	d902      	bls.n	8004ee8 <_free_r+0x78>
 8004ee2:	230c      	movs	r3, #12
 8004ee4:	6003      	str	r3, [r0, #0]
 8004ee6:	e7d6      	b.n	8004e96 <_free_r+0x26>
 8004ee8:	6825      	ldr	r5, [r4, #0]
 8004eea:	1961      	adds	r1, r4, r5
 8004eec:	428b      	cmp	r3, r1
 8004eee:	bf04      	itt	eq
 8004ef0:	6819      	ldreq	r1, [r3, #0]
 8004ef2:	685b      	ldreq	r3, [r3, #4]
 8004ef4:	6063      	str	r3, [r4, #4]
 8004ef6:	bf04      	itt	eq
 8004ef8:	1949      	addeq	r1, r1, r5
 8004efa:	6021      	streq	r1, [r4, #0]
 8004efc:	6054      	str	r4, [r2, #4]
 8004efe:	e7ca      	b.n	8004e96 <_free_r+0x26>
 8004f00:	b003      	add	sp, #12
 8004f02:	bd30      	pop	{r4, r5, pc}
 8004f04:	20004c00 	.word	0x20004c00

08004f08 <__malloc_lock>:
 8004f08:	4801      	ldr	r0, [pc, #4]	; (8004f10 <__malloc_lock+0x8>)
 8004f0a:	f7ff bfa1 	b.w	8004e50 <__retarget_lock_acquire_recursive>
 8004f0e:	bf00      	nop
 8004f10:	20004bfc 	.word	0x20004bfc

08004f14 <__malloc_unlock>:
 8004f14:	4801      	ldr	r0, [pc, #4]	; (8004f1c <__malloc_unlock+0x8>)
 8004f16:	f7ff bf9c 	b.w	8004e52 <__retarget_lock_release_recursive>
 8004f1a:	bf00      	nop
 8004f1c:	20004bfc 	.word	0x20004bfc

08004f20 <_init>:
 8004f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f22:	bf00      	nop
 8004f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f26:	bc08      	pop	{r3}
 8004f28:	469e      	mov	lr, r3
 8004f2a:	4770      	bx	lr

08004f2c <_fini>:
 8004f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f2e:	bf00      	nop
 8004f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f32:	bc08      	pop	{r3}
 8004f34:	469e      	mov	lr, r3
 8004f36:	4770      	bx	lr
