
Lab06-04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b38  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08005cd8  08005cd8  00015cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ee0  08005ee0  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08005ee0  08005ee0  00015ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ee8  08005ee8  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ee8  08005ee8  00015ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005eec  08005eec  00015eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005ef0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bc0  20000060  08005f50  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c20  08005f50  00024c20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012733  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029f5  00000000  00000000  00032806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e78  00000000  00000000  00035200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b15  00000000  00000000  00036078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d95  00000000  00000000  00036b8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f601  00000000  00000000  00039922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ff67  00000000  00000000  00048f23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004068  00000000  00000000  000d8e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000dcef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005cc0 	.word	0x08005cc0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08005cc0 	.word	0x08005cc0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000580:	f000 fb58 	bl	8000c34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000584:	f000 f886 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000588:	f000 f918 	bl	80007bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058c:	f000 f8ec 	bl	8000768 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000590:	f001 ff38 	bl	8002404 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of task_queue */
  task_queueHandle = osMessageQueueNew (16, sizeof(T_MEAS), &task_queue_attributes);
 8000594:	4a25      	ldr	r2, [pc, #148]	; (800062c <main+0xb0>)
 8000596:	2108      	movs	r1, #8
 8000598:	2010      	movs	r0, #16
 800059a:	f002 f82a 	bl	80025f2 <osMessageQueueNew>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a23      	ldr	r2, [pc, #140]	; (8000630 <main+0xb4>)
 80005a2:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005a4:	4a23      	ldr	r2, [pc, #140]	; (8000634 <main+0xb8>)
 80005a6:	2100      	movs	r1, #0
 80005a8:	4823      	ldr	r0, [pc, #140]	; (8000638 <main+0xbc>)
 80005aa:	f001 ff75 	bl	8002498 <osThreadNew>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a22      	ldr	r2, [pc, #136]	; (800063c <main+0xc0>)
 80005b2:	6013      	str	r3, [r2, #0]

  /* creation of led_blue */
  led_blueHandle = osThreadNew(led_thread_blue, NULL, &led_blue_attributes);
 80005b4:	4a22      	ldr	r2, [pc, #136]	; (8000640 <main+0xc4>)
 80005b6:	2100      	movs	r1, #0
 80005b8:	4822      	ldr	r0, [pc, #136]	; (8000644 <main+0xc8>)
 80005ba:	f001 ff6d 	bl	8002498 <osThreadNew>
 80005be:	4603      	mov	r3, r0
 80005c0:	4a21      	ldr	r2, [pc, #132]	; (8000648 <main+0xcc>)
 80005c2:	6013      	str	r3, [r2, #0]

  /* creation of led_green */
  led_greenHandle = osThreadNew(led_thread_green, NULL, &led_green_attributes);
 80005c4:	4a21      	ldr	r2, [pc, #132]	; (800064c <main+0xd0>)
 80005c6:	2100      	movs	r1, #0
 80005c8:	4821      	ldr	r0, [pc, #132]	; (8000650 <main+0xd4>)
 80005ca:	f001 ff65 	bl	8002498 <osThreadNew>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4a20      	ldr	r2, [pc, #128]	; (8000654 <main+0xd8>)
 80005d2:	6013      	str	r3, [r2, #0]

  /* creation of led_white */
  led_whiteHandle = osThreadNew(led_thread_white, NULL, &led_white_attributes);
 80005d4:	4a20      	ldr	r2, [pc, #128]	; (8000658 <main+0xdc>)
 80005d6:	2100      	movs	r1, #0
 80005d8:	4820      	ldr	r0, [pc, #128]	; (800065c <main+0xe0>)
 80005da:	f001 ff5d 	bl	8002498 <osThreadNew>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a1f      	ldr	r2, [pc, #124]	; (8000660 <main+0xe4>)
 80005e2:	6013      	str	r3, [r2, #0]

  /* creation of led_red */
  led_redHandle = osThreadNew(led_thread_red, NULL, &led_red_attributes);
 80005e4:	4a1f      	ldr	r2, [pc, #124]	; (8000664 <main+0xe8>)
 80005e6:	2100      	movs	r1, #0
 80005e8:	481f      	ldr	r0, [pc, #124]	; (8000668 <main+0xec>)
 80005ea:	f001 ff55 	bl	8002498 <osThreadNew>
 80005ee:	4603      	mov	r3, r0
 80005f0:	4a1e      	ldr	r2, [pc, #120]	; (800066c <main+0xf0>)
 80005f2:	6013      	str	r3, [r2, #0]

  /* creation of uart1 */
  uart1Handle = osThreadNew(uart_thread, NULL, &uart1_attributes);
 80005f4:	4a1e      	ldr	r2, [pc, #120]	; (8000670 <main+0xf4>)
 80005f6:	2100      	movs	r1, #0
 80005f8:	481e      	ldr	r0, [pc, #120]	; (8000674 <main+0xf8>)
 80005fa:	f001 ff4d 	bl	8002498 <osThreadNew>
 80005fe:	4603      	mov	r3, r0
 8000600:	4a1d      	ldr	r2, [pc, #116]	; (8000678 <main+0xfc>)
 8000602:	6013      	str	r3, [r2, #0]

  /* creation of uart2 */
  uart2Handle = osThreadNew(uart2_thread, NULL, &uart2_attributes);
 8000604:	4a1d      	ldr	r2, [pc, #116]	; (800067c <main+0x100>)
 8000606:	2100      	movs	r1, #0
 8000608:	481d      	ldr	r0, [pc, #116]	; (8000680 <main+0x104>)
 800060a:	f001 ff45 	bl	8002498 <osThreadNew>
 800060e:	4603      	mov	r3, r0
 8000610:	4a1c      	ldr	r2, [pc, #112]	; (8000684 <main+0x108>)
 8000612:	6013      	str	r3, [r2, #0]

  /* creation of queue */
  queueHandle = osThreadNew(queue_thread, NULL, &queue_attributes);
 8000614:	4a1c      	ldr	r2, [pc, #112]	; (8000688 <main+0x10c>)
 8000616:	2100      	movs	r1, #0
 8000618:	481c      	ldr	r0, [pc, #112]	; (800068c <main+0x110>)
 800061a:	f001 ff3d 	bl	8002498 <osThreadNew>
 800061e:	4603      	mov	r3, r0
 8000620:	4a1b      	ldr	r2, [pc, #108]	; (8000690 <main+0x114>)
 8000622:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000624:	f001 ff12 	bl	800244c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000628:	e7fe      	b.n	8000628 <main+0xac>
 800062a:	bf00      	nop
 800062c:	08005e7c 	.word	0x08005e7c
 8000630:	200000e4 	.word	0x200000e4
 8000634:	08005d5c 	.word	0x08005d5c
 8000638:	080008c5 	.word	0x080008c5
 800063c:	200000c4 	.word	0x200000c4
 8000640:	08005d80 	.word	0x08005d80
 8000644:	080008d5 	.word	0x080008d5
 8000648:	200000c8 	.word	0x200000c8
 800064c:	08005da4 	.word	0x08005da4
 8000650:	080008f1 	.word	0x080008f1
 8000654:	200000cc 	.word	0x200000cc
 8000658:	08005dc8 	.word	0x08005dc8
 800065c:	0800090d 	.word	0x0800090d
 8000660:	200000d0 	.word	0x200000d0
 8000664:	08005dec 	.word	0x08005dec
 8000668:	08000929 	.word	0x08000929
 800066c:	200000d4 	.word	0x200000d4
 8000670:	08005e10 	.word	0x08005e10
 8000674:	08000949 	.word	0x08000949
 8000678:	200000d8 	.word	0x200000d8
 800067c:	08005e34 	.word	0x08005e34
 8000680:	08000985 	.word	0x08000985
 8000684:	200000dc 	.word	0x200000dc
 8000688:	08005e58 	.word	0x08005e58
 800068c:	080009c1 	.word	0x080009c1
 8000690:	200000e0 	.word	0x200000e0

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b094      	sub	sp, #80	; 0x50
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	2230      	movs	r2, #48	; 0x30
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f004 fe32 	bl	800530c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	4b28      	ldr	r3, [pc, #160]	; (8000760 <SystemClock_Config+0xcc>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	4a27      	ldr	r2, [pc, #156]	; (8000760 <SystemClock_Config+0xcc>)
 80006c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c6:	6413      	str	r3, [r2, #64]	; 0x40
 80006c8:	4b25      	ldr	r3, [pc, #148]	; (8000760 <SystemClock_Config+0xcc>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d4:	2300      	movs	r3, #0
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	4b22      	ldr	r3, [pc, #136]	; (8000764 <SystemClock_Config+0xd0>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a21      	ldr	r2, [pc, #132]	; (8000764 <SystemClock_Config+0xd0>)
 80006de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006e2:	6013      	str	r3, [r2, #0]
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <SystemClock_Config+0xd0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f0:	2302      	movs	r3, #2
 80006f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f4:	2301      	movs	r3, #1
 80006f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f8:	2310      	movs	r3, #16
 80006fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fc:	2302      	movs	r3, #2
 80006fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000700:	2300      	movs	r3, #0
 8000702:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000704:	2310      	movs	r3, #16
 8000706:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000708:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800070c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800070e:	2304      	movs	r3, #4
 8000710:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000712:	2304      	movs	r3, #4
 8000714:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000716:	f107 0320 	add.w	r3, r7, #32
 800071a:	4618      	mov	r0, r3
 800071c:	f000 fd9a 	bl	8001254 <HAL_RCC_OscConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000726:	f000 f975 	bl	8000a14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072a:	230f      	movs	r3, #15
 800072c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072e:	2302      	movs	r3, #2
 8000730:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000736:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	2102      	movs	r1, #2
 8000746:	4618      	mov	r0, r3
 8000748:	f000 fffc 	bl	8001744 <HAL_RCC_ClockConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000752:	f000 f95f 	bl	8000a14 <Error_Handler>
  }
}
 8000756:	bf00      	nop
 8000758:	3750      	adds	r7, #80	; 0x50
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40023800 	.word	0x40023800
 8000764:	40007000 	.word	0x40007000

08000768 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800076e:	4a12      	ldr	r2, [pc, #72]	; (80007b8 <MX_USART2_UART_Init+0x50>)
 8000770:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000774:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000778:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800078c:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 80007a0:	f001 f9f0 	bl	8001b84 <HAL_UART_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007aa:	f000 f933 	bl	8000a14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	2000007c 	.word	0x2000007c
 80007b8:	40004400 	.word	0x40004400

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	; 0x28
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	4b38      	ldr	r3, [pc, #224]	; (80008b8 <MX_GPIO_Init+0xfc>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a37      	ldr	r2, [pc, #220]	; (80008b8 <MX_GPIO_Init+0xfc>)
 80007dc:	f043 0304 	orr.w	r3, r3, #4
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b35      	ldr	r3, [pc, #212]	; (80008b8 <MX_GPIO_Init+0xfc>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0304 	and.w	r3, r3, #4
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	4b31      	ldr	r3, [pc, #196]	; (80008b8 <MX_GPIO_Init+0xfc>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a30      	ldr	r2, [pc, #192]	; (80008b8 <MX_GPIO_Init+0xfc>)
 80007f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b2e      	ldr	r3, [pc, #184]	; (80008b8 <MX_GPIO_Init+0xfc>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	4b2a      	ldr	r3, [pc, #168]	; (80008b8 <MX_GPIO_Init+0xfc>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a29      	ldr	r2, [pc, #164]	; (80008b8 <MX_GPIO_Init+0xfc>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b27      	ldr	r3, [pc, #156]	; (80008b8 <MX_GPIO_Init+0xfc>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b23      	ldr	r3, [pc, #140]	; (80008b8 <MX_GPIO_Init+0xfc>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a22      	ldr	r2, [pc, #136]	; (80008b8 <MX_GPIO_Init+0xfc>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b20      	ldr	r3, [pc, #128]	; (80008b8 <MX_GPIO_Init+0xfc>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000842:	2200      	movs	r2, #0
 8000844:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8000848:	481c      	ldr	r0, [pc, #112]	; (80008bc <MX_GPIO_Init+0x100>)
 800084a:	f000 fccf 	bl	80011ec <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	2180      	movs	r1, #128	; 0x80
 8000852:	481b      	ldr	r0, [pc, #108]	; (80008c0 <MX_GPIO_Init+0x104>)
 8000854:	f000 fcca 	bl	80011ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000858:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800085c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800085e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4619      	mov	r1, r3
 800086e:	4814      	ldr	r0, [pc, #80]	; (80008c0 <MX_GPIO_Init+0x104>)
 8000870:	f000 fb38 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 PA8
                           PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000874:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000878:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087a:	2301      	movs	r3, #1
 800087c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	2300      	movs	r3, #0
 8000884:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	4619      	mov	r1, r3
 800088c:	480b      	ldr	r0, [pc, #44]	; (80008bc <MX_GPIO_Init+0x100>)
 800088e:	f000 fb29 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000892:	2380      	movs	r3, #128	; 0x80
 8000894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000896:	2301      	movs	r3, #1
 8000898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	4619      	mov	r1, r3
 80008a8:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_GPIO_Init+0x104>)
 80008aa:	f000 fb1b 	bl	8000ee4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ae:	bf00      	nop
 80008b0:	3728      	adds	r7, #40	; 0x28
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40020000 	.word	0x40020000
 80008c0:	40020800 	.word	0x40020800

080008c4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
//	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
    osDelay(1);
 80008cc:	2001      	movs	r0, #1
 80008ce:	f001 fe75 	bl	80025bc <osDelay>
 80008d2:	e7fb      	b.n	80008cc <StartDefaultTask+0x8>

080008d4 <led_thread_blue>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_led_thread_blue */
void led_thread_blue(void *argument)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN led_thread_blue */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 80008dc:	2140      	movs	r1, #64	; 0x40
 80008de:	4803      	ldr	r0, [pc, #12]	; (80008ec <led_thread_blue+0x18>)
 80008e0:	f000 fc9d 	bl	800121e <HAL_GPIO_TogglePin>
    osDelay(50);
 80008e4:	2032      	movs	r0, #50	; 0x32
 80008e6:	f001 fe69 	bl	80025bc <osDelay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 80008ea:	e7f7      	b.n	80008dc <led_thread_blue+0x8>
 80008ec:	40020000 	.word	0x40020000

080008f0 <led_thread_green>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_led_thread_green */
void led_thread_green(void *argument)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN led_thread_green */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 80008f8:	2180      	movs	r1, #128	; 0x80
 80008fa:	4803      	ldr	r0, [pc, #12]	; (8000908 <led_thread_green+0x18>)
 80008fc:	f000 fc8f 	bl	800121e <HAL_GPIO_TogglePin>
    osDelay(18);
 8000900:	2012      	movs	r0, #18
 8000902:	f001 fe5b 	bl	80025bc <osDelay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8000906:	e7f7      	b.n	80008f8 <led_thread_green+0x8>
 8000908:	40020000 	.word	0x40020000

0800090c <led_thread_white>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_led_thread_white */
void led_thread_white(void *argument)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN led_thread_white */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8000914:	2180      	movs	r1, #128	; 0x80
 8000916:	4803      	ldr	r0, [pc, #12]	; (8000924 <led_thread_white+0x18>)
 8000918:	f000 fc81 	bl	800121e <HAL_GPIO_TogglePin>
    osDelay(64);
 800091c:	2040      	movs	r0, #64	; 0x40
 800091e:	f001 fe4d 	bl	80025bc <osDelay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8000922:	e7f7      	b.n	8000914 <led_thread_white+0x8>
 8000924:	40020800 	.word	0x40020800

08000928 <led_thread_red>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_led_thread_red */
void led_thread_red(void *argument)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN led_thread_red */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 8000930:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000934:	4803      	ldr	r0, [pc, #12]	; (8000944 <led_thread_red+0x1c>)
 8000936:	f000 fc72 	bl	800121e <HAL_GPIO_TogglePin>
    osDelay(128);
 800093a:	2080      	movs	r0, #128	; 0x80
 800093c:	f001 fe3e 	bl	80025bc <osDelay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 8000940:	e7f6      	b.n	8000930 <led_thread_red+0x8>
 8000942:	bf00      	nop
 8000944:	40020000 	.word	0x40020000

08000948 <uart_thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uart_thread */
void uart_thread(void *argument)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN uart_thread */
	T_MEAS    mptr;
	int threadId = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	613b      	str	r3, [r7, #16]
	int idx = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]
	for (;;) {
		mptr.ID = idx;
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	60fb      	str	r3, [r7, #12]
		mptr.TID = threadId;
 800095c:	693b      	ldr	r3, [r7, #16]
 800095e:	60bb      	str	r3, [r7, #8]
		osMessageQueuePut(task_queueHandle, &mptr, 0,osWaitForever);
 8000960:	4b07      	ldr	r3, [pc, #28]	; (8000980 <uart_thread+0x38>)
 8000962:	6818      	ldr	r0, [r3, #0]
 8000964:	f107 0108 	add.w	r1, r7, #8
 8000968:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800096c:	2200      	movs	r2, #0
 800096e:	f001 feb3 	bl	80026d8 <osMessageQueuePut>
		idx++;
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	3301      	adds	r3, #1
 8000976:	617b      	str	r3, [r7, #20]
		osDelay(100);
 8000978:	2064      	movs	r0, #100	; 0x64
 800097a:	f001 fe1f 	bl	80025bc <osDelay>
		mptr.ID = idx;
 800097e:	e7eb      	b.n	8000958 <uart_thread+0x10>
 8000980:	200000e4 	.word	0x200000e4

08000984 <uart2_thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uart2_thread */
void uart2_thread(void *argument)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN uart2_thread */
	T_MEAS    mptr;
	int threadId = 1;
 800098c:	2301      	movs	r3, #1
 800098e:	613b      	str	r3, [r7, #16]
	int idx = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]
	for (;;) {
		mptr.ID = idx;
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	60fb      	str	r3, [r7, #12]
		mptr.TID = threadId;
 8000998:	693b      	ldr	r3, [r7, #16]
 800099a:	60bb      	str	r3, [r7, #8]
		osMessageQueuePut(task_queueHandle, &mptr, 0,osWaitForever);
 800099c:	4b07      	ldr	r3, [pc, #28]	; (80009bc <uart2_thread+0x38>)
 800099e:	6818      	ldr	r0, [r3, #0]
 80009a0:	f107 0108 	add.w	r1, r7, #8
 80009a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009a8:	2200      	movs	r2, #0
 80009aa:	f001 fe95 	bl	80026d8 <osMessageQueuePut>
		idx++;
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	3301      	adds	r3, #1
 80009b2:	617b      	str	r3, [r7, #20]
		osDelay(100);
 80009b4:	2064      	movs	r0, #100	; 0x64
 80009b6:	f001 fe01 	bl	80025bc <osDelay>
		mptr.ID = idx;
 80009ba:	e7eb      	b.n	8000994 <uart2_thread+0x10>
 80009bc:	200000e4 	.word	0x200000e4

080009c0 <queue_thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_queue_thread */
void queue_thread(void *argument)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08e      	sub	sp, #56	; 0x38
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN queue_thread */
	  T_MEAS  rpt;
	  osStatus_t  status;
	  char buffer[32];
	  for (;;) {
	    status = osMessageQueueGet(task_queueHandle,&rpt,NULL,1000);  // wait for message
 80009c8:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <queue_thread+0x48>)
 80009ca:	6818      	ldr	r0, [r3, #0]
 80009cc:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80009d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009d4:	2200      	movs	r2, #0
 80009d6:	f001 fedf 	bl	8002798 <osMessageQueueGet>
 80009da:	6378      	str	r0, [r7, #52]	; 0x34
	    if (status == osOK) {
 80009dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d1f2      	bne.n	80009c8 <queue_thread+0x8>
	      sprintf(buffer,"TID: %d %d\r\n", rpt.TID,rpt.ID);
 80009e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009e6:	f107 000c 	add.w	r0, r7, #12
 80009ea:	4908      	ldr	r1, [pc, #32]	; (8000a0c <queue_thread+0x4c>)
 80009ec:	f004 fc6e 	bl	80052cc <siprintf>
	      HAL_UART_Transmit(&huart2, buffer, 32, 1000);
 80009f0:	f107 010c 	add.w	r1, r7, #12
 80009f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009f8:	2220      	movs	r2, #32
 80009fa:	4805      	ldr	r0, [pc, #20]	; (8000a10 <queue_thread+0x50>)
 80009fc:	f001 f912 	bl	8001c24 <HAL_UART_Transmit>
	      osDelay(100);
 8000a00:	2064      	movs	r0, #100	; 0x64
 8000a02:	f001 fddb 	bl	80025bc <osDelay>
	    status = osMessageQueueGet(task_queueHandle,&rpt,NULL,1000);  // wait for message
 8000a06:	e7df      	b.n	80009c8 <queue_thread+0x8>
 8000a08:	200000e4 	.word	0x200000e4
 8000a0c:	08005d34 	.word	0x08005d34
 8000a10:	2000007c 	.word	0x2000007c

08000a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a18:	b672      	cpsid	i
}
 8000a1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <Error_Handler+0x8>
	...

08000a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <HAL_MspInit+0x54>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	4a11      	ldr	r2, [pc, #68]	; (8000a74 <HAL_MspInit+0x54>)
 8000a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a34:	6453      	str	r3, [r2, #68]	; 0x44
 8000a36:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <HAL_MspInit+0x54>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	603b      	str	r3, [r7, #0]
 8000a46:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <HAL_MspInit+0x54>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4a:	4a0a      	ldr	r2, [pc, #40]	; (8000a74 <HAL_MspInit+0x54>)
 8000a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a50:	6413      	str	r3, [r2, #64]	; 0x40
 8000a52:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <HAL_MspInit+0x54>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	210f      	movs	r1, #15
 8000a62:	f06f 0001 	mvn.w	r0, #1
 8000a66:	f000 fa14 	bl	8000e92 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40023800 	.word	0x40023800

08000a78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08a      	sub	sp, #40	; 0x28
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a19      	ldr	r2, [pc, #100]	; (8000afc <HAL_UART_MspInit+0x84>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d12b      	bne.n	8000af2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <HAL_UART_MspInit+0x88>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	4a17      	ldr	r2, [pc, #92]	; (8000b00 <HAL_UART_MspInit+0x88>)
 8000aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aaa:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <HAL_UART_MspInit+0x88>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <HAL_UART_MspInit+0x88>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a10      	ldr	r2, [pc, #64]	; (8000b00 <HAL_UART_MspInit+0x88>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <HAL_UART_MspInit+0x88>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ad2:	230c      	movs	r3, #12
 8000ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ade:	2303      	movs	r3, #3
 8000ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ae2:	2307      	movs	r3, #7
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	4619      	mov	r1, r3
 8000aec:	4805      	ldr	r0, [pc, #20]	; (8000b04 <HAL_UART_MspInit+0x8c>)
 8000aee:	f000 f9f9 	bl	8000ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000af2:	bf00      	nop
 8000af4:	3728      	adds	r7, #40	; 0x28
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40004400 	.word	0x40004400
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40020000 	.word	0x40020000

08000b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b0c:	e7fe      	b.n	8000b0c <NMI_Handler+0x4>

08000b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <HardFault_Handler+0x4>

08000b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <MemManage_Handler+0x4>

08000b1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <BusFault_Handler+0x4>

08000b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <UsageFault_Handler+0x4>

08000b26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b38:	f000 f8ce 	bl	8000cd8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b3c:	f003 fb60 	bl	8004200 <xTaskGetSchedulerState>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d001      	beq.n	8000b4a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b46:	f004 f947 	bl	8004dd8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
	...

08000b50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b58:	4a14      	ldr	r2, [pc, #80]	; (8000bac <_sbrk+0x5c>)
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <_sbrk+0x60>)
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b64:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <_sbrk+0x64>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d102      	bne.n	8000b72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b6c:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <_sbrk+0x64>)
 8000b6e:	4a12      	ldr	r2, [pc, #72]	; (8000bb8 <_sbrk+0x68>)
 8000b70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b72:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <_sbrk+0x64>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4413      	add	r3, r2
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d207      	bcs.n	8000b90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b80:	f004 fc22 	bl	80053c8 <__errno>
 8000b84:	4603      	mov	r3, r0
 8000b86:	220c      	movs	r2, #12
 8000b88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b8e:	e009      	b.n	8000ba4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <_sbrk+0x64>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b96:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <_sbrk+0x64>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	4a05      	ldr	r2, [pc, #20]	; (8000bb4 <_sbrk+0x64>)
 8000ba0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3718      	adds	r7, #24
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20020000 	.word	0x20020000
 8000bb0:	00000400 	.word	0x00000400
 8000bb4:	200000e8 	.word	0x200000e8
 8000bb8:	20004c20 	.word	0x20004c20

08000bbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <SystemInit+0x20>)
 8000bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bc6:	4a05      	ldr	r2, [pc, #20]	; (8000bdc <SystemInit+0x20>)
 8000bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000be0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c18 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000be4:	f7ff ffea 	bl	8000bbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000be8:	480c      	ldr	r0, [pc, #48]	; (8000c1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bea:	490d      	ldr	r1, [pc, #52]	; (8000c20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bec:	4a0d      	ldr	r2, [pc, #52]	; (8000c24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf0:	e002      	b.n	8000bf8 <LoopCopyDataInit>

08000bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf6:	3304      	adds	r3, #4

08000bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bfc:	d3f9      	bcc.n	8000bf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfe:	4a0a      	ldr	r2, [pc, #40]	; (8000c28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c00:	4c0a      	ldr	r4, [pc, #40]	; (8000c2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c04:	e001      	b.n	8000c0a <LoopFillZerobss>

08000c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c08:	3204      	adds	r2, #4

08000c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c0c:	d3fb      	bcc.n	8000c06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c0e:	f004 fbe1 	bl	80053d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c12:	f7ff fcb3 	bl	800057c <main>
  bx  lr    
 8000c16:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c20:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c24:	08005ef0 	.word	0x08005ef0
  ldr r2, =_sbss
 8000c28:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c2c:	20004c20 	.word	0x20004c20

08000c30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c30:	e7fe      	b.n	8000c30 <ADC_IRQHandler>
	...

08000c34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c38:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <HAL_Init+0x40>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a0d      	ldr	r2, [pc, #52]	; (8000c74 <HAL_Init+0x40>)
 8000c3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c44:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <HAL_Init+0x40>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <HAL_Init+0x40>)
 8000c4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c50:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <HAL_Init+0x40>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a07      	ldr	r2, [pc, #28]	; (8000c74 <HAL_Init+0x40>)
 8000c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c5c:	2003      	movs	r0, #3
 8000c5e:	f000 f90d 	bl	8000e7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c62:	200f      	movs	r0, #15
 8000c64:	f000 f808 	bl	8000c78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c68:	f7ff feda 	bl	8000a20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40023c00 	.word	0x40023c00

08000c78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c80:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <HAL_InitTick+0x54>)
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <HAL_InitTick+0x58>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	4619      	mov	r1, r3
 8000c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c96:	4618      	mov	r0, r3
 8000c98:	f000 f917 	bl	8000eca <HAL_SYSTICK_Config>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e00e      	b.n	8000cc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2b0f      	cmp	r3, #15
 8000caa:	d80a      	bhi.n	8000cc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cac:	2200      	movs	r2, #0
 8000cae:	6879      	ldr	r1, [r7, #4]
 8000cb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cb4:	f000 f8ed 	bl	8000e92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb8:	4a06      	ldr	r2, [pc, #24]	; (8000cd4 <HAL_InitTick+0x5c>)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	e000      	b.n	8000cc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000000 	.word	0x20000000
 8000cd0:	20000008 	.word	0x20000008
 8000cd4:	20000004 	.word	0x20000004

08000cd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_IncTick+0x20>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_IncTick+0x24>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	4a04      	ldr	r2, [pc, #16]	; (8000cfc <HAL_IncTick+0x24>)
 8000cea:	6013      	str	r3, [r2, #0]
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	200000ec 	.word	0x200000ec

08000d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return uwTick;
 8000d04:	4b03      	ldr	r3, [pc, #12]	; (8000d14 <HAL_GetTick+0x14>)
 8000d06:	681b      	ldr	r3, [r3, #0]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	200000ec 	.word	0x200000ec

08000d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d34:	4013      	ands	r3, r2
 8000d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4a:	4a04      	ldr	r2, [pc, #16]	; (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	60d3      	str	r3, [r2, #12]
}
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <__NVIC_GetPriorityGrouping+0x18>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	0a1b      	lsrs	r3, r3, #8
 8000d6a:	f003 0307 	and.w	r3, r3, #7
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	6039      	str	r1, [r7, #0]
 8000d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	db0a      	blt.n	8000da6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	490c      	ldr	r1, [pc, #48]	; (8000dc8 <__NVIC_SetPriority+0x4c>)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	0112      	lsls	r2, r2, #4
 8000d9c:	b2d2      	uxtb	r2, r2
 8000d9e:	440b      	add	r3, r1
 8000da0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da4:	e00a      	b.n	8000dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	4908      	ldr	r1, [pc, #32]	; (8000dcc <__NVIC_SetPriority+0x50>)
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	f003 030f 	and.w	r3, r3, #15
 8000db2:	3b04      	subs	r3, #4
 8000db4:	0112      	lsls	r2, r2, #4
 8000db6:	b2d2      	uxtb	r2, r2
 8000db8:	440b      	add	r3, r1
 8000dba:	761a      	strb	r2, [r3, #24]
}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000e100 	.word	0xe000e100
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b089      	sub	sp, #36	; 0x24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	f1c3 0307 	rsb	r3, r3, #7
 8000dea:	2b04      	cmp	r3, #4
 8000dec:	bf28      	it	cs
 8000dee:	2304      	movcs	r3, #4
 8000df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3304      	adds	r3, #4
 8000df6:	2b06      	cmp	r3, #6
 8000df8:	d902      	bls.n	8000e00 <NVIC_EncodePriority+0x30>
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3b03      	subs	r3, #3
 8000dfe:	e000      	b.n	8000e02 <NVIC_EncodePriority+0x32>
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43da      	mvns	r2, r3
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	401a      	ands	r2, r3
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e22:	43d9      	mvns	r1, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e28:	4313      	orrs	r3, r2
         );
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3724      	adds	r7, #36	; 0x24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
	...

08000e38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e48:	d301      	bcc.n	8000e4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e00f      	b.n	8000e6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <SysTick_Config+0x40>)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e56:	210f      	movs	r1, #15
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e5c:	f7ff ff8e 	bl	8000d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <SysTick_Config+0x40>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e66:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <SysTick_Config+0x40>)
 8000e68:	2207      	movs	r2, #7
 8000e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	e000e010 	.word	0xe000e010

08000e7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff ff47 	bl	8000d18 <__NVIC_SetPriorityGrouping>
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b086      	sub	sp, #24
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	4603      	mov	r3, r0
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
 8000e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea4:	f7ff ff5c 	bl	8000d60 <__NVIC_GetPriorityGrouping>
 8000ea8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	68b9      	ldr	r1, [r7, #8]
 8000eae:	6978      	ldr	r0, [r7, #20]
 8000eb0:	f7ff ff8e 	bl	8000dd0 <NVIC_EncodePriority>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eba:	4611      	mov	r1, r2
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff5d 	bl	8000d7c <__NVIC_SetPriority>
}
 8000ec2:	bf00      	nop
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff ffb0 	bl	8000e38 <SysTick_Config>
 8000ed8:	4603      	mov	r3, r0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b089      	sub	sp, #36	; 0x24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
 8000efe:	e159      	b.n	80011b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f00:	2201      	movs	r2, #1
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	f040 8148 	bne.w	80011ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 0303 	and.w	r3, r3, #3
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d005      	beq.n	8000f36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d130      	bne.n	8000f98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	2203      	movs	r2, #3
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	68da      	ldr	r2, [r3, #12]
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	091b      	lsrs	r3, r3, #4
 8000f82:	f003 0201 	and.w	r2, r3, #1
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0303 	and.w	r3, r3, #3
 8000fa0:	2b03      	cmp	r3, #3
 8000fa2:	d017      	beq.n	8000fd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	2203      	movs	r2, #3
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	689a      	ldr	r2, [r3, #8]
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d123      	bne.n	8001028 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	08da      	lsrs	r2, r3, #3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3208      	adds	r2, #8
 8000fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	f003 0307 	and.w	r3, r3, #7
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	220f      	movs	r2, #15
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	691a      	ldr	r2, [r3, #16]
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	08da      	lsrs	r2, r3, #3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3208      	adds	r2, #8
 8001022:	69b9      	ldr	r1, [r7, #24]
 8001024:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	2203      	movs	r2, #3
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4013      	ands	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0203 	and.w	r2, r3, #3
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001064:	2b00      	cmp	r3, #0
 8001066:	f000 80a2 	beq.w	80011ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b57      	ldr	r3, [pc, #348]	; (80011cc <HAL_GPIO_Init+0x2e8>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	4a56      	ldr	r2, [pc, #344]	; (80011cc <HAL_GPIO_Init+0x2e8>)
 8001074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001078:	6453      	str	r3, [r2, #68]	; 0x44
 800107a:	4b54      	ldr	r3, [pc, #336]	; (80011cc <HAL_GPIO_Init+0x2e8>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001086:	4a52      	ldr	r2, [pc, #328]	; (80011d0 <HAL_GPIO_Init+0x2ec>)
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	089b      	lsrs	r3, r3, #2
 800108c:	3302      	adds	r3, #2
 800108e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f003 0303 	and.w	r3, r3, #3
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	220f      	movs	r2, #15
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4013      	ands	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a49      	ldr	r2, [pc, #292]	; (80011d4 <HAL_GPIO_Init+0x2f0>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d019      	beq.n	80010e6 <HAL_GPIO_Init+0x202>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a48      	ldr	r2, [pc, #288]	; (80011d8 <HAL_GPIO_Init+0x2f4>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d013      	beq.n	80010e2 <HAL_GPIO_Init+0x1fe>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a47      	ldr	r2, [pc, #284]	; (80011dc <HAL_GPIO_Init+0x2f8>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d00d      	beq.n	80010de <HAL_GPIO_Init+0x1fa>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a46      	ldr	r2, [pc, #280]	; (80011e0 <HAL_GPIO_Init+0x2fc>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d007      	beq.n	80010da <HAL_GPIO_Init+0x1f6>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a45      	ldr	r2, [pc, #276]	; (80011e4 <HAL_GPIO_Init+0x300>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d101      	bne.n	80010d6 <HAL_GPIO_Init+0x1f2>
 80010d2:	2304      	movs	r3, #4
 80010d4:	e008      	b.n	80010e8 <HAL_GPIO_Init+0x204>
 80010d6:	2307      	movs	r3, #7
 80010d8:	e006      	b.n	80010e8 <HAL_GPIO_Init+0x204>
 80010da:	2303      	movs	r3, #3
 80010dc:	e004      	b.n	80010e8 <HAL_GPIO_Init+0x204>
 80010de:	2302      	movs	r3, #2
 80010e0:	e002      	b.n	80010e8 <HAL_GPIO_Init+0x204>
 80010e2:	2301      	movs	r3, #1
 80010e4:	e000      	b.n	80010e8 <HAL_GPIO_Init+0x204>
 80010e6:	2300      	movs	r3, #0
 80010e8:	69fa      	ldr	r2, [r7, #28]
 80010ea:	f002 0203 	and.w	r2, r2, #3
 80010ee:	0092      	lsls	r2, r2, #2
 80010f0:	4093      	lsls	r3, r2
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010f8:	4935      	ldr	r1, [pc, #212]	; (80011d0 <HAL_GPIO_Init+0x2ec>)
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	089b      	lsrs	r3, r3, #2
 80010fe:	3302      	adds	r3, #2
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001106:	4b38      	ldr	r3, [pc, #224]	; (80011e8 <HAL_GPIO_Init+0x304>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800112a:	4a2f      	ldr	r2, [pc, #188]	; (80011e8 <HAL_GPIO_Init+0x304>)
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001130:	4b2d      	ldr	r3, [pc, #180]	; (80011e8 <HAL_GPIO_Init+0x304>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001154:	4a24      	ldr	r2, [pc, #144]	; (80011e8 <HAL_GPIO_Init+0x304>)
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800115a:	4b23      	ldr	r3, [pc, #140]	; (80011e8 <HAL_GPIO_Init+0x304>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800117e:	4a1a      	ldr	r2, [pc, #104]	; (80011e8 <HAL_GPIO_Init+0x304>)
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001184:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <HAL_GPIO_Init+0x304>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011a8:	4a0f      	ldr	r2, [pc, #60]	; (80011e8 <HAL_GPIO_Init+0x304>)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3301      	adds	r3, #1
 80011b2:	61fb      	str	r3, [r7, #28]
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	2b0f      	cmp	r3, #15
 80011b8:	f67f aea2 	bls.w	8000f00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	3724      	adds	r7, #36	; 0x24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40013800 	.word	0x40013800
 80011d4:	40020000 	.word	0x40020000
 80011d8:	40020400 	.word	0x40020400
 80011dc:	40020800 	.word	0x40020800
 80011e0:	40020c00 	.word	0x40020c00
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40013c00 	.word	0x40013c00

080011ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	807b      	strh	r3, [r7, #2]
 80011f8:	4613      	mov	r3, r2
 80011fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011fc:	787b      	ldrb	r3, [r7, #1]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001202:	887a      	ldrh	r2, [r7, #2]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001208:	e003      	b.n	8001212 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800120a:	887b      	ldrh	r3, [r7, #2]
 800120c:	041a      	lsls	r2, r3, #16
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	619a      	str	r2, [r3, #24]
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800121e:	b480      	push	{r7}
 8001220:	b085      	sub	sp, #20
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
 8001226:	460b      	mov	r3, r1
 8001228:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001230:	887a      	ldrh	r2, [r7, #2]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	4013      	ands	r3, r2
 8001236:	041a      	lsls	r2, r3, #16
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	43d9      	mvns	r1, r3
 800123c:	887b      	ldrh	r3, [r7, #2]
 800123e:	400b      	ands	r3, r1
 8001240:	431a      	orrs	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	619a      	str	r2, [r3, #24]
}
 8001246:	bf00      	nop
 8001248:	3714      	adds	r7, #20
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e267      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	2b00      	cmp	r3, #0
 8001270:	d075      	beq.n	800135e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001272:	4b88      	ldr	r3, [pc, #544]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f003 030c 	and.w	r3, r3, #12
 800127a:	2b04      	cmp	r3, #4
 800127c:	d00c      	beq.n	8001298 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800127e:	4b85      	ldr	r3, [pc, #532]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001286:	2b08      	cmp	r3, #8
 8001288:	d112      	bne.n	80012b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800128a:	4b82      	ldr	r3, [pc, #520]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001292:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001296:	d10b      	bne.n	80012b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001298:	4b7e      	ldr	r3, [pc, #504]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d05b      	beq.n	800135c <HAL_RCC_OscConfig+0x108>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d157      	bne.n	800135c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e242      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b8:	d106      	bne.n	80012c8 <HAL_RCC_OscConfig+0x74>
 80012ba:	4b76      	ldr	r3, [pc, #472]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a75      	ldr	r2, [pc, #468]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	e01d      	b.n	8001304 <HAL_RCC_OscConfig+0xb0>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012d0:	d10c      	bne.n	80012ec <HAL_RCC_OscConfig+0x98>
 80012d2:	4b70      	ldr	r3, [pc, #448]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a6f      	ldr	r2, [pc, #444]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012dc:	6013      	str	r3, [r2, #0]
 80012de:	4b6d      	ldr	r3, [pc, #436]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a6c      	ldr	r2, [pc, #432]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e8:	6013      	str	r3, [r2, #0]
 80012ea:	e00b      	b.n	8001304 <HAL_RCC_OscConfig+0xb0>
 80012ec:	4b69      	ldr	r3, [pc, #420]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a68      	ldr	r2, [pc, #416]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	4b66      	ldr	r3, [pc, #408]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a65      	ldr	r2, [pc, #404]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001302:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d013      	beq.n	8001334 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130c:	f7ff fcf8 	bl	8000d00 <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001314:	f7ff fcf4 	bl	8000d00 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b64      	cmp	r3, #100	; 0x64
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e207      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001326:	4b5b      	ldr	r3, [pc, #364]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0f0      	beq.n	8001314 <HAL_RCC_OscConfig+0xc0>
 8001332:	e014      	b.n	800135e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001334:	f7ff fce4 	bl	8000d00 <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800133a:	e008      	b.n	800134e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800133c:	f7ff fce0 	bl	8000d00 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b64      	cmp	r3, #100	; 0x64
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e1f3      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800134e:	4b51      	ldr	r3, [pc, #324]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1f0      	bne.n	800133c <HAL_RCC_OscConfig+0xe8>
 800135a:	e000      	b.n	800135e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800135c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d063      	beq.n	8001432 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800136a:	4b4a      	ldr	r3, [pc, #296]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f003 030c 	and.w	r3, r3, #12
 8001372:	2b00      	cmp	r3, #0
 8001374:	d00b      	beq.n	800138e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001376:	4b47      	ldr	r3, [pc, #284]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800137e:	2b08      	cmp	r3, #8
 8001380:	d11c      	bne.n	80013bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001382:	4b44      	ldr	r3, [pc, #272]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d116      	bne.n	80013bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800138e:	4b41      	ldr	r3, [pc, #260]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d005      	beq.n	80013a6 <HAL_RCC_OscConfig+0x152>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d001      	beq.n	80013a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e1c7      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a6:	4b3b      	ldr	r3, [pc, #236]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	4937      	ldr	r1, [pc, #220]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80013b6:	4313      	orrs	r3, r2
 80013b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ba:	e03a      	b.n	8001432 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d020      	beq.n	8001406 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013c4:	4b34      	ldr	r3, [pc, #208]	; (8001498 <HAL_RCC_OscConfig+0x244>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ca:	f7ff fc99 	bl	8000d00 <HAL_GetTick>
 80013ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d0:	e008      	b.n	80013e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013d2:	f7ff fc95 	bl	8000d00 <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e1a8      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e4:	4b2b      	ldr	r3, [pc, #172]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d0f0      	beq.n	80013d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f0:	4b28      	ldr	r3, [pc, #160]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	4925      	ldr	r1, [pc, #148]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001400:	4313      	orrs	r3, r2
 8001402:	600b      	str	r3, [r1, #0]
 8001404:	e015      	b.n	8001432 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001406:	4b24      	ldr	r3, [pc, #144]	; (8001498 <HAL_RCC_OscConfig+0x244>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140c:	f7ff fc78 	bl	8000d00 <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001414:	f7ff fc74 	bl	8000d00 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e187      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001426:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1f0      	bne.n	8001414 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0308 	and.w	r3, r3, #8
 800143a:	2b00      	cmp	r3, #0
 800143c:	d036      	beq.n	80014ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d016      	beq.n	8001474 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001446:	4b15      	ldr	r3, [pc, #84]	; (800149c <HAL_RCC_OscConfig+0x248>)
 8001448:	2201      	movs	r2, #1
 800144a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800144c:	f7ff fc58 	bl	8000d00 <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001454:	f7ff fc54 	bl	8000d00 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e167      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d0f0      	beq.n	8001454 <HAL_RCC_OscConfig+0x200>
 8001472:	e01b      	b.n	80014ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001474:	4b09      	ldr	r3, [pc, #36]	; (800149c <HAL_RCC_OscConfig+0x248>)
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800147a:	f7ff fc41 	bl	8000d00 <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001480:	e00e      	b.n	80014a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001482:	f7ff fc3d 	bl	8000d00 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d907      	bls.n	80014a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e150      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
 8001494:	40023800 	.word	0x40023800
 8001498:	42470000 	.word	0x42470000
 800149c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a0:	4b88      	ldr	r3, [pc, #544]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80014a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1ea      	bne.n	8001482 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f000 8097 	beq.w	80015e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ba:	2300      	movs	r3, #0
 80014bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014be:	4b81      	ldr	r3, [pc, #516]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d10f      	bne.n	80014ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	4b7d      	ldr	r3, [pc, #500]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	4a7c      	ldr	r2, [pc, #496]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80014d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d8:	6413      	str	r3, [r2, #64]	; 0x40
 80014da:	4b7a      	ldr	r3, [pc, #488]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014e6:	2301      	movs	r3, #1
 80014e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ea:	4b77      	ldr	r3, [pc, #476]	; (80016c8 <HAL_RCC_OscConfig+0x474>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d118      	bne.n	8001528 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014f6:	4b74      	ldr	r3, [pc, #464]	; (80016c8 <HAL_RCC_OscConfig+0x474>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a73      	ldr	r2, [pc, #460]	; (80016c8 <HAL_RCC_OscConfig+0x474>)
 80014fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001500:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001502:	f7ff fbfd 	bl	8000d00 <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800150a:	f7ff fbf9 	bl	8000d00 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e10c      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151c:	4b6a      	ldr	r3, [pc, #424]	; (80016c8 <HAL_RCC_OscConfig+0x474>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0f0      	beq.n	800150a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d106      	bne.n	800153e <HAL_RCC_OscConfig+0x2ea>
 8001530:	4b64      	ldr	r3, [pc, #400]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001534:	4a63      	ldr	r2, [pc, #396]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001536:	f043 0301 	orr.w	r3, r3, #1
 800153a:	6713      	str	r3, [r2, #112]	; 0x70
 800153c:	e01c      	b.n	8001578 <HAL_RCC_OscConfig+0x324>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2b05      	cmp	r3, #5
 8001544:	d10c      	bne.n	8001560 <HAL_RCC_OscConfig+0x30c>
 8001546:	4b5f      	ldr	r3, [pc, #380]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154a:	4a5e      	ldr	r2, [pc, #376]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 800154c:	f043 0304 	orr.w	r3, r3, #4
 8001550:	6713      	str	r3, [r2, #112]	; 0x70
 8001552:	4b5c      	ldr	r3, [pc, #368]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001556:	4a5b      	ldr	r2, [pc, #364]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6713      	str	r3, [r2, #112]	; 0x70
 800155e:	e00b      	b.n	8001578 <HAL_RCC_OscConfig+0x324>
 8001560:	4b58      	ldr	r3, [pc, #352]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001564:	4a57      	ldr	r2, [pc, #348]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001566:	f023 0301 	bic.w	r3, r3, #1
 800156a:	6713      	str	r3, [r2, #112]	; 0x70
 800156c:	4b55      	ldr	r3, [pc, #340]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 800156e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001570:	4a54      	ldr	r2, [pc, #336]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001572:	f023 0304 	bic.w	r3, r3, #4
 8001576:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d015      	beq.n	80015ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001580:	f7ff fbbe 	bl	8000d00 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001586:	e00a      	b.n	800159e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001588:	f7ff fbba 	bl	8000d00 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	f241 3288 	movw	r2, #5000	; 0x1388
 8001596:	4293      	cmp	r3, r2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e0cb      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800159e:	4b49      	ldr	r3, [pc, #292]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80015a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0ee      	beq.n	8001588 <HAL_RCC_OscConfig+0x334>
 80015aa:	e014      	b.n	80015d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ac:	f7ff fba8 	bl	8000d00 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b2:	e00a      	b.n	80015ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015b4:	f7ff fba4 	bl	8000d00 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e0b5      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ca:	4b3e      	ldr	r3, [pc, #248]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80015cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1ee      	bne.n	80015b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015d6:	7dfb      	ldrb	r3, [r7, #23]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d105      	bne.n	80015e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015dc:	4b39      	ldr	r3, [pc, #228]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80015de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e0:	4a38      	ldr	r2, [pc, #224]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80015e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 80a1 	beq.w	8001734 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015f2:	4b34      	ldr	r3, [pc, #208]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f003 030c 	and.w	r3, r3, #12
 80015fa:	2b08      	cmp	r3, #8
 80015fc:	d05c      	beq.n	80016b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	2b02      	cmp	r3, #2
 8001604:	d141      	bne.n	800168a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001606:	4b31      	ldr	r3, [pc, #196]	; (80016cc <HAL_RCC_OscConfig+0x478>)
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160c:	f7ff fb78 	bl	8000d00 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001614:	f7ff fb74 	bl	8000d00 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e087      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001626:	4b27      	ldr	r3, [pc, #156]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f0      	bne.n	8001614 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69da      	ldr	r2, [r3, #28]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a1b      	ldr	r3, [r3, #32]
 800163a:	431a      	orrs	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001640:	019b      	lsls	r3, r3, #6
 8001642:	431a      	orrs	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001648:	085b      	lsrs	r3, r3, #1
 800164a:	3b01      	subs	r3, #1
 800164c:	041b      	lsls	r3, r3, #16
 800164e:	431a      	orrs	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001654:	061b      	lsls	r3, r3, #24
 8001656:	491b      	ldr	r1, [pc, #108]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001658:	4313      	orrs	r3, r2
 800165a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800165c:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <HAL_RCC_OscConfig+0x478>)
 800165e:	2201      	movs	r2, #1
 8001660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001662:	f7ff fb4d 	bl	8000d00 <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800166a:	f7ff fb49 	bl	8000d00 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e05c      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0f0      	beq.n	800166a <HAL_RCC_OscConfig+0x416>
 8001688:	e054      	b.n	8001734 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800168a:	4b10      	ldr	r3, [pc, #64]	; (80016cc <HAL_RCC_OscConfig+0x478>)
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001690:	f7ff fb36 	bl	8000d00 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001698:	f7ff fb32 	bl	8000d00 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e045      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f0      	bne.n	8001698 <HAL_RCC_OscConfig+0x444>
 80016b6:	e03d      	b.n	8001734 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d107      	bne.n	80016d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e038      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40007000 	.word	0x40007000
 80016cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016d0:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <HAL_RCC_OscConfig+0x4ec>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d028      	beq.n	8001730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d121      	bne.n	8001730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d11a      	bne.n	8001730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001700:	4013      	ands	r3, r2
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001706:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001708:	4293      	cmp	r3, r2
 800170a:	d111      	bne.n	8001730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001716:	085b      	lsrs	r3, r3, #1
 8001718:	3b01      	subs	r3, #1
 800171a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800171c:	429a      	cmp	r2, r3
 800171e:	d107      	bne.n	8001730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800172c:	429a      	cmp	r2, r3
 800172e:	d001      	beq.n	8001734 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e000      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40023800 	.word	0x40023800

08001744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d101      	bne.n	8001758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e0cc      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001758:	4b68      	ldr	r3, [pc, #416]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d90c      	bls.n	8001780 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001766:	4b65      	ldr	r3, [pc, #404]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	b2d2      	uxtb	r2, r2
 800176c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800176e:	4b63      	ldr	r3, [pc, #396]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	429a      	cmp	r2, r3
 800177a:	d001      	beq.n	8001780 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e0b8      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d020      	beq.n	80017ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	2b00      	cmp	r3, #0
 8001796:	d005      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001798:	4b59      	ldr	r3, [pc, #356]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	4a58      	ldr	r2, [pc, #352]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d005      	beq.n	80017bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017b0:	4b53      	ldr	r3, [pc, #332]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	4a52      	ldr	r2, [pc, #328]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017bc:	4b50      	ldr	r3, [pc, #320]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	494d      	ldr	r1, [pc, #308]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d044      	beq.n	8001864 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d107      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e2:	4b47      	ldr	r3, [pc, #284]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d119      	bne.n	8001822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e07f      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d003      	beq.n	8001802 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017fe:	2b03      	cmp	r3, #3
 8001800:	d107      	bne.n	8001812 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001802:	4b3f      	ldr	r3, [pc, #252]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d109      	bne.n	8001822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e06f      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001812:	4b3b      	ldr	r3, [pc, #236]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e067      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001822:	4b37      	ldr	r3, [pc, #220]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f023 0203 	bic.w	r2, r3, #3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	4934      	ldr	r1, [pc, #208]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	4313      	orrs	r3, r2
 8001832:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001834:	f7ff fa64 	bl	8000d00 <HAL_GetTick>
 8001838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183a:	e00a      	b.n	8001852 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800183c:	f7ff fa60 	bl	8000d00 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	f241 3288 	movw	r2, #5000	; 0x1388
 800184a:	4293      	cmp	r3, r2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e04f      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001852:	4b2b      	ldr	r3, [pc, #172]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 020c 	and.w	r2, r3, #12
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	429a      	cmp	r2, r3
 8001862:	d1eb      	bne.n	800183c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001864:	4b25      	ldr	r3, [pc, #148]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	429a      	cmp	r2, r3
 8001870:	d20c      	bcs.n	800188c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001872:	4b22      	ldr	r3, [pc, #136]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800187a:	4b20      	ldr	r3, [pc, #128]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	429a      	cmp	r2, r3
 8001886:	d001      	beq.n	800188c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e032      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	2b00      	cmp	r3, #0
 8001896:	d008      	beq.n	80018aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001898:	4b19      	ldr	r3, [pc, #100]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	4916      	ldr	r1, [pc, #88]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d009      	beq.n	80018ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018b6:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	490e      	ldr	r1, [pc, #56]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ca:	f000 f821 	bl	8001910 <HAL_RCC_GetSysClockFreq>
 80018ce:	4602      	mov	r2, r0
 80018d0:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	091b      	lsrs	r3, r3, #4
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	490a      	ldr	r1, [pc, #40]	; (8001904 <HAL_RCC_ClockConfig+0x1c0>)
 80018dc:	5ccb      	ldrb	r3, [r1, r3]
 80018de:	fa22 f303 	lsr.w	r3, r2, r3
 80018e2:	4a09      	ldr	r2, [pc, #36]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80018e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <HAL_RCC_ClockConfig+0x1c8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff f9c4 	bl	8000c78 <HAL_InitTick>

  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40023c00 	.word	0x40023c00
 8001900:	40023800 	.word	0x40023800
 8001904:	08005e94 	.word	0x08005e94
 8001908:	20000000 	.word	0x20000000
 800190c:	20000004 	.word	0x20000004

08001910 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001914:	b094      	sub	sp, #80	; 0x50
 8001916:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001918:	2300      	movs	r3, #0
 800191a:	647b      	str	r3, [r7, #68]	; 0x44
 800191c:	2300      	movs	r3, #0
 800191e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001920:	2300      	movs	r3, #0
 8001922:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001928:	4b79      	ldr	r3, [pc, #484]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f003 030c 	and.w	r3, r3, #12
 8001930:	2b08      	cmp	r3, #8
 8001932:	d00d      	beq.n	8001950 <HAL_RCC_GetSysClockFreq+0x40>
 8001934:	2b08      	cmp	r3, #8
 8001936:	f200 80e1 	bhi.w	8001afc <HAL_RCC_GetSysClockFreq+0x1ec>
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <HAL_RCC_GetSysClockFreq+0x34>
 800193e:	2b04      	cmp	r3, #4
 8001940:	d003      	beq.n	800194a <HAL_RCC_GetSysClockFreq+0x3a>
 8001942:	e0db      	b.n	8001afc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001944:	4b73      	ldr	r3, [pc, #460]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x204>)
 8001946:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001948:	e0db      	b.n	8001b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800194a:	4b73      	ldr	r3, [pc, #460]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x208>)
 800194c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800194e:	e0d8      	b.n	8001b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001950:	4b6f      	ldr	r3, [pc, #444]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001958:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800195a:	4b6d      	ldr	r3, [pc, #436]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d063      	beq.n	8001a2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001966:	4b6a      	ldr	r3, [pc, #424]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	099b      	lsrs	r3, r3, #6
 800196c:	2200      	movs	r2, #0
 800196e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001970:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001978:	633b      	str	r3, [r7, #48]	; 0x30
 800197a:	2300      	movs	r3, #0
 800197c:	637b      	str	r3, [r7, #52]	; 0x34
 800197e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001982:	4622      	mov	r2, r4
 8001984:	462b      	mov	r3, r5
 8001986:	f04f 0000 	mov.w	r0, #0
 800198a:	f04f 0100 	mov.w	r1, #0
 800198e:	0159      	lsls	r1, r3, #5
 8001990:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001994:	0150      	lsls	r0, r2, #5
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4621      	mov	r1, r4
 800199c:	1a51      	subs	r1, r2, r1
 800199e:	6139      	str	r1, [r7, #16]
 80019a0:	4629      	mov	r1, r5
 80019a2:	eb63 0301 	sbc.w	r3, r3, r1
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019b4:	4659      	mov	r1, fp
 80019b6:	018b      	lsls	r3, r1, #6
 80019b8:	4651      	mov	r1, sl
 80019ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019be:	4651      	mov	r1, sl
 80019c0:	018a      	lsls	r2, r1, #6
 80019c2:	4651      	mov	r1, sl
 80019c4:	ebb2 0801 	subs.w	r8, r2, r1
 80019c8:	4659      	mov	r1, fp
 80019ca:	eb63 0901 	sbc.w	r9, r3, r1
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	f04f 0300 	mov.w	r3, #0
 80019d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019e2:	4690      	mov	r8, r2
 80019e4:	4699      	mov	r9, r3
 80019e6:	4623      	mov	r3, r4
 80019e8:	eb18 0303 	adds.w	r3, r8, r3
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	462b      	mov	r3, r5
 80019f0:	eb49 0303 	adc.w	r3, r9, r3
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	f04f 0300 	mov.w	r3, #0
 80019fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a02:	4629      	mov	r1, r5
 8001a04:	024b      	lsls	r3, r1, #9
 8001a06:	4621      	mov	r1, r4
 8001a08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a0c:	4621      	mov	r1, r4
 8001a0e:	024a      	lsls	r2, r1, #9
 8001a10:	4610      	mov	r0, r2
 8001a12:	4619      	mov	r1, r3
 8001a14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a16:	2200      	movs	r2, #0
 8001a18:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a20:	f7fe fc2e 	bl	8000280 <__aeabi_uldivmod>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4613      	mov	r3, r2
 8001a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a2c:	e058      	b.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a2e:	4b38      	ldr	r3, [pc, #224]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	099b      	lsrs	r3, r3, #6
 8001a34:	2200      	movs	r2, #0
 8001a36:	4618      	mov	r0, r3
 8001a38:	4611      	mov	r1, r2
 8001a3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a3e:	623b      	str	r3, [r7, #32]
 8001a40:	2300      	movs	r3, #0
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
 8001a44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a48:	4642      	mov	r2, r8
 8001a4a:	464b      	mov	r3, r9
 8001a4c:	f04f 0000 	mov.w	r0, #0
 8001a50:	f04f 0100 	mov.w	r1, #0
 8001a54:	0159      	lsls	r1, r3, #5
 8001a56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a5a:	0150      	lsls	r0, r2, #5
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4641      	mov	r1, r8
 8001a62:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a66:	4649      	mov	r1, r9
 8001a68:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	f04f 0300 	mov.w	r3, #0
 8001a74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a80:	ebb2 040a 	subs.w	r4, r2, sl
 8001a84:	eb63 050b 	sbc.w	r5, r3, fp
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	00eb      	lsls	r3, r5, #3
 8001a92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a96:	00e2      	lsls	r2, r4, #3
 8001a98:	4614      	mov	r4, r2
 8001a9a:	461d      	mov	r5, r3
 8001a9c:	4643      	mov	r3, r8
 8001a9e:	18e3      	adds	r3, r4, r3
 8001aa0:	603b      	str	r3, [r7, #0]
 8001aa2:	464b      	mov	r3, r9
 8001aa4:	eb45 0303 	adc.w	r3, r5, r3
 8001aa8:	607b      	str	r3, [r7, #4]
 8001aaa:	f04f 0200 	mov.w	r2, #0
 8001aae:	f04f 0300 	mov.w	r3, #0
 8001ab2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ab6:	4629      	mov	r1, r5
 8001ab8:	028b      	lsls	r3, r1, #10
 8001aba:	4621      	mov	r1, r4
 8001abc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ac0:	4621      	mov	r1, r4
 8001ac2:	028a      	lsls	r2, r1, #10
 8001ac4:	4610      	mov	r0, r2
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aca:	2200      	movs	r2, #0
 8001acc:	61bb      	str	r3, [r7, #24]
 8001ace:	61fa      	str	r2, [r7, #28]
 8001ad0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ad4:	f7fe fbd4 	bl	8000280 <__aeabi_uldivmod>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4613      	mov	r3, r2
 8001ade:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	0c1b      	lsrs	r3, r3, #16
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	3301      	adds	r3, #1
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001af0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001af2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001afa:	e002      	b.n	8001b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001afc:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x204>)
 8001afe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3750      	adds	r7, #80	; 0x50
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b0e:	bf00      	nop
 8001b10:	40023800 	.word	0x40023800
 8001b14:	00f42400 	.word	0x00f42400
 8001b18:	007a1200 	.word	0x007a1200

08001b1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b22:	681b      	ldr	r3, [r3, #0]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	20000000 	.word	0x20000000

08001b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b38:	f7ff fff0 	bl	8001b1c <HAL_RCC_GetHCLKFreq>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	0a9b      	lsrs	r3, r3, #10
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	4903      	ldr	r1, [pc, #12]	; (8001b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b4a:	5ccb      	ldrb	r3, [r1, r3]
 8001b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40023800 	.word	0x40023800
 8001b58:	08005ea4 	.word	0x08005ea4

08001b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b60:	f7ff ffdc 	bl	8001b1c <HAL_RCC_GetHCLKFreq>
 8001b64:	4602      	mov	r2, r0
 8001b66:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	0b5b      	lsrs	r3, r3, #13
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	4903      	ldr	r1, [pc, #12]	; (8001b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b72:	5ccb      	ldrb	r3, [r1, r3]
 8001b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	08005ea4 	.word	0x08005ea4

08001b84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e042      	b.n	8001c1c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d106      	bne.n	8001bb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7fe ff64 	bl	8000a78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2224      	movs	r2, #36	; 0x24
 8001bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68da      	ldr	r2, [r3, #12]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 f973 	bl	8001eb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	691a      	ldr	r2, [r3, #16]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001bdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	695a      	ldr	r2, [r3, #20]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001bec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68da      	ldr	r2, [r3, #12]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001bfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2220      	movs	r2, #32
 8001c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2220      	movs	r2, #32
 8001c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08a      	sub	sp, #40	; 0x28
 8001c28:	af02      	add	r7, sp, #8
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	603b      	str	r3, [r7, #0]
 8001c30:	4613      	mov	r3, r2
 8001c32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b20      	cmp	r3, #32
 8001c42:	d175      	bne.n	8001d30 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d002      	beq.n	8001c50 <HAL_UART_Transmit+0x2c>
 8001c4a:	88fb      	ldrh	r3, [r7, #6]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e06e      	b.n	8001d32 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2200      	movs	r2, #0
 8001c58:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2221      	movs	r2, #33	; 0x21
 8001c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c62:	f7ff f84d 	bl	8000d00 <HAL_GetTick>
 8001c66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	88fa      	ldrh	r2, [r7, #6]
 8001c6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	88fa      	ldrh	r2, [r7, #6]
 8001c72:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c7c:	d108      	bne.n	8001c90 <HAL_UART_Transmit+0x6c>
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d104      	bne.n	8001c90 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	61bb      	str	r3, [r7, #24]
 8001c8e:	e003      	b.n	8001c98 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001c98:	e02e      	b.n	8001cf8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	9300      	str	r3, [sp, #0]
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2180      	movs	r1, #128	; 0x80
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f000 f848 	bl	8001d3a <UART_WaitOnFlagUntilTimeout>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d005      	beq.n	8001cbc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2220      	movs	r2, #32
 8001cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e03a      	b.n	8001d32 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10b      	bne.n	8001cda <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	881b      	ldrh	r3, [r3, #0]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001cd0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	3302      	adds	r3, #2
 8001cd6:	61bb      	str	r3, [r7, #24]
 8001cd8:	e007      	b.n	8001cea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	781a      	ldrb	r2, [r3, #0]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1cb      	bne.n	8001c9a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2140      	movs	r1, #64	; 0x40
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f000 f814 	bl	8001d3a <UART_WaitOnFlagUntilTimeout>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d005      	beq.n	8001d24 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2220      	movs	r2, #32
 8001d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e006      	b.n	8001d32 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2220      	movs	r2, #32
 8001d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	e000      	b.n	8001d32 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001d30:	2302      	movs	r3, #2
  }
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3720      	adds	r7, #32
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b086      	sub	sp, #24
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	60f8      	str	r0, [r7, #12]
 8001d42:	60b9      	str	r1, [r7, #8]
 8001d44:	603b      	str	r3, [r7, #0]
 8001d46:	4613      	mov	r3, r2
 8001d48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d4a:	e03b      	b.n	8001dc4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d4c:	6a3b      	ldr	r3, [r7, #32]
 8001d4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d52:	d037      	beq.n	8001dc4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d54:	f7fe ffd4 	bl	8000d00 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	6a3a      	ldr	r2, [r7, #32]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d302      	bcc.n	8001d6a <UART_WaitOnFlagUntilTimeout+0x30>
 8001d64:	6a3b      	ldr	r3, [r7, #32]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e03a      	b.n	8001de4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	f003 0304 	and.w	r3, r3, #4
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d023      	beq.n	8001dc4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	2b80      	cmp	r3, #128	; 0x80
 8001d80:	d020      	beq.n	8001dc4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	2b40      	cmp	r3, #64	; 0x40
 8001d86:	d01d      	beq.n	8001dc4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	2b08      	cmp	r3, #8
 8001d94:	d116      	bne.n	8001dc4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001d96:	2300      	movs	r3, #0
 8001d98:	617b      	str	r3, [r7, #20]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	617b      	str	r3, [r7, #20]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	f000 f81d 	bl	8001dec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2208      	movs	r2, #8
 8001db6:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e00f      	b.n	8001de4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	68ba      	ldr	r2, [r7, #8]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	bf0c      	ite	eq
 8001dd4:	2301      	moveq	r3, #1
 8001dd6:	2300      	movne	r3, #0
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	461a      	mov	r2, r3
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d0b4      	beq.n	8001d4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b095      	sub	sp, #84	; 0x54
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	330c      	adds	r3, #12
 8001dfa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dfe:	e853 3f00 	ldrex	r3, [r3]
 8001e02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	330c      	adds	r3, #12
 8001e12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e14:	643a      	str	r2, [r7, #64]	; 0x40
 8001e16:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001e1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001e1c:	e841 2300 	strex	r3, r2, [r1]
 8001e20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1e5      	bne.n	8001df4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	3314      	adds	r3, #20
 8001e2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e30:	6a3b      	ldr	r3, [r7, #32]
 8001e32:	e853 3f00 	ldrex	r3, [r3]
 8001e36:	61fb      	str	r3, [r7, #28]
   return(result);
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	f023 0301 	bic.w	r3, r3, #1
 8001e3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	3314      	adds	r3, #20
 8001e46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e50:	e841 2300 	strex	r3, r2, [r1]
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1e5      	bne.n	8001e28 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d119      	bne.n	8001e98 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	330c      	adds	r3, #12
 8001e6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	e853 3f00 	ldrex	r3, [r3]
 8001e72:	60bb      	str	r3, [r7, #8]
   return(result);
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	f023 0310 	bic.w	r3, r3, #16
 8001e7a:	647b      	str	r3, [r7, #68]	; 0x44
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	330c      	adds	r3, #12
 8001e82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001e84:	61ba      	str	r2, [r7, #24]
 8001e86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e88:	6979      	ldr	r1, [r7, #20]
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	e841 2300 	strex	r3, r2, [r1]
 8001e90:	613b      	str	r3, [r7, #16]
   return(result);
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1e5      	bne.n	8001e64 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2220      	movs	r2, #32
 8001e9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001ea6:	bf00      	nop
 8001ea8:	3754      	adds	r7, #84	; 0x54
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
	...

08001eb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001eb8:	b0c0      	sub	sp, #256	; 0x100
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ed0:	68d9      	ldr	r1, [r3, #12]
 8001ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	ea40 0301 	orr.w	r3, r0, r1
 8001edc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	431a      	orrs	r2, r3
 8001eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001f0c:	f021 010c 	bic.w	r1, r1, #12
 8001f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001f1a:	430b      	orrs	r3, r1
 8001f1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f2e:	6999      	ldr	r1, [r3, #24]
 8001f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	ea40 0301 	orr.w	r3, r0, r1
 8001f3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	4b8f      	ldr	r3, [pc, #572]	; (8002180 <UART_SetConfig+0x2cc>)
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d005      	beq.n	8001f54 <UART_SetConfig+0xa0>
 8001f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	4b8d      	ldr	r3, [pc, #564]	; (8002184 <UART_SetConfig+0x2d0>)
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d104      	bne.n	8001f5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f54:	f7ff fe02 	bl	8001b5c <HAL_RCC_GetPCLK2Freq>
 8001f58:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001f5c:	e003      	b.n	8001f66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001f5e:	f7ff fde9 	bl	8001b34 <HAL_RCC_GetPCLK1Freq>
 8001f62:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f6a:	69db      	ldr	r3, [r3, #28]
 8001f6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f70:	f040 810c 	bne.w	800218c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001f74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001f7e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001f82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001f86:	4622      	mov	r2, r4
 8001f88:	462b      	mov	r3, r5
 8001f8a:	1891      	adds	r1, r2, r2
 8001f8c:	65b9      	str	r1, [r7, #88]	; 0x58
 8001f8e:	415b      	adcs	r3, r3
 8001f90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001f96:	4621      	mov	r1, r4
 8001f98:	eb12 0801 	adds.w	r8, r2, r1
 8001f9c:	4629      	mov	r1, r5
 8001f9e:	eb43 0901 	adc.w	r9, r3, r1
 8001fa2:	f04f 0200 	mov.w	r2, #0
 8001fa6:	f04f 0300 	mov.w	r3, #0
 8001faa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001fae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001fb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001fb6:	4690      	mov	r8, r2
 8001fb8:	4699      	mov	r9, r3
 8001fba:	4623      	mov	r3, r4
 8001fbc:	eb18 0303 	adds.w	r3, r8, r3
 8001fc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001fc4:	462b      	mov	r3, r5
 8001fc6:	eb49 0303 	adc.w	r3, r9, r3
 8001fca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001fda:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001fde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	18db      	adds	r3, r3, r3
 8001fe6:	653b      	str	r3, [r7, #80]	; 0x50
 8001fe8:	4613      	mov	r3, r2
 8001fea:	eb42 0303 	adc.w	r3, r2, r3
 8001fee:	657b      	str	r3, [r7, #84]	; 0x54
 8001ff0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001ff4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001ff8:	f7fe f942 	bl	8000280 <__aeabi_uldivmod>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	4b61      	ldr	r3, [pc, #388]	; (8002188 <UART_SetConfig+0x2d4>)
 8002002:	fba3 2302 	umull	r2, r3, r3, r2
 8002006:	095b      	lsrs	r3, r3, #5
 8002008:	011c      	lsls	r4, r3, #4
 800200a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800200e:	2200      	movs	r2, #0
 8002010:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002014:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002018:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800201c:	4642      	mov	r2, r8
 800201e:	464b      	mov	r3, r9
 8002020:	1891      	adds	r1, r2, r2
 8002022:	64b9      	str	r1, [r7, #72]	; 0x48
 8002024:	415b      	adcs	r3, r3
 8002026:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002028:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800202c:	4641      	mov	r1, r8
 800202e:	eb12 0a01 	adds.w	sl, r2, r1
 8002032:	4649      	mov	r1, r9
 8002034:	eb43 0b01 	adc.w	fp, r3, r1
 8002038:	f04f 0200 	mov.w	r2, #0
 800203c:	f04f 0300 	mov.w	r3, #0
 8002040:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002044:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002048:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800204c:	4692      	mov	sl, r2
 800204e:	469b      	mov	fp, r3
 8002050:	4643      	mov	r3, r8
 8002052:	eb1a 0303 	adds.w	r3, sl, r3
 8002056:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800205a:	464b      	mov	r3, r9
 800205c:	eb4b 0303 	adc.w	r3, fp, r3
 8002060:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002070:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002074:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002078:	460b      	mov	r3, r1
 800207a:	18db      	adds	r3, r3, r3
 800207c:	643b      	str	r3, [r7, #64]	; 0x40
 800207e:	4613      	mov	r3, r2
 8002080:	eb42 0303 	adc.w	r3, r2, r3
 8002084:	647b      	str	r3, [r7, #68]	; 0x44
 8002086:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800208a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800208e:	f7fe f8f7 	bl	8000280 <__aeabi_uldivmod>
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	4611      	mov	r1, r2
 8002098:	4b3b      	ldr	r3, [pc, #236]	; (8002188 <UART_SetConfig+0x2d4>)
 800209a:	fba3 2301 	umull	r2, r3, r3, r1
 800209e:	095b      	lsrs	r3, r3, #5
 80020a0:	2264      	movs	r2, #100	; 0x64
 80020a2:	fb02 f303 	mul.w	r3, r2, r3
 80020a6:	1acb      	subs	r3, r1, r3
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80020ae:	4b36      	ldr	r3, [pc, #216]	; (8002188 <UART_SetConfig+0x2d4>)
 80020b0:	fba3 2302 	umull	r2, r3, r3, r2
 80020b4:	095b      	lsrs	r3, r3, #5
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80020bc:	441c      	add	r4, r3
 80020be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020c2:	2200      	movs	r2, #0
 80020c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80020c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80020cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80020d0:	4642      	mov	r2, r8
 80020d2:	464b      	mov	r3, r9
 80020d4:	1891      	adds	r1, r2, r2
 80020d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80020d8:	415b      	adcs	r3, r3
 80020da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80020e0:	4641      	mov	r1, r8
 80020e2:	1851      	adds	r1, r2, r1
 80020e4:	6339      	str	r1, [r7, #48]	; 0x30
 80020e6:	4649      	mov	r1, r9
 80020e8:	414b      	adcs	r3, r1
 80020ea:	637b      	str	r3, [r7, #52]	; 0x34
 80020ec:	f04f 0200 	mov.w	r2, #0
 80020f0:	f04f 0300 	mov.w	r3, #0
 80020f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80020f8:	4659      	mov	r1, fp
 80020fa:	00cb      	lsls	r3, r1, #3
 80020fc:	4651      	mov	r1, sl
 80020fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002102:	4651      	mov	r1, sl
 8002104:	00ca      	lsls	r2, r1, #3
 8002106:	4610      	mov	r0, r2
 8002108:	4619      	mov	r1, r3
 800210a:	4603      	mov	r3, r0
 800210c:	4642      	mov	r2, r8
 800210e:	189b      	adds	r3, r3, r2
 8002110:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002114:	464b      	mov	r3, r9
 8002116:	460a      	mov	r2, r1
 8002118:	eb42 0303 	adc.w	r3, r2, r3
 800211c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800212c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002130:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002134:	460b      	mov	r3, r1
 8002136:	18db      	adds	r3, r3, r3
 8002138:	62bb      	str	r3, [r7, #40]	; 0x28
 800213a:	4613      	mov	r3, r2
 800213c:	eb42 0303 	adc.w	r3, r2, r3
 8002140:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002142:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002146:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800214a:	f7fe f899 	bl	8000280 <__aeabi_uldivmod>
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	4b0d      	ldr	r3, [pc, #52]	; (8002188 <UART_SetConfig+0x2d4>)
 8002154:	fba3 1302 	umull	r1, r3, r3, r2
 8002158:	095b      	lsrs	r3, r3, #5
 800215a:	2164      	movs	r1, #100	; 0x64
 800215c:	fb01 f303 	mul.w	r3, r1, r3
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	3332      	adds	r3, #50	; 0x32
 8002166:	4a08      	ldr	r2, [pc, #32]	; (8002188 <UART_SetConfig+0x2d4>)
 8002168:	fba2 2303 	umull	r2, r3, r2, r3
 800216c:	095b      	lsrs	r3, r3, #5
 800216e:	f003 0207 	and.w	r2, r3, #7
 8002172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4422      	add	r2, r4
 800217a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800217c:	e106      	b.n	800238c <UART_SetConfig+0x4d8>
 800217e:	bf00      	nop
 8002180:	40011000 	.word	0x40011000
 8002184:	40011400 	.word	0x40011400
 8002188:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800218c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002190:	2200      	movs	r2, #0
 8002192:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002196:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800219a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800219e:	4642      	mov	r2, r8
 80021a0:	464b      	mov	r3, r9
 80021a2:	1891      	adds	r1, r2, r2
 80021a4:	6239      	str	r1, [r7, #32]
 80021a6:	415b      	adcs	r3, r3
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
 80021aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80021ae:	4641      	mov	r1, r8
 80021b0:	1854      	adds	r4, r2, r1
 80021b2:	4649      	mov	r1, r9
 80021b4:	eb43 0501 	adc.w	r5, r3, r1
 80021b8:	f04f 0200 	mov.w	r2, #0
 80021bc:	f04f 0300 	mov.w	r3, #0
 80021c0:	00eb      	lsls	r3, r5, #3
 80021c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021c6:	00e2      	lsls	r2, r4, #3
 80021c8:	4614      	mov	r4, r2
 80021ca:	461d      	mov	r5, r3
 80021cc:	4643      	mov	r3, r8
 80021ce:	18e3      	adds	r3, r4, r3
 80021d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80021d4:	464b      	mov	r3, r9
 80021d6:	eb45 0303 	adc.w	r3, r5, r3
 80021da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80021de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80021ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80021ee:	f04f 0200 	mov.w	r2, #0
 80021f2:	f04f 0300 	mov.w	r3, #0
 80021f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80021fa:	4629      	mov	r1, r5
 80021fc:	008b      	lsls	r3, r1, #2
 80021fe:	4621      	mov	r1, r4
 8002200:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002204:	4621      	mov	r1, r4
 8002206:	008a      	lsls	r2, r1, #2
 8002208:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800220c:	f7fe f838 	bl	8000280 <__aeabi_uldivmod>
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4b60      	ldr	r3, [pc, #384]	; (8002398 <UART_SetConfig+0x4e4>)
 8002216:	fba3 2302 	umull	r2, r3, r3, r2
 800221a:	095b      	lsrs	r3, r3, #5
 800221c:	011c      	lsls	r4, r3, #4
 800221e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002222:	2200      	movs	r2, #0
 8002224:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002228:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800222c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002230:	4642      	mov	r2, r8
 8002232:	464b      	mov	r3, r9
 8002234:	1891      	adds	r1, r2, r2
 8002236:	61b9      	str	r1, [r7, #24]
 8002238:	415b      	adcs	r3, r3
 800223a:	61fb      	str	r3, [r7, #28]
 800223c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002240:	4641      	mov	r1, r8
 8002242:	1851      	adds	r1, r2, r1
 8002244:	6139      	str	r1, [r7, #16]
 8002246:	4649      	mov	r1, r9
 8002248:	414b      	adcs	r3, r1
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	f04f 0200 	mov.w	r2, #0
 8002250:	f04f 0300 	mov.w	r3, #0
 8002254:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002258:	4659      	mov	r1, fp
 800225a:	00cb      	lsls	r3, r1, #3
 800225c:	4651      	mov	r1, sl
 800225e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002262:	4651      	mov	r1, sl
 8002264:	00ca      	lsls	r2, r1, #3
 8002266:	4610      	mov	r0, r2
 8002268:	4619      	mov	r1, r3
 800226a:	4603      	mov	r3, r0
 800226c:	4642      	mov	r2, r8
 800226e:	189b      	adds	r3, r3, r2
 8002270:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002274:	464b      	mov	r3, r9
 8002276:	460a      	mov	r2, r1
 8002278:	eb42 0303 	adc.w	r3, r2, r3
 800227c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	67bb      	str	r3, [r7, #120]	; 0x78
 800228a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800228c:	f04f 0200 	mov.w	r2, #0
 8002290:	f04f 0300 	mov.w	r3, #0
 8002294:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002298:	4649      	mov	r1, r9
 800229a:	008b      	lsls	r3, r1, #2
 800229c:	4641      	mov	r1, r8
 800229e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022a2:	4641      	mov	r1, r8
 80022a4:	008a      	lsls	r2, r1, #2
 80022a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80022aa:	f7fd ffe9 	bl	8000280 <__aeabi_uldivmod>
 80022ae:	4602      	mov	r2, r0
 80022b0:	460b      	mov	r3, r1
 80022b2:	4611      	mov	r1, r2
 80022b4:	4b38      	ldr	r3, [pc, #224]	; (8002398 <UART_SetConfig+0x4e4>)
 80022b6:	fba3 2301 	umull	r2, r3, r3, r1
 80022ba:	095b      	lsrs	r3, r3, #5
 80022bc:	2264      	movs	r2, #100	; 0x64
 80022be:	fb02 f303 	mul.w	r3, r2, r3
 80022c2:	1acb      	subs	r3, r1, r3
 80022c4:	011b      	lsls	r3, r3, #4
 80022c6:	3332      	adds	r3, #50	; 0x32
 80022c8:	4a33      	ldr	r2, [pc, #204]	; (8002398 <UART_SetConfig+0x4e4>)
 80022ca:	fba2 2303 	umull	r2, r3, r2, r3
 80022ce:	095b      	lsrs	r3, r3, #5
 80022d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022d4:	441c      	add	r4, r3
 80022d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022da:	2200      	movs	r2, #0
 80022dc:	673b      	str	r3, [r7, #112]	; 0x70
 80022de:	677a      	str	r2, [r7, #116]	; 0x74
 80022e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80022e4:	4642      	mov	r2, r8
 80022e6:	464b      	mov	r3, r9
 80022e8:	1891      	adds	r1, r2, r2
 80022ea:	60b9      	str	r1, [r7, #8]
 80022ec:	415b      	adcs	r3, r3
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022f4:	4641      	mov	r1, r8
 80022f6:	1851      	adds	r1, r2, r1
 80022f8:	6039      	str	r1, [r7, #0]
 80022fa:	4649      	mov	r1, r9
 80022fc:	414b      	adcs	r3, r1
 80022fe:	607b      	str	r3, [r7, #4]
 8002300:	f04f 0200 	mov.w	r2, #0
 8002304:	f04f 0300 	mov.w	r3, #0
 8002308:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800230c:	4659      	mov	r1, fp
 800230e:	00cb      	lsls	r3, r1, #3
 8002310:	4651      	mov	r1, sl
 8002312:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002316:	4651      	mov	r1, sl
 8002318:	00ca      	lsls	r2, r1, #3
 800231a:	4610      	mov	r0, r2
 800231c:	4619      	mov	r1, r3
 800231e:	4603      	mov	r3, r0
 8002320:	4642      	mov	r2, r8
 8002322:	189b      	adds	r3, r3, r2
 8002324:	66bb      	str	r3, [r7, #104]	; 0x68
 8002326:	464b      	mov	r3, r9
 8002328:	460a      	mov	r2, r1
 800232a:	eb42 0303 	adc.w	r3, r2, r3
 800232e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	663b      	str	r3, [r7, #96]	; 0x60
 800233a:	667a      	str	r2, [r7, #100]	; 0x64
 800233c:	f04f 0200 	mov.w	r2, #0
 8002340:	f04f 0300 	mov.w	r3, #0
 8002344:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002348:	4649      	mov	r1, r9
 800234a:	008b      	lsls	r3, r1, #2
 800234c:	4641      	mov	r1, r8
 800234e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002352:	4641      	mov	r1, r8
 8002354:	008a      	lsls	r2, r1, #2
 8002356:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800235a:	f7fd ff91 	bl	8000280 <__aeabi_uldivmod>
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	4b0d      	ldr	r3, [pc, #52]	; (8002398 <UART_SetConfig+0x4e4>)
 8002364:	fba3 1302 	umull	r1, r3, r3, r2
 8002368:	095b      	lsrs	r3, r3, #5
 800236a:	2164      	movs	r1, #100	; 0x64
 800236c:	fb01 f303 	mul.w	r3, r1, r3
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	011b      	lsls	r3, r3, #4
 8002374:	3332      	adds	r3, #50	; 0x32
 8002376:	4a08      	ldr	r2, [pc, #32]	; (8002398 <UART_SetConfig+0x4e4>)
 8002378:	fba2 2303 	umull	r2, r3, r2, r3
 800237c:	095b      	lsrs	r3, r3, #5
 800237e:	f003 020f 	and.w	r2, r3, #15
 8002382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4422      	add	r2, r4
 800238a:	609a      	str	r2, [r3, #8]
}
 800238c:	bf00      	nop
 800238e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002392:	46bd      	mov	sp, r7
 8002394:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002398:	51eb851f 	.word	0x51eb851f

0800239c <__NVIC_SetPriority>:
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	6039      	str	r1, [r7, #0]
 80023a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	db0a      	blt.n	80023c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	490c      	ldr	r1, [pc, #48]	; (80023e8 <__NVIC_SetPriority+0x4c>)
 80023b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ba:	0112      	lsls	r2, r2, #4
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	440b      	add	r3, r1
 80023c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80023c4:	e00a      	b.n	80023dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	4908      	ldr	r1, [pc, #32]	; (80023ec <__NVIC_SetPriority+0x50>)
 80023cc:	79fb      	ldrb	r3, [r7, #7]
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	3b04      	subs	r3, #4
 80023d4:	0112      	lsls	r2, r2, #4
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	440b      	add	r3, r1
 80023da:	761a      	strb	r2, [r3, #24]
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	e000e100 	.word	0xe000e100
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80023f4:	2100      	movs	r1, #0
 80023f6:	f06f 0004 	mvn.w	r0, #4
 80023fa:	f7ff ffcf 	bl	800239c <__NVIC_SetPriority>
#endif
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800240a:	f3ef 8305 	mrs	r3, IPSR
 800240e:	603b      	str	r3, [r7, #0]
  return(result);
 8002410:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002416:	f06f 0305 	mvn.w	r3, #5
 800241a:	607b      	str	r3, [r7, #4]
 800241c:	e00c      	b.n	8002438 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800241e:	4b0a      	ldr	r3, [pc, #40]	; (8002448 <osKernelInitialize+0x44>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d105      	bne.n	8002432 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002426:	4b08      	ldr	r3, [pc, #32]	; (8002448 <osKernelInitialize+0x44>)
 8002428:	2201      	movs	r2, #1
 800242a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800242c:	2300      	movs	r3, #0
 800242e:	607b      	str	r3, [r7, #4]
 8002430:	e002      	b.n	8002438 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002432:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002436:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002438:	687b      	ldr	r3, [r7, #4]
}
 800243a:	4618      	mov	r0, r3
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	200000f0 	.word	0x200000f0

0800244c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002452:	f3ef 8305 	mrs	r3, IPSR
 8002456:	603b      	str	r3, [r7, #0]
  return(result);
 8002458:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <osKernelStart+0x1a>
    stat = osErrorISR;
 800245e:	f06f 0305 	mvn.w	r3, #5
 8002462:	607b      	str	r3, [r7, #4]
 8002464:	e010      	b.n	8002488 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002466:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <osKernelStart+0x48>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d109      	bne.n	8002482 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800246e:	f7ff ffbf 	bl	80023f0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002472:	4b08      	ldr	r3, [pc, #32]	; (8002494 <osKernelStart+0x48>)
 8002474:	2202      	movs	r2, #2
 8002476:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002478:	f001 fa66 	bl	8003948 <vTaskStartScheduler>
      stat = osOK;
 800247c:	2300      	movs	r3, #0
 800247e:	607b      	str	r3, [r7, #4]
 8002480:	e002      	b.n	8002488 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002482:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002486:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002488:	687b      	ldr	r3, [r7, #4]
}
 800248a:	4618      	mov	r0, r3
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	200000f0 	.word	0x200000f0

08002498 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002498:	b580      	push	{r7, lr}
 800249a:	b08e      	sub	sp, #56	; 0x38
 800249c:	af04      	add	r7, sp, #16
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024a8:	f3ef 8305 	mrs	r3, IPSR
 80024ac:	617b      	str	r3, [r7, #20]
  return(result);
 80024ae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d17e      	bne.n	80025b2 <osThreadNew+0x11a>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d07b      	beq.n	80025b2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80024be:	2318      	movs	r3, #24
 80024c0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80024c2:	2300      	movs	r3, #0
 80024c4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80024c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024ca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d045      	beq.n	800255e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d002      	beq.n	80024e0 <osThreadNew+0x48>
        name = attr->name;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d002      	beq.n	80024ee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d008      	beq.n	8002506 <osThreadNew+0x6e>
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	2b38      	cmp	r3, #56	; 0x38
 80024f8:	d805      	bhi.n	8002506 <osThreadNew+0x6e>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <osThreadNew+0x72>
        return (NULL);
 8002506:	2300      	movs	r3, #0
 8002508:	e054      	b.n	80025b4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	089b      	lsrs	r3, r3, #2
 8002518:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00e      	beq.n	8002540 <osThreadNew+0xa8>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	2ba7      	cmp	r3, #167	; 0xa7
 8002528:	d90a      	bls.n	8002540 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800252e:	2b00      	cmp	r3, #0
 8002530:	d006      	beq.n	8002540 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d002      	beq.n	8002540 <osThreadNew+0xa8>
        mem = 1;
 800253a:	2301      	movs	r3, #1
 800253c:	61bb      	str	r3, [r7, #24]
 800253e:	e010      	b.n	8002562 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10c      	bne.n	8002562 <osThreadNew+0xca>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d108      	bne.n	8002562 <osThreadNew+0xca>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d104      	bne.n	8002562 <osThreadNew+0xca>
          mem = 0;
 8002558:	2300      	movs	r3, #0
 800255a:	61bb      	str	r3, [r7, #24]
 800255c:	e001      	b.n	8002562 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800255e:	2300      	movs	r3, #0
 8002560:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d110      	bne.n	800258a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002570:	9202      	str	r2, [sp, #8]
 8002572:	9301      	str	r3, [sp, #4]
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	6a3a      	ldr	r2, [r7, #32]
 800257c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f000 fff6 	bl	8003570 <xTaskCreateStatic>
 8002584:	4603      	mov	r3, r0
 8002586:	613b      	str	r3, [r7, #16]
 8002588:	e013      	b.n	80025b2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d110      	bne.n	80025b2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002590:	6a3b      	ldr	r3, [r7, #32]
 8002592:	b29a      	uxth	r2, r3
 8002594:	f107 0310 	add.w	r3, r7, #16
 8002598:	9301      	str	r3, [sp, #4]
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f001 f841 	bl	800362a <xTaskCreate>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d001      	beq.n	80025b2 <osThreadNew+0x11a>
            hTask = NULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80025b2:	693b      	ldr	r3, [r7, #16]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3728      	adds	r7, #40	; 0x28
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025c4:	f3ef 8305 	mrs	r3, IPSR
 80025c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80025ca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <osDelay+0x1c>
    stat = osErrorISR;
 80025d0:	f06f 0305 	mvn.w	r3, #5
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	e007      	b.n	80025e8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80025d8:	2300      	movs	r3, #0
 80025da:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d002      	beq.n	80025e8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f001 f97c 	bl	80038e0 <vTaskDelay>
    }
  }

  return (stat);
 80025e8:	68fb      	ldr	r3, [r7, #12]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b08a      	sub	sp, #40	; 0x28
 80025f6:	af02      	add	r7, sp, #8
 80025f8:	60f8      	str	r0, [r7, #12]
 80025fa:	60b9      	str	r1, [r7, #8]
 80025fc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002602:	f3ef 8305 	mrs	r3, IPSR
 8002606:	613b      	str	r3, [r7, #16]
  return(result);
 8002608:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800260a:	2b00      	cmp	r3, #0
 800260c:	d15f      	bne.n	80026ce <osMessageQueueNew+0xdc>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d05c      	beq.n	80026ce <osMessageQueueNew+0xdc>
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d059      	beq.n	80026ce <osMessageQueueNew+0xdc>
    mem = -1;
 800261a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800261e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d029      	beq.n	800267a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d012      	beq.n	8002654 <osMessageQueueNew+0x62>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	2b4f      	cmp	r3, #79	; 0x4f
 8002634:	d90e      	bls.n	8002654 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00a      	beq.n	8002654 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	695a      	ldr	r2, [r3, #20]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	68b9      	ldr	r1, [r7, #8]
 8002646:	fb01 f303 	mul.w	r3, r1, r3
 800264a:	429a      	cmp	r2, r3
 800264c:	d302      	bcc.n	8002654 <osMessageQueueNew+0x62>
        mem = 1;
 800264e:	2301      	movs	r3, #1
 8002650:	61bb      	str	r3, [r7, #24]
 8002652:	e014      	b.n	800267e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d110      	bne.n	800267e <osMessageQueueNew+0x8c>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d10c      	bne.n	800267e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002668:	2b00      	cmp	r3, #0
 800266a:	d108      	bne.n	800267e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d104      	bne.n	800267e <osMessageQueueNew+0x8c>
          mem = 0;
 8002674:	2300      	movs	r3, #0
 8002676:	61bb      	str	r3, [r7, #24]
 8002678:	e001      	b.n	800267e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800267a:	2300      	movs	r3, #0
 800267c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d10b      	bne.n	800269c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691a      	ldr	r2, [r3, #16]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	2100      	movs	r1, #0
 800268e:	9100      	str	r1, [sp, #0]
 8002690:	68b9      	ldr	r1, [r7, #8]
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f000 fa2e 	bl	8002af4 <xQueueGenericCreateStatic>
 8002698:	61f8      	str	r0, [r7, #28]
 800269a:	e008      	b.n	80026ae <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d105      	bne.n	80026ae <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80026a2:	2200      	movs	r2, #0
 80026a4:	68b9      	ldr	r1, [r7, #8]
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f000 fa9c 	bl	8002be4 <xQueueGenericCreate>
 80026ac:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00c      	beq.n	80026ce <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <osMessageQueueNew+0xd0>
        name = attr->name;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	617b      	str	r3, [r7, #20]
 80026c0:	e001      	b.n	80026c6 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80026c2:	2300      	movs	r3, #0
 80026c4:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80026c6:	6979      	ldr	r1, [r7, #20]
 80026c8:	69f8      	ldr	r0, [r7, #28]
 80026ca:	f000 fef3 	bl	80034b4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80026ce:	69fb      	ldr	r3, [r7, #28]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3720      	adds	r7, #32
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80026d8:	b580      	push	{r7, lr}
 80026da:	b088      	sub	sp, #32
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	603b      	str	r3, [r7, #0]
 80026e4:	4613      	mov	r3, r2
 80026e6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80026ec:	2300      	movs	r3, #0
 80026ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026f0:	f3ef 8305 	mrs	r3, IPSR
 80026f4:	617b      	str	r3, [r7, #20]
  return(result);
 80026f6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d028      	beq.n	800274e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d005      	beq.n	800270e <osMessageQueuePut+0x36>
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d002      	beq.n	800270e <osMessageQueuePut+0x36>
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800270e:	f06f 0303 	mvn.w	r3, #3
 8002712:	61fb      	str	r3, [r7, #28]
 8002714:	e038      	b.n	8002788 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8002716:	2300      	movs	r3, #0
 8002718:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800271a:	f107 0210 	add.w	r2, r7, #16
 800271e:	2300      	movs	r3, #0
 8002720:	68b9      	ldr	r1, [r7, #8]
 8002722:	69b8      	ldr	r0, [r7, #24]
 8002724:	f000 fbba 	bl	8002e9c <xQueueGenericSendFromISR>
 8002728:	4603      	mov	r3, r0
 800272a:	2b01      	cmp	r3, #1
 800272c:	d003      	beq.n	8002736 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800272e:	f06f 0302 	mvn.w	r3, #2
 8002732:	61fb      	str	r3, [r7, #28]
 8002734:	e028      	b.n	8002788 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d025      	beq.n	8002788 <osMessageQueuePut+0xb0>
 800273c:	4b15      	ldr	r3, [pc, #84]	; (8002794 <osMessageQueuePut+0xbc>)
 800273e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	f3bf 8f4f 	dsb	sy
 8002748:	f3bf 8f6f 	isb	sy
 800274c:	e01c      	b.n	8002788 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d002      	beq.n	800275a <osMessageQueuePut+0x82>
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d103      	bne.n	8002762 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800275a:	f06f 0303 	mvn.w	r3, #3
 800275e:	61fb      	str	r3, [r7, #28]
 8002760:	e012      	b.n	8002788 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002762:	2300      	movs	r3, #0
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	68b9      	ldr	r1, [r7, #8]
 8002768:	69b8      	ldr	r0, [r7, #24]
 800276a:	f000 fa99 	bl	8002ca0 <xQueueGenericSend>
 800276e:	4603      	mov	r3, r0
 8002770:	2b01      	cmp	r3, #1
 8002772:	d009      	beq.n	8002788 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800277a:	f06f 0301 	mvn.w	r3, #1
 800277e:	61fb      	str	r3, [r7, #28]
 8002780:	e002      	b.n	8002788 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8002782:	f06f 0302 	mvn.w	r3, #2
 8002786:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8002788:	69fb      	ldr	r3, [r7, #28]
}
 800278a:	4618      	mov	r0, r3
 800278c:	3720      	adds	r7, #32
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	e000ed04 	.word	0xe000ed04

08002798 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8002798:	b580      	push	{r7, lr}
 800279a:	b088      	sub	sp, #32
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
 80027a4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027ae:	f3ef 8305 	mrs	r3, IPSR
 80027b2:	617b      	str	r3, [r7, #20]
  return(result);
 80027b4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d028      	beq.n	800280c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d005      	beq.n	80027cc <osMessageQueueGet+0x34>
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d002      	beq.n	80027cc <osMessageQueueGet+0x34>
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80027cc:	f06f 0303 	mvn.w	r3, #3
 80027d0:	61fb      	str	r3, [r7, #28]
 80027d2:	e037      	b.n	8002844 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80027d4:	2300      	movs	r3, #0
 80027d6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80027d8:	f107 0310 	add.w	r3, r7, #16
 80027dc:	461a      	mov	r2, r3
 80027de:	68b9      	ldr	r1, [r7, #8]
 80027e0:	69b8      	ldr	r0, [r7, #24]
 80027e2:	f000 fcd7 	bl	8003194 <xQueueReceiveFromISR>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d003      	beq.n	80027f4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80027ec:	f06f 0302 	mvn.w	r3, #2
 80027f0:	61fb      	str	r3, [r7, #28]
 80027f2:	e027      	b.n	8002844 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d024      	beq.n	8002844 <osMessageQueueGet+0xac>
 80027fa:	4b15      	ldr	r3, [pc, #84]	; (8002850 <osMessageQueueGet+0xb8>)
 80027fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002800:	601a      	str	r2, [r3, #0]
 8002802:	f3bf 8f4f 	dsb	sy
 8002806:	f3bf 8f6f 	isb	sy
 800280a:	e01b      	b.n	8002844 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d002      	beq.n	8002818 <osMessageQueueGet+0x80>
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d103      	bne.n	8002820 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8002818:	f06f 0303 	mvn.w	r3, #3
 800281c:	61fb      	str	r3, [r7, #28]
 800281e:	e011      	b.n	8002844 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	68b9      	ldr	r1, [r7, #8]
 8002824:	69b8      	ldr	r0, [r7, #24]
 8002826:	f000 fbd5 	bl	8002fd4 <xQueueReceive>
 800282a:	4603      	mov	r3, r0
 800282c:	2b01      	cmp	r3, #1
 800282e:	d009      	beq.n	8002844 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8002836:	f06f 0301 	mvn.w	r3, #1
 800283a:	61fb      	str	r3, [r7, #28]
 800283c:	e002      	b.n	8002844 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800283e:	f06f 0302 	mvn.w	r3, #2
 8002842:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8002844:	69fb      	ldr	r3, [r7, #28]
}
 8002846:	4618      	mov	r0, r3
 8002848:	3720      	adds	r7, #32
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	e000ed04 	.word	0xe000ed04

08002854 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	4a07      	ldr	r2, [pc, #28]	; (8002880 <vApplicationGetIdleTaskMemory+0x2c>)
 8002864:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	4a06      	ldr	r2, [pc, #24]	; (8002884 <vApplicationGetIdleTaskMemory+0x30>)
 800286a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2280      	movs	r2, #128	; 0x80
 8002870:	601a      	str	r2, [r3, #0]
}
 8002872:	bf00      	nop
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	200000f4 	.word	0x200000f4
 8002884:	2000019c 	.word	0x2000019c

08002888 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4a07      	ldr	r2, [pc, #28]	; (80028b4 <vApplicationGetTimerTaskMemory+0x2c>)
 8002898:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	4a06      	ldr	r2, [pc, #24]	; (80028b8 <vApplicationGetTimerTaskMemory+0x30>)
 800289e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028a6:	601a      	str	r2, [r3, #0]
}
 80028a8:	bf00      	nop
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	2000039c 	.word	0x2000039c
 80028b8:	20000444 	.word	0x20000444

080028bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f103 0208 	add.w	r2, r3, #8
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f103 0208 	add.w	r2, r3, #8
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f103 0208 	add.w	r2, r3, #8
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002916:	b480      	push	{r7}
 8002918:	b085      	sub	sp, #20
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
 800291e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	1c5a      	adds	r2, r3, #1
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	601a      	str	r2, [r3, #0]
}
 8002952:	bf00      	nop
 8002954:	3714      	adds	r7, #20
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800295e:	b480      	push	{r7}
 8002960:	b085      	sub	sp, #20
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
 8002966:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002974:	d103      	bne.n	800297e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	e00c      	b.n	8002998 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	3308      	adds	r3, #8
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	e002      	b.n	800298c <vListInsert+0x2e>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	429a      	cmp	r2, r3
 8002996:	d2f6      	bcs.n	8002986 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	1c5a      	adds	r2, r3, #1
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	601a      	str	r2, [r3, #0]
}
 80029c4:	bf00      	nop
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6892      	ldr	r2, [r2, #8]
 80029e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	6852      	ldr	r2, [r2, #4]
 80029f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d103      	bne.n	8002a04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	1e5a      	subs	r2, r3, #1
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10a      	bne.n	8002a4e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a3c:	f383 8811 	msr	BASEPRI, r3
 8002a40:	f3bf 8f6f 	isb	sy
 8002a44:	f3bf 8f4f 	dsb	sy
 8002a48:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002a4a:	bf00      	nop
 8002a4c:	e7fe      	b.n	8002a4c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002a4e:	f002 f931 	bl	8004cb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5a:	68f9      	ldr	r1, [r7, #12]
 8002a5c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a5e:	fb01 f303 	mul.w	r3, r1, r3
 8002a62:	441a      	add	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	68f9      	ldr	r1, [r7, #12]
 8002a82:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a84:	fb01 f303 	mul.w	r3, r1, r3
 8002a88:	441a      	add	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	22ff      	movs	r2, #255	; 0xff
 8002a92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	22ff      	movs	r2, #255	; 0xff
 8002a9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d114      	bne.n	8002ace <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d01a      	beq.n	8002ae2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	3310      	adds	r3, #16
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f001 f9e3 	bl	8003e7c <xTaskRemoveFromEventList>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d012      	beq.n	8002ae2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002abc:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <xQueueGenericReset+0xcc>)
 8002abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	f3bf 8f4f 	dsb	sy
 8002ac8:	f3bf 8f6f 	isb	sy
 8002acc:	e009      	b.n	8002ae2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	3310      	adds	r3, #16
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff fef2 	bl	80028bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	3324      	adds	r3, #36	; 0x24
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff feed 	bl	80028bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002ae2:	f002 f917 	bl	8004d14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002ae6:	2301      	movs	r3, #1
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	e000ed04 	.word	0xe000ed04

08002af4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08e      	sub	sp, #56	; 0x38
 8002af8:	af02      	add	r7, sp, #8
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
 8002b00:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10a      	bne.n	8002b1e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0c:	f383 8811 	msr	BASEPRI, r3
 8002b10:	f3bf 8f6f 	isb	sy
 8002b14:	f3bf 8f4f 	dsb	sy
 8002b18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b1a:	bf00      	nop
 8002b1c:	e7fe      	b.n	8002b1c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d10a      	bne.n	8002b3a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b28:	f383 8811 	msr	BASEPRI, r3
 8002b2c:	f3bf 8f6f 	isb	sy
 8002b30:	f3bf 8f4f 	dsb	sy
 8002b34:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b36:	bf00      	nop
 8002b38:	e7fe      	b.n	8002b38 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d002      	beq.n	8002b46 <xQueueGenericCreateStatic+0x52>
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <xQueueGenericCreateStatic+0x56>
 8002b46:	2301      	movs	r3, #1
 8002b48:	e000      	b.n	8002b4c <xQueueGenericCreateStatic+0x58>
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10a      	bne.n	8002b66 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b54:	f383 8811 	msr	BASEPRI, r3
 8002b58:	f3bf 8f6f 	isb	sy
 8002b5c:	f3bf 8f4f 	dsb	sy
 8002b60:	623b      	str	r3, [r7, #32]
}
 8002b62:	bf00      	nop
 8002b64:	e7fe      	b.n	8002b64 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d102      	bne.n	8002b72 <xQueueGenericCreateStatic+0x7e>
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <xQueueGenericCreateStatic+0x82>
 8002b72:	2301      	movs	r3, #1
 8002b74:	e000      	b.n	8002b78 <xQueueGenericCreateStatic+0x84>
 8002b76:	2300      	movs	r3, #0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10a      	bne.n	8002b92 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b80:	f383 8811 	msr	BASEPRI, r3
 8002b84:	f3bf 8f6f 	isb	sy
 8002b88:	f3bf 8f4f 	dsb	sy
 8002b8c:	61fb      	str	r3, [r7, #28]
}
 8002b8e:	bf00      	nop
 8002b90:	e7fe      	b.n	8002b90 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002b92:	2350      	movs	r3, #80	; 0x50
 8002b94:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	2b50      	cmp	r3, #80	; 0x50
 8002b9a:	d00a      	beq.n	8002bb2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba0:	f383 8811 	msr	BASEPRI, r3
 8002ba4:	f3bf 8f6f 	isb	sy
 8002ba8:	f3bf 8f4f 	dsb	sy
 8002bac:	61bb      	str	r3, [r7, #24]
}
 8002bae:	bf00      	nop
 8002bb0:	e7fe      	b.n	8002bb0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002bb2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00d      	beq.n	8002bda <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002bc6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	68b9      	ldr	r1, [r7, #8]
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f000 f83f 	bl	8002c58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3730      	adds	r7, #48	; 0x30
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b08a      	sub	sp, #40	; 0x28
 8002be8:	af02      	add	r7, sp, #8
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10a      	bne.n	8002c0e <xQueueGenericCreate+0x2a>
	__asm volatile
 8002bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfc:	f383 8811 	msr	BASEPRI, r3
 8002c00:	f3bf 8f6f 	isb	sy
 8002c04:	f3bf 8f4f 	dsb	sy
 8002c08:	613b      	str	r3, [r7, #16]
}
 8002c0a:	bf00      	nop
 8002c0c:	e7fe      	b.n	8002c0c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	68ba      	ldr	r2, [r7, #8]
 8002c12:	fb02 f303 	mul.w	r3, r2, r3
 8002c16:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	3350      	adds	r3, #80	; 0x50
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f002 f96b 	bl	8004ef8 <pvPortMalloc>
 8002c22:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d011      	beq.n	8002c4e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	3350      	adds	r3, #80	; 0x50
 8002c32:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c3c:	79fa      	ldrb	r2, [r7, #7]
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	4613      	mov	r3, r2
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	68b9      	ldr	r1, [r7, #8]
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f000 f805 	bl	8002c58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002c4e:	69bb      	ldr	r3, [r7, #24]
	}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3720      	adds	r7, #32
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
 8002c64:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d103      	bne.n	8002c74 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	e002      	b.n	8002c7a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002c86:	2101      	movs	r1, #1
 8002c88:	69b8      	ldr	r0, [r7, #24]
 8002c8a:	f7ff fecb 	bl	8002a24 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	78fa      	ldrb	r2, [r7, #3]
 8002c92:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002c96:	bf00      	nop
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
	...

08002ca0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08e      	sub	sp, #56	; 0x38
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
 8002cac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10a      	bne.n	8002cd2 <xQueueGenericSend+0x32>
	__asm volatile
 8002cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc0:	f383 8811 	msr	BASEPRI, r3
 8002cc4:	f3bf 8f6f 	isb	sy
 8002cc8:	f3bf 8f4f 	dsb	sy
 8002ccc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002cce:	bf00      	nop
 8002cd0:	e7fe      	b.n	8002cd0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d103      	bne.n	8002ce0 <xQueueGenericSend+0x40>
 8002cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <xQueueGenericSend+0x44>
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e000      	b.n	8002ce6 <xQueueGenericSend+0x46>
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10a      	bne.n	8002d00 <xQueueGenericSend+0x60>
	__asm volatile
 8002cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cee:	f383 8811 	msr	BASEPRI, r3
 8002cf2:	f3bf 8f6f 	isb	sy
 8002cf6:	f3bf 8f4f 	dsb	sy
 8002cfa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002cfc:	bf00      	nop
 8002cfe:	e7fe      	b.n	8002cfe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d103      	bne.n	8002d0e <xQueueGenericSend+0x6e>
 8002d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d101      	bne.n	8002d12 <xQueueGenericSend+0x72>
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <xQueueGenericSend+0x74>
 8002d12:	2300      	movs	r3, #0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10a      	bne.n	8002d2e <xQueueGenericSend+0x8e>
	__asm volatile
 8002d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d1c:	f383 8811 	msr	BASEPRI, r3
 8002d20:	f3bf 8f6f 	isb	sy
 8002d24:	f3bf 8f4f 	dsb	sy
 8002d28:	623b      	str	r3, [r7, #32]
}
 8002d2a:	bf00      	nop
 8002d2c:	e7fe      	b.n	8002d2c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d2e:	f001 fa67 	bl	8004200 <xTaskGetSchedulerState>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d102      	bne.n	8002d3e <xQueueGenericSend+0x9e>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <xQueueGenericSend+0xa2>
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e000      	b.n	8002d44 <xQueueGenericSend+0xa4>
 8002d42:	2300      	movs	r3, #0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10a      	bne.n	8002d5e <xQueueGenericSend+0xbe>
	__asm volatile
 8002d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4c:	f383 8811 	msr	BASEPRI, r3
 8002d50:	f3bf 8f6f 	isb	sy
 8002d54:	f3bf 8f4f 	dsb	sy
 8002d58:	61fb      	str	r3, [r7, #28]
}
 8002d5a:	bf00      	nop
 8002d5c:	e7fe      	b.n	8002d5c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d5e:	f001 ffa9 	bl	8004cb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d302      	bcc.n	8002d74 <xQueueGenericSend+0xd4>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d129      	bne.n	8002dc8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	68b9      	ldr	r1, [r7, #8]
 8002d78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d7a:	f000 fa8b 	bl	8003294 <prvCopyDataToQueue>
 8002d7e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d010      	beq.n	8002daa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8a:	3324      	adds	r3, #36	; 0x24
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f001 f875 	bl	8003e7c <xTaskRemoveFromEventList>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d013      	beq.n	8002dc0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002d98:	4b3f      	ldr	r3, [pc, #252]	; (8002e98 <xQueueGenericSend+0x1f8>)
 8002d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	f3bf 8f4f 	dsb	sy
 8002da4:	f3bf 8f6f 	isb	sy
 8002da8:	e00a      	b.n	8002dc0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d007      	beq.n	8002dc0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002db0:	4b39      	ldr	r3, [pc, #228]	; (8002e98 <xQueueGenericSend+0x1f8>)
 8002db2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	f3bf 8f4f 	dsb	sy
 8002dbc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002dc0:	f001 ffa8 	bl	8004d14 <vPortExitCritical>
				return pdPASS;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e063      	b.n	8002e90 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d103      	bne.n	8002dd6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002dce:	f001 ffa1 	bl	8004d14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	e05c      	b.n	8002e90 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d106      	bne.n	8002dea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ddc:	f107 0314 	add.w	r3, r7, #20
 8002de0:	4618      	mov	r0, r3
 8002de2:	f001 f8af 	bl	8003f44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002de6:	2301      	movs	r3, #1
 8002de8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002dea:	f001 ff93 	bl	8004d14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002dee:	f000 fe1b 	bl	8003a28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002df2:	f001 ff5f 	bl	8004cb4 <vPortEnterCritical>
 8002df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002dfc:	b25b      	sxtb	r3, r3
 8002dfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e02:	d103      	bne.n	8002e0c <xQueueGenericSend+0x16c>
 8002e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e12:	b25b      	sxtb	r3, r3
 8002e14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e18:	d103      	bne.n	8002e22 <xQueueGenericSend+0x182>
 8002e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e22:	f001 ff77 	bl	8004d14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e26:	1d3a      	adds	r2, r7, #4
 8002e28:	f107 0314 	add.w	r3, r7, #20
 8002e2c:	4611      	mov	r1, r2
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f001 f89e 	bl	8003f70 <xTaskCheckForTimeOut>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d124      	bne.n	8002e84 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002e3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e3c:	f000 fb22 	bl	8003484 <prvIsQueueFull>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d018      	beq.n	8002e78 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e48:	3310      	adds	r3, #16
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	4611      	mov	r1, r2
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f000 ffc4 	bl	8003ddc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002e54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e56:	f000 faad 	bl	80033b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002e5a:	f000 fdf3 	bl	8003a44 <xTaskResumeAll>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f47f af7c 	bne.w	8002d5e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002e66:	4b0c      	ldr	r3, [pc, #48]	; (8002e98 <xQueueGenericSend+0x1f8>)
 8002e68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	f3bf 8f4f 	dsb	sy
 8002e72:	f3bf 8f6f 	isb	sy
 8002e76:	e772      	b.n	8002d5e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002e78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e7a:	f000 fa9b 	bl	80033b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e7e:	f000 fde1 	bl	8003a44 <xTaskResumeAll>
 8002e82:	e76c      	b.n	8002d5e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002e84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e86:	f000 fa95 	bl	80033b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e8a:	f000 fddb 	bl	8003a44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002e8e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3738      	adds	r7, #56	; 0x38
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	e000ed04 	.word	0xe000ed04

08002e9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b090      	sub	sp, #64	; 0x40
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
 8002ea8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10a      	bne.n	8002eca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb8:	f383 8811 	msr	BASEPRI, r3
 8002ebc:	f3bf 8f6f 	isb	sy
 8002ec0:	f3bf 8f4f 	dsb	sy
 8002ec4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002ec6:	bf00      	nop
 8002ec8:	e7fe      	b.n	8002ec8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d103      	bne.n	8002ed8 <xQueueGenericSendFromISR+0x3c>
 8002ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <xQueueGenericSendFromISR+0x40>
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e000      	b.n	8002ede <xQueueGenericSendFromISR+0x42>
 8002edc:	2300      	movs	r3, #0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10a      	bne.n	8002ef8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee6:	f383 8811 	msr	BASEPRI, r3
 8002eea:	f3bf 8f6f 	isb	sy
 8002eee:	f3bf 8f4f 	dsb	sy
 8002ef2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002ef4:	bf00      	nop
 8002ef6:	e7fe      	b.n	8002ef6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d103      	bne.n	8002f06 <xQueueGenericSendFromISR+0x6a>
 8002efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d101      	bne.n	8002f0a <xQueueGenericSendFromISR+0x6e>
 8002f06:	2301      	movs	r3, #1
 8002f08:	e000      	b.n	8002f0c <xQueueGenericSendFromISR+0x70>
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10a      	bne.n	8002f26 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f14:	f383 8811 	msr	BASEPRI, r3
 8002f18:	f3bf 8f6f 	isb	sy
 8002f1c:	f3bf 8f4f 	dsb	sy
 8002f20:	623b      	str	r3, [r7, #32]
}
 8002f22:	bf00      	nop
 8002f24:	e7fe      	b.n	8002f24 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f26:	f001 ffa7 	bl	8004e78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002f2a:	f3ef 8211 	mrs	r2, BASEPRI
 8002f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f32:	f383 8811 	msr	BASEPRI, r3
 8002f36:	f3bf 8f6f 	isb	sy
 8002f3a:	f3bf 8f4f 	dsb	sy
 8002f3e:	61fa      	str	r2, [r7, #28]
 8002f40:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002f42:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f44:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d302      	bcc.n	8002f58 <xQueueGenericSendFromISR+0xbc>
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d12f      	bne.n	8002fb8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f66:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	68b9      	ldr	r1, [r7, #8]
 8002f6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002f6e:	f000 f991 	bl	8003294 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002f72:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002f76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f7a:	d112      	bne.n	8002fa2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d016      	beq.n	8002fb2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f86:	3324      	adds	r3, #36	; 0x24
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f000 ff77 	bl	8003e7c <xTaskRemoveFromEventList>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00e      	beq.n	8002fb2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00b      	beq.n	8002fb2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	e007      	b.n	8002fb2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002fa2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	b25a      	sxtb	r2, r3
 8002fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002fb6:	e001      	b.n	8002fbc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fbe:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002fc6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3740      	adds	r7, #64	; 0x40
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
	...

08002fd4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b08c      	sub	sp, #48	; 0x30
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10a      	bne.n	8003004 <xQueueReceive+0x30>
	__asm volatile
 8002fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff2:	f383 8811 	msr	BASEPRI, r3
 8002ff6:	f3bf 8f6f 	isb	sy
 8002ffa:	f3bf 8f4f 	dsb	sy
 8002ffe:	623b      	str	r3, [r7, #32]
}
 8003000:	bf00      	nop
 8003002:	e7fe      	b.n	8003002 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d103      	bne.n	8003012 <xQueueReceive+0x3e>
 800300a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <xQueueReceive+0x42>
 8003012:	2301      	movs	r3, #1
 8003014:	e000      	b.n	8003018 <xQueueReceive+0x44>
 8003016:	2300      	movs	r3, #0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10a      	bne.n	8003032 <xQueueReceive+0x5e>
	__asm volatile
 800301c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003020:	f383 8811 	msr	BASEPRI, r3
 8003024:	f3bf 8f6f 	isb	sy
 8003028:	f3bf 8f4f 	dsb	sy
 800302c:	61fb      	str	r3, [r7, #28]
}
 800302e:	bf00      	nop
 8003030:	e7fe      	b.n	8003030 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003032:	f001 f8e5 	bl	8004200 <xTaskGetSchedulerState>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d102      	bne.n	8003042 <xQueueReceive+0x6e>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <xQueueReceive+0x72>
 8003042:	2301      	movs	r3, #1
 8003044:	e000      	b.n	8003048 <xQueueReceive+0x74>
 8003046:	2300      	movs	r3, #0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10a      	bne.n	8003062 <xQueueReceive+0x8e>
	__asm volatile
 800304c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003050:	f383 8811 	msr	BASEPRI, r3
 8003054:	f3bf 8f6f 	isb	sy
 8003058:	f3bf 8f4f 	dsb	sy
 800305c:	61bb      	str	r3, [r7, #24]
}
 800305e:	bf00      	nop
 8003060:	e7fe      	b.n	8003060 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003062:	f001 fe27 	bl	8004cb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	2b00      	cmp	r3, #0
 8003070:	d01f      	beq.n	80030b2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003072:	68b9      	ldr	r1, [r7, #8]
 8003074:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003076:	f000 f977 	bl	8003368 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	1e5a      	subs	r2, r3, #1
 800307e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003080:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00f      	beq.n	80030aa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800308a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308c:	3310      	adds	r3, #16
 800308e:	4618      	mov	r0, r3
 8003090:	f000 fef4 	bl	8003e7c <xTaskRemoveFromEventList>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d007      	beq.n	80030aa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800309a:	4b3d      	ldr	r3, [pc, #244]	; (8003190 <xQueueReceive+0x1bc>)
 800309c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	f3bf 8f4f 	dsb	sy
 80030a6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80030aa:	f001 fe33 	bl	8004d14 <vPortExitCritical>
				return pdPASS;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e069      	b.n	8003186 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d103      	bne.n	80030c0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80030b8:	f001 fe2c 	bl	8004d14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80030bc:	2300      	movs	r3, #0
 80030be:	e062      	b.n	8003186 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d106      	bne.n	80030d4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030c6:	f107 0310 	add.w	r3, r7, #16
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 ff3a 	bl	8003f44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030d0:	2301      	movs	r3, #1
 80030d2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030d4:	f001 fe1e 	bl	8004d14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030d8:	f000 fca6 	bl	8003a28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030dc:	f001 fdea 	bl	8004cb4 <vPortEnterCritical>
 80030e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030e6:	b25b      	sxtb	r3, r3
 80030e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030ec:	d103      	bne.n	80030f6 <xQueueReceive+0x122>
 80030ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030fc:	b25b      	sxtb	r3, r3
 80030fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003102:	d103      	bne.n	800310c <xQueueReceive+0x138>
 8003104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003106:	2200      	movs	r2, #0
 8003108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800310c:	f001 fe02 	bl	8004d14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003110:	1d3a      	adds	r2, r7, #4
 8003112:	f107 0310 	add.w	r3, r7, #16
 8003116:	4611      	mov	r1, r2
 8003118:	4618      	mov	r0, r3
 800311a:	f000 ff29 	bl	8003f70 <xTaskCheckForTimeOut>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d123      	bne.n	800316c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003124:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003126:	f000 f997 	bl	8003458 <prvIsQueueEmpty>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d017      	beq.n	8003160 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003132:	3324      	adds	r3, #36	; 0x24
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	4611      	mov	r1, r2
 8003138:	4618      	mov	r0, r3
 800313a:	f000 fe4f 	bl	8003ddc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800313e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003140:	f000 f938 	bl	80033b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003144:	f000 fc7e 	bl	8003a44 <xTaskResumeAll>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d189      	bne.n	8003062 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800314e:	4b10      	ldr	r3, [pc, #64]	; (8003190 <xQueueReceive+0x1bc>)
 8003150:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	f3bf 8f4f 	dsb	sy
 800315a:	f3bf 8f6f 	isb	sy
 800315e:	e780      	b.n	8003062 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003160:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003162:	f000 f927 	bl	80033b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003166:	f000 fc6d 	bl	8003a44 <xTaskResumeAll>
 800316a:	e77a      	b.n	8003062 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800316c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800316e:	f000 f921 	bl	80033b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003172:	f000 fc67 	bl	8003a44 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003176:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003178:	f000 f96e 	bl	8003458 <prvIsQueueEmpty>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	f43f af6f 	beq.w	8003062 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003184:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003186:	4618      	mov	r0, r3
 8003188:	3730      	adds	r7, #48	; 0x30
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	e000ed04 	.word	0xe000ed04

08003194 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b08e      	sub	sp, #56	; 0x38
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80031a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10a      	bne.n	80031c0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80031aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ae:	f383 8811 	msr	BASEPRI, r3
 80031b2:	f3bf 8f6f 	isb	sy
 80031b6:	f3bf 8f4f 	dsb	sy
 80031ba:	623b      	str	r3, [r7, #32]
}
 80031bc:	bf00      	nop
 80031be:	e7fe      	b.n	80031be <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d103      	bne.n	80031ce <xQueueReceiveFromISR+0x3a>
 80031c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <xQueueReceiveFromISR+0x3e>
 80031ce:	2301      	movs	r3, #1
 80031d0:	e000      	b.n	80031d4 <xQueueReceiveFromISR+0x40>
 80031d2:	2300      	movs	r3, #0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10a      	bne.n	80031ee <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80031d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031dc:	f383 8811 	msr	BASEPRI, r3
 80031e0:	f3bf 8f6f 	isb	sy
 80031e4:	f3bf 8f4f 	dsb	sy
 80031e8:	61fb      	str	r3, [r7, #28]
}
 80031ea:	bf00      	nop
 80031ec:	e7fe      	b.n	80031ec <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80031ee:	f001 fe43 	bl	8004e78 <vPortValidateInterruptPriority>
	__asm volatile
 80031f2:	f3ef 8211 	mrs	r2, BASEPRI
 80031f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fa:	f383 8811 	msr	BASEPRI, r3
 80031fe:	f3bf 8f6f 	isb	sy
 8003202:	f3bf 8f4f 	dsb	sy
 8003206:	61ba      	str	r2, [r7, #24]
 8003208:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800320a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800320c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800320e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003212:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003216:	2b00      	cmp	r3, #0
 8003218:	d02f      	beq.n	800327a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800321a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003220:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003224:	68b9      	ldr	r1, [r7, #8]
 8003226:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003228:	f000 f89e 	bl	8003368 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800322c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322e:	1e5a      	subs	r2, r3, #1
 8003230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003232:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003234:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003238:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800323c:	d112      	bne.n	8003264 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800323e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d016      	beq.n	8003274 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003248:	3310      	adds	r3, #16
 800324a:	4618      	mov	r0, r3
 800324c:	f000 fe16 	bl	8003e7c <xTaskRemoveFromEventList>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00e      	beq.n	8003274 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00b      	beq.n	8003274 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	e007      	b.n	8003274 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003264:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003268:	3301      	adds	r3, #1
 800326a:	b2db      	uxtb	r3, r3
 800326c:	b25a      	sxtb	r2, r3
 800326e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003274:	2301      	movs	r3, #1
 8003276:	637b      	str	r3, [r7, #52]	; 0x34
 8003278:	e001      	b.n	800327e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800327a:	2300      	movs	r3, #0
 800327c:	637b      	str	r3, [r7, #52]	; 0x34
 800327e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003280:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	f383 8811 	msr	BASEPRI, r3
}
 8003288:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800328a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800328c:	4618      	mov	r0, r3
 800328e:	3738      	adds	r7, #56	; 0x38
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80032a0:	2300      	movs	r3, #0
 80032a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10d      	bne.n	80032ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d14d      	bne.n	8003356 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 ffbc 	bl	800423c <xTaskPriorityDisinherit>
 80032c4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	609a      	str	r2, [r3, #8]
 80032cc:	e043      	b.n	8003356 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d119      	bne.n	8003308 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6858      	ldr	r0, [r3, #4]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032dc:	461a      	mov	r2, r3
 80032de:	68b9      	ldr	r1, [r7, #8]
 80032e0:	f002 f89e 	bl	8005420 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ec:	441a      	add	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d32b      	bcc.n	8003356 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	605a      	str	r2, [r3, #4]
 8003306:	e026      	b.n	8003356 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	68d8      	ldr	r0, [r3, #12]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003310:	461a      	mov	r2, r3
 8003312:	68b9      	ldr	r1, [r7, #8]
 8003314:	f002 f884 	bl	8005420 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	68da      	ldr	r2, [r3, #12]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003320:	425b      	negs	r3, r3
 8003322:	441a      	add	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	429a      	cmp	r2, r3
 8003332:	d207      	bcs.n	8003344 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333c:	425b      	negs	r3, r3
 800333e:	441a      	add	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b02      	cmp	r3, #2
 8003348:	d105      	bne.n	8003356 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d002      	beq.n	8003356 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	3b01      	subs	r3, #1
 8003354:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1c5a      	adds	r2, r3, #1
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800335e:	697b      	ldr	r3, [r7, #20]
}
 8003360:	4618      	mov	r0, r3
 8003362:	3718      	adds	r7, #24
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	2b00      	cmp	r3, #0
 8003378:	d018      	beq.n	80033ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	441a      	add	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68da      	ldr	r2, [r3, #12]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	429a      	cmp	r2, r3
 8003392:	d303      	bcc.n	800339c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68d9      	ldr	r1, [r3, #12]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	461a      	mov	r2, r3
 80033a6:	6838      	ldr	r0, [r7, #0]
 80033a8:	f002 f83a 	bl	8005420 <memcpy>
	}
}
 80033ac:	bf00      	nop
 80033ae:	3708      	adds	r7, #8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80033bc:	f001 fc7a 	bl	8004cb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80033c8:	e011      	b.n	80033ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d012      	beq.n	80033f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	3324      	adds	r3, #36	; 0x24
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 fd50 	bl	8003e7c <xTaskRemoveFromEventList>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80033e2:	f000 fe27 	bl	8004034 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80033e6:	7bfb      	ldrb	r3, [r7, #15]
 80033e8:	3b01      	subs	r3, #1
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80033ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	dce9      	bgt.n	80033ca <prvUnlockQueue+0x16>
 80033f6:	e000      	b.n	80033fa <prvUnlockQueue+0x46>
					break;
 80033f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	22ff      	movs	r2, #255	; 0xff
 80033fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003402:	f001 fc87 	bl	8004d14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003406:	f001 fc55 	bl	8004cb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003410:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003412:	e011      	b.n	8003438 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d012      	beq.n	8003442 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3310      	adds	r3, #16
 8003420:	4618      	mov	r0, r3
 8003422:	f000 fd2b 	bl	8003e7c <xTaskRemoveFromEventList>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800342c:	f000 fe02 	bl	8004034 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003430:	7bbb      	ldrb	r3, [r7, #14]
 8003432:	3b01      	subs	r3, #1
 8003434:	b2db      	uxtb	r3, r3
 8003436:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003438:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800343c:	2b00      	cmp	r3, #0
 800343e:	dce9      	bgt.n	8003414 <prvUnlockQueue+0x60>
 8003440:	e000      	b.n	8003444 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003442:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	22ff      	movs	r2, #255	; 0xff
 8003448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800344c:	f001 fc62 	bl	8004d14 <vPortExitCritical>
}
 8003450:	bf00      	nop
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003460:	f001 fc28 	bl	8004cb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003468:	2b00      	cmp	r3, #0
 800346a:	d102      	bne.n	8003472 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800346c:	2301      	movs	r3, #1
 800346e:	60fb      	str	r3, [r7, #12]
 8003470:	e001      	b.n	8003476 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003472:	2300      	movs	r3, #0
 8003474:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003476:	f001 fc4d 	bl	8004d14 <vPortExitCritical>

	return xReturn;
 800347a:	68fb      	ldr	r3, [r7, #12]
}
 800347c:	4618      	mov	r0, r3
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800348c:	f001 fc12 	bl	8004cb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003498:	429a      	cmp	r2, r3
 800349a:	d102      	bne.n	80034a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800349c:	2301      	movs	r3, #1
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	e001      	b.n	80034a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80034a2:	2300      	movs	r3, #0
 80034a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034a6:	f001 fc35 	bl	8004d14 <vPortExitCritical>

	return xReturn;
 80034aa:	68fb      	ldr	r3, [r7, #12]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	e014      	b.n	80034ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80034c4:	4a0f      	ldr	r2, [pc, #60]	; (8003504 <vQueueAddToRegistry+0x50>)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10b      	bne.n	80034e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80034d0:	490c      	ldr	r1, [pc, #48]	; (8003504 <vQueueAddToRegistry+0x50>)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80034da:	4a0a      	ldr	r2, [pc, #40]	; (8003504 <vQueueAddToRegistry+0x50>)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	4413      	add	r3, r2
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80034e6:	e006      	b.n	80034f6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	3301      	adds	r3, #1
 80034ec:	60fb      	str	r3, [r7, #12]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2b07      	cmp	r3, #7
 80034f2:	d9e7      	bls.n	80034c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80034f4:	bf00      	nop
 80034f6:	bf00      	nop
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	20000844 	.word	0x20000844

08003508 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003518:	f001 fbcc 	bl	8004cb4 <vPortEnterCritical>
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003522:	b25b      	sxtb	r3, r3
 8003524:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003528:	d103      	bne.n	8003532 <vQueueWaitForMessageRestricted+0x2a>
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003538:	b25b      	sxtb	r3, r3
 800353a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800353e:	d103      	bne.n	8003548 <vQueueWaitForMessageRestricted+0x40>
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003548:	f001 fbe4 	bl	8004d14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003550:	2b00      	cmp	r3, #0
 8003552:	d106      	bne.n	8003562 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	3324      	adds	r3, #36	; 0x24
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	68b9      	ldr	r1, [r7, #8]
 800355c:	4618      	mov	r0, r3
 800355e:	f000 fc61 	bl	8003e24 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003562:	6978      	ldr	r0, [r7, #20]
 8003564:	f7ff ff26 	bl	80033b4 <prvUnlockQueue>
	}
 8003568:	bf00      	nop
 800356a:	3718      	adds	r7, #24
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003570:	b580      	push	{r7, lr}
 8003572:	b08e      	sub	sp, #56	; 0x38
 8003574:	af04      	add	r7, sp, #16
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
 800357c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800357e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10a      	bne.n	800359a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003588:	f383 8811 	msr	BASEPRI, r3
 800358c:	f3bf 8f6f 	isb	sy
 8003590:	f3bf 8f4f 	dsb	sy
 8003594:	623b      	str	r3, [r7, #32]
}
 8003596:	bf00      	nop
 8003598:	e7fe      	b.n	8003598 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800359a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10a      	bne.n	80035b6 <xTaskCreateStatic+0x46>
	__asm volatile
 80035a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a4:	f383 8811 	msr	BASEPRI, r3
 80035a8:	f3bf 8f6f 	isb	sy
 80035ac:	f3bf 8f4f 	dsb	sy
 80035b0:	61fb      	str	r3, [r7, #28]
}
 80035b2:	bf00      	nop
 80035b4:	e7fe      	b.n	80035b4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80035b6:	23a8      	movs	r3, #168	; 0xa8
 80035b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	2ba8      	cmp	r3, #168	; 0xa8
 80035be:	d00a      	beq.n	80035d6 <xTaskCreateStatic+0x66>
	__asm volatile
 80035c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c4:	f383 8811 	msr	BASEPRI, r3
 80035c8:	f3bf 8f6f 	isb	sy
 80035cc:	f3bf 8f4f 	dsb	sy
 80035d0:	61bb      	str	r3, [r7, #24]
}
 80035d2:	bf00      	nop
 80035d4:	e7fe      	b.n	80035d4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80035d6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80035d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d01e      	beq.n	800361c <xTaskCreateStatic+0xac>
 80035de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d01b      	beq.n	800361c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80035e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80035e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035ec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	2202      	movs	r2, #2
 80035f2:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80035f6:	2300      	movs	r3, #0
 80035f8:	9303      	str	r3, [sp, #12]
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	9302      	str	r3, [sp, #8]
 80035fe:	f107 0314 	add.w	r3, r7, #20
 8003602:	9301      	str	r3, [sp, #4]
 8003604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	68b9      	ldr	r1, [r7, #8]
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f000 f850 	bl	80036b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003614:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003616:	f000 f8f3 	bl	8003800 <prvAddNewTaskToReadyList>
 800361a:	e001      	b.n	8003620 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800361c:	2300      	movs	r3, #0
 800361e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003620:	697b      	ldr	r3, [r7, #20]
	}
 8003622:	4618      	mov	r0, r3
 8003624:	3728      	adds	r7, #40	; 0x28
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800362a:	b580      	push	{r7, lr}
 800362c:	b08c      	sub	sp, #48	; 0x30
 800362e:	af04      	add	r7, sp, #16
 8003630:	60f8      	str	r0, [r7, #12]
 8003632:	60b9      	str	r1, [r7, #8]
 8003634:	603b      	str	r3, [r7, #0]
 8003636:	4613      	mov	r3, r2
 8003638:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800363a:	88fb      	ldrh	r3, [r7, #6]
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4618      	mov	r0, r3
 8003640:	f001 fc5a 	bl	8004ef8 <pvPortMalloc>
 8003644:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00e      	beq.n	800366a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800364c:	20a8      	movs	r0, #168	; 0xa8
 800364e:	f001 fc53 	bl	8004ef8 <pvPortMalloc>
 8003652:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	631a      	str	r2, [r3, #48]	; 0x30
 8003660:	e005      	b.n	800366e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003662:	6978      	ldr	r0, [r7, #20]
 8003664:	f001 fd14 	bl	8005090 <vPortFree>
 8003668:	e001      	b.n	800366e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800366a:	2300      	movs	r3, #0
 800366c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d017      	beq.n	80036a4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800367c:	88fa      	ldrh	r2, [r7, #6]
 800367e:	2300      	movs	r3, #0
 8003680:	9303      	str	r3, [sp, #12]
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	9302      	str	r3, [sp, #8]
 8003686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003688:	9301      	str	r3, [sp, #4]
 800368a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	68b9      	ldr	r1, [r7, #8]
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f000 f80e 	bl	80036b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003698:	69f8      	ldr	r0, [r7, #28]
 800369a:	f000 f8b1 	bl	8003800 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800369e:	2301      	movs	r3, #1
 80036a0:	61bb      	str	r3, [r7, #24]
 80036a2:	e002      	b.n	80036aa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80036a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80036aa:	69bb      	ldr	r3, [r7, #24]
	}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3720      	adds	r7, #32
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b088      	sub	sp, #32
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
 80036c0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80036c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	461a      	mov	r2, r3
 80036cc:	21a5      	movs	r1, #165	; 0xa5
 80036ce:	f001 fe1d 	bl	800530c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80036d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80036dc:	3b01      	subs	r3, #1
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	f023 0307 	bic.w	r3, r3, #7
 80036ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	f003 0307 	and.w	r3, r3, #7
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00a      	beq.n	800370c <prvInitialiseNewTask+0x58>
	__asm volatile
 80036f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fa:	f383 8811 	msr	BASEPRI, r3
 80036fe:	f3bf 8f6f 	isb	sy
 8003702:	f3bf 8f4f 	dsb	sy
 8003706:	617b      	str	r3, [r7, #20]
}
 8003708:	bf00      	nop
 800370a:	e7fe      	b.n	800370a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d01f      	beq.n	8003752 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003712:	2300      	movs	r3, #0
 8003714:	61fb      	str	r3, [r7, #28]
 8003716:	e012      	b.n	800373e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	4413      	add	r3, r2
 800371e:	7819      	ldrb	r1, [r3, #0]
 8003720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	4413      	add	r3, r2
 8003726:	3334      	adds	r3, #52	; 0x34
 8003728:	460a      	mov	r2, r1
 800372a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800372c:	68ba      	ldr	r2, [r7, #8]
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	4413      	add	r3, r2
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d006      	beq.n	8003746 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	3301      	adds	r3, #1
 800373c:	61fb      	str	r3, [r7, #28]
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	2b0f      	cmp	r3, #15
 8003742:	d9e9      	bls.n	8003718 <prvInitialiseNewTask+0x64>
 8003744:	e000      	b.n	8003748 <prvInitialiseNewTask+0x94>
			{
				break;
 8003746:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003750:	e003      	b.n	800375a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800375a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800375c:	2b37      	cmp	r3, #55	; 0x37
 800375e:	d901      	bls.n	8003764 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003760:	2337      	movs	r3, #55	; 0x37
 8003762:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003766:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003768:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800376a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800376e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003772:	2200      	movs	r2, #0
 8003774:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003778:	3304      	adds	r3, #4
 800377a:	4618      	mov	r0, r3
 800377c:	f7ff f8be 	bl	80028fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003782:	3318      	adds	r3, #24
 8003784:	4618      	mov	r0, r3
 8003786:	f7ff f8b9 	bl	80028fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800378a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800378e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003792:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003798:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800379a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800379e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80037a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a2:	2200      	movs	r2, #0
 80037a4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80037a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80037b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b2:	3354      	adds	r3, #84	; 0x54
 80037b4:	224c      	movs	r2, #76	; 0x4c
 80037b6:	2100      	movs	r1, #0
 80037b8:	4618      	mov	r0, r3
 80037ba:	f001 fda7 	bl	800530c <memset>
 80037be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c0:	4a0c      	ldr	r2, [pc, #48]	; (80037f4 <prvInitialiseNewTask+0x140>)
 80037c2:	659a      	str	r2, [r3, #88]	; 0x58
 80037c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c6:	4a0c      	ldr	r2, [pc, #48]	; (80037f8 <prvInitialiseNewTask+0x144>)
 80037c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80037ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037cc:	4a0b      	ldr	r2, [pc, #44]	; (80037fc <prvInitialiseNewTask+0x148>)
 80037ce:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	68f9      	ldr	r1, [r7, #12]
 80037d4:	69b8      	ldr	r0, [r7, #24]
 80037d6:	f001 f941 	bl	8004a5c <pxPortInitialiseStack>
 80037da:	4602      	mov	r2, r0
 80037dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037de:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80037e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d002      	beq.n	80037ec <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80037e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037ec:	bf00      	nop
 80037ee:	3720      	adds	r7, #32
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	20004ad8 	.word	0x20004ad8
 80037f8:	20004b40 	.word	0x20004b40
 80037fc:	20004ba8 	.word	0x20004ba8

08003800 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003808:	f001 fa54 	bl	8004cb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800380c:	4b2d      	ldr	r3, [pc, #180]	; (80038c4 <prvAddNewTaskToReadyList+0xc4>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	3301      	adds	r3, #1
 8003812:	4a2c      	ldr	r2, [pc, #176]	; (80038c4 <prvAddNewTaskToReadyList+0xc4>)
 8003814:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003816:	4b2c      	ldr	r3, [pc, #176]	; (80038c8 <prvAddNewTaskToReadyList+0xc8>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d109      	bne.n	8003832 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800381e:	4a2a      	ldr	r2, [pc, #168]	; (80038c8 <prvAddNewTaskToReadyList+0xc8>)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003824:	4b27      	ldr	r3, [pc, #156]	; (80038c4 <prvAddNewTaskToReadyList+0xc4>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d110      	bne.n	800384e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800382c:	f000 fc26 	bl	800407c <prvInitialiseTaskLists>
 8003830:	e00d      	b.n	800384e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003832:	4b26      	ldr	r3, [pc, #152]	; (80038cc <prvAddNewTaskToReadyList+0xcc>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d109      	bne.n	800384e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800383a:	4b23      	ldr	r3, [pc, #140]	; (80038c8 <prvAddNewTaskToReadyList+0xc8>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003844:	429a      	cmp	r2, r3
 8003846:	d802      	bhi.n	800384e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003848:	4a1f      	ldr	r2, [pc, #124]	; (80038c8 <prvAddNewTaskToReadyList+0xc8>)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800384e:	4b20      	ldr	r3, [pc, #128]	; (80038d0 <prvAddNewTaskToReadyList+0xd0>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	3301      	adds	r3, #1
 8003854:	4a1e      	ldr	r2, [pc, #120]	; (80038d0 <prvAddNewTaskToReadyList+0xd0>)
 8003856:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003858:	4b1d      	ldr	r3, [pc, #116]	; (80038d0 <prvAddNewTaskToReadyList+0xd0>)
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003864:	4b1b      	ldr	r3, [pc, #108]	; (80038d4 <prvAddNewTaskToReadyList+0xd4>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	429a      	cmp	r2, r3
 800386a:	d903      	bls.n	8003874 <prvAddNewTaskToReadyList+0x74>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003870:	4a18      	ldr	r2, [pc, #96]	; (80038d4 <prvAddNewTaskToReadyList+0xd4>)
 8003872:	6013      	str	r3, [r2, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003878:	4613      	mov	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4413      	add	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4a15      	ldr	r2, [pc, #84]	; (80038d8 <prvAddNewTaskToReadyList+0xd8>)
 8003882:	441a      	add	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3304      	adds	r3, #4
 8003888:	4619      	mov	r1, r3
 800388a:	4610      	mov	r0, r2
 800388c:	f7ff f843 	bl	8002916 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003890:	f001 fa40 	bl	8004d14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003894:	4b0d      	ldr	r3, [pc, #52]	; (80038cc <prvAddNewTaskToReadyList+0xcc>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00e      	beq.n	80038ba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800389c:	4b0a      	ldr	r3, [pc, #40]	; (80038c8 <prvAddNewTaskToReadyList+0xc8>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d207      	bcs.n	80038ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80038aa:	4b0c      	ldr	r3, [pc, #48]	; (80038dc <prvAddNewTaskToReadyList+0xdc>)
 80038ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	f3bf 8f4f 	dsb	sy
 80038b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038ba:	bf00      	nop
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	20000d58 	.word	0x20000d58
 80038c8:	20000884 	.word	0x20000884
 80038cc:	20000d64 	.word	0x20000d64
 80038d0:	20000d74 	.word	0x20000d74
 80038d4:	20000d60 	.word	0x20000d60
 80038d8:	20000888 	.word	0x20000888
 80038dc:	e000ed04 	.word	0xe000ed04

080038e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80038e8:	2300      	movs	r3, #0
 80038ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d017      	beq.n	8003922 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80038f2:	4b13      	ldr	r3, [pc, #76]	; (8003940 <vTaskDelay+0x60>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00a      	beq.n	8003910 <vTaskDelay+0x30>
	__asm volatile
 80038fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fe:	f383 8811 	msr	BASEPRI, r3
 8003902:	f3bf 8f6f 	isb	sy
 8003906:	f3bf 8f4f 	dsb	sy
 800390a:	60bb      	str	r3, [r7, #8]
}
 800390c:	bf00      	nop
 800390e:	e7fe      	b.n	800390e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003910:	f000 f88a 	bl	8003a28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003914:	2100      	movs	r1, #0
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 fcfe 	bl	8004318 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800391c:	f000 f892 	bl	8003a44 <xTaskResumeAll>
 8003920:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d107      	bne.n	8003938 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003928:	4b06      	ldr	r3, [pc, #24]	; (8003944 <vTaskDelay+0x64>)
 800392a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	f3bf 8f4f 	dsb	sy
 8003934:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003938:	bf00      	nop
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	20000d80 	.word	0x20000d80
 8003944:	e000ed04 	.word	0xe000ed04

08003948 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b08a      	sub	sp, #40	; 0x28
 800394c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800394e:	2300      	movs	r3, #0
 8003950:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003952:	2300      	movs	r3, #0
 8003954:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003956:	463a      	mov	r2, r7
 8003958:	1d39      	adds	r1, r7, #4
 800395a:	f107 0308 	add.w	r3, r7, #8
 800395e:	4618      	mov	r0, r3
 8003960:	f7fe ff78 	bl	8002854 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003964:	6839      	ldr	r1, [r7, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	9202      	str	r2, [sp, #8]
 800396c:	9301      	str	r3, [sp, #4]
 800396e:	2300      	movs	r3, #0
 8003970:	9300      	str	r3, [sp, #0]
 8003972:	2300      	movs	r3, #0
 8003974:	460a      	mov	r2, r1
 8003976:	4924      	ldr	r1, [pc, #144]	; (8003a08 <vTaskStartScheduler+0xc0>)
 8003978:	4824      	ldr	r0, [pc, #144]	; (8003a0c <vTaskStartScheduler+0xc4>)
 800397a:	f7ff fdf9 	bl	8003570 <xTaskCreateStatic>
 800397e:	4603      	mov	r3, r0
 8003980:	4a23      	ldr	r2, [pc, #140]	; (8003a10 <vTaskStartScheduler+0xc8>)
 8003982:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003984:	4b22      	ldr	r3, [pc, #136]	; (8003a10 <vTaskStartScheduler+0xc8>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d002      	beq.n	8003992 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800398c:	2301      	movs	r3, #1
 800398e:	617b      	str	r3, [r7, #20]
 8003990:	e001      	b.n	8003996 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003992:	2300      	movs	r3, #0
 8003994:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d102      	bne.n	80039a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800399c:	f000 fd10 	bl	80043c0 <xTimerCreateTimerTask>
 80039a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d11b      	bne.n	80039e0 <vTaskStartScheduler+0x98>
	__asm volatile
 80039a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ac:	f383 8811 	msr	BASEPRI, r3
 80039b0:	f3bf 8f6f 	isb	sy
 80039b4:	f3bf 8f4f 	dsb	sy
 80039b8:	613b      	str	r3, [r7, #16]
}
 80039ba:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80039bc:	4b15      	ldr	r3, [pc, #84]	; (8003a14 <vTaskStartScheduler+0xcc>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	3354      	adds	r3, #84	; 0x54
 80039c2:	4a15      	ldr	r2, [pc, #84]	; (8003a18 <vTaskStartScheduler+0xd0>)
 80039c4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80039c6:	4b15      	ldr	r3, [pc, #84]	; (8003a1c <vTaskStartScheduler+0xd4>)
 80039c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80039ce:	4b14      	ldr	r3, [pc, #80]	; (8003a20 <vTaskStartScheduler+0xd8>)
 80039d0:	2201      	movs	r2, #1
 80039d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80039d4:	4b13      	ldr	r3, [pc, #76]	; (8003a24 <vTaskStartScheduler+0xdc>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80039da:	f001 f8c9 	bl	8004b70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80039de:	e00e      	b.n	80039fe <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039e6:	d10a      	bne.n	80039fe <vTaskStartScheduler+0xb6>
	__asm volatile
 80039e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ec:	f383 8811 	msr	BASEPRI, r3
 80039f0:	f3bf 8f6f 	isb	sy
 80039f4:	f3bf 8f4f 	dsb	sy
 80039f8:	60fb      	str	r3, [r7, #12]
}
 80039fa:	bf00      	nop
 80039fc:	e7fe      	b.n	80039fc <vTaskStartScheduler+0xb4>
}
 80039fe:	bf00      	nop
 8003a00:	3718      	adds	r7, #24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	08005d44 	.word	0x08005d44
 8003a0c:	0800404d 	.word	0x0800404d
 8003a10:	20000d7c 	.word	0x20000d7c
 8003a14:	20000884 	.word	0x20000884
 8003a18:	2000005c 	.word	0x2000005c
 8003a1c:	20000d78 	.word	0x20000d78
 8003a20:	20000d64 	.word	0x20000d64
 8003a24:	20000d5c 	.word	0x20000d5c

08003a28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a28:	b480      	push	{r7}
 8003a2a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003a2c:	4b04      	ldr	r3, [pc, #16]	; (8003a40 <vTaskSuspendAll+0x18>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	3301      	adds	r3, #1
 8003a32:	4a03      	ldr	r2, [pc, #12]	; (8003a40 <vTaskSuspendAll+0x18>)
 8003a34:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003a36:	bf00      	nop
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	20000d80 	.word	0x20000d80

08003a44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a52:	4b42      	ldr	r3, [pc, #264]	; (8003b5c <xTaskResumeAll+0x118>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10a      	bne.n	8003a70 <xTaskResumeAll+0x2c>
	__asm volatile
 8003a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5e:	f383 8811 	msr	BASEPRI, r3
 8003a62:	f3bf 8f6f 	isb	sy
 8003a66:	f3bf 8f4f 	dsb	sy
 8003a6a:	603b      	str	r3, [r7, #0]
}
 8003a6c:	bf00      	nop
 8003a6e:	e7fe      	b.n	8003a6e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a70:	f001 f920 	bl	8004cb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003a74:	4b39      	ldr	r3, [pc, #228]	; (8003b5c <xTaskResumeAll+0x118>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	4a38      	ldr	r2, [pc, #224]	; (8003b5c <xTaskResumeAll+0x118>)
 8003a7c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a7e:	4b37      	ldr	r3, [pc, #220]	; (8003b5c <xTaskResumeAll+0x118>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d162      	bne.n	8003b4c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a86:	4b36      	ldr	r3, [pc, #216]	; (8003b60 <xTaskResumeAll+0x11c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d05e      	beq.n	8003b4c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a8e:	e02f      	b.n	8003af0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a90:	4b34      	ldr	r3, [pc, #208]	; (8003b64 <xTaskResumeAll+0x120>)
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	3318      	adds	r3, #24
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7fe ff97 	bl	80029d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7fe ff92 	bl	80029d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab0:	4b2d      	ldr	r3, [pc, #180]	; (8003b68 <xTaskResumeAll+0x124>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d903      	bls.n	8003ac0 <xTaskResumeAll+0x7c>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003abc:	4a2a      	ldr	r2, [pc, #168]	; (8003b68 <xTaskResumeAll+0x124>)
 8003abe:	6013      	str	r3, [r2, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4a27      	ldr	r2, [pc, #156]	; (8003b6c <xTaskResumeAll+0x128>)
 8003ace:	441a      	add	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	3304      	adds	r3, #4
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	4610      	mov	r0, r2
 8003ad8:	f7fe ff1d 	bl	8002916 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae0:	4b23      	ldr	r3, [pc, #140]	; (8003b70 <xTaskResumeAll+0x12c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d302      	bcc.n	8003af0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003aea:	4b22      	ldr	r3, [pc, #136]	; (8003b74 <xTaskResumeAll+0x130>)
 8003aec:	2201      	movs	r2, #1
 8003aee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003af0:	4b1c      	ldr	r3, [pc, #112]	; (8003b64 <xTaskResumeAll+0x120>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1cb      	bne.n	8003a90 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003afe:	f000 fb5f 	bl	80041c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003b02:	4b1d      	ldr	r3, [pc, #116]	; (8003b78 <xTaskResumeAll+0x134>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d010      	beq.n	8003b30 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b0e:	f000 f847 	bl	8003ba0 <xTaskIncrementTick>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d002      	beq.n	8003b1e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003b18:	4b16      	ldr	r3, [pc, #88]	; (8003b74 <xTaskResumeAll+0x130>)
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	3b01      	subs	r3, #1
 8003b22:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1f1      	bne.n	8003b0e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003b2a:	4b13      	ldr	r3, [pc, #76]	; (8003b78 <xTaskResumeAll+0x134>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003b30:	4b10      	ldr	r3, [pc, #64]	; (8003b74 <xTaskResumeAll+0x130>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d009      	beq.n	8003b4c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003b3c:	4b0f      	ldr	r3, [pc, #60]	; (8003b7c <xTaskResumeAll+0x138>)
 8003b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	f3bf 8f4f 	dsb	sy
 8003b48:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b4c:	f001 f8e2 	bl	8004d14 <vPortExitCritical>

	return xAlreadyYielded;
 8003b50:	68bb      	ldr	r3, [r7, #8]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	20000d80 	.word	0x20000d80
 8003b60:	20000d58 	.word	0x20000d58
 8003b64:	20000d18 	.word	0x20000d18
 8003b68:	20000d60 	.word	0x20000d60
 8003b6c:	20000888 	.word	0x20000888
 8003b70:	20000884 	.word	0x20000884
 8003b74:	20000d6c 	.word	0x20000d6c
 8003b78:	20000d68 	.word	0x20000d68
 8003b7c:	e000ed04 	.word	0xe000ed04

08003b80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003b86:	4b05      	ldr	r3, [pc, #20]	; (8003b9c <xTaskGetTickCount+0x1c>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003b8c:	687b      	ldr	r3, [r7, #4]
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	20000d5c 	.word	0x20000d5c

08003ba0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003baa:	4b4f      	ldr	r3, [pc, #316]	; (8003ce8 <xTaskIncrementTick+0x148>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f040 808f 	bne.w	8003cd2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003bb4:	4b4d      	ldr	r3, [pc, #308]	; (8003cec <xTaskIncrementTick+0x14c>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	3301      	adds	r3, #1
 8003bba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003bbc:	4a4b      	ldr	r2, [pc, #300]	; (8003cec <xTaskIncrementTick+0x14c>)
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d120      	bne.n	8003c0a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003bc8:	4b49      	ldr	r3, [pc, #292]	; (8003cf0 <xTaskIncrementTick+0x150>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00a      	beq.n	8003be8 <xTaskIncrementTick+0x48>
	__asm volatile
 8003bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd6:	f383 8811 	msr	BASEPRI, r3
 8003bda:	f3bf 8f6f 	isb	sy
 8003bde:	f3bf 8f4f 	dsb	sy
 8003be2:	603b      	str	r3, [r7, #0]
}
 8003be4:	bf00      	nop
 8003be6:	e7fe      	b.n	8003be6 <xTaskIncrementTick+0x46>
 8003be8:	4b41      	ldr	r3, [pc, #260]	; (8003cf0 <xTaskIncrementTick+0x150>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	60fb      	str	r3, [r7, #12]
 8003bee:	4b41      	ldr	r3, [pc, #260]	; (8003cf4 <xTaskIncrementTick+0x154>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a3f      	ldr	r2, [pc, #252]	; (8003cf0 <xTaskIncrementTick+0x150>)
 8003bf4:	6013      	str	r3, [r2, #0]
 8003bf6:	4a3f      	ldr	r2, [pc, #252]	; (8003cf4 <xTaskIncrementTick+0x154>)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6013      	str	r3, [r2, #0]
 8003bfc:	4b3e      	ldr	r3, [pc, #248]	; (8003cf8 <xTaskIncrementTick+0x158>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	3301      	adds	r3, #1
 8003c02:	4a3d      	ldr	r2, [pc, #244]	; (8003cf8 <xTaskIncrementTick+0x158>)
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	f000 fadb 	bl	80041c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c0a:	4b3c      	ldr	r3, [pc, #240]	; (8003cfc <xTaskIncrementTick+0x15c>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d349      	bcc.n	8003ca8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c14:	4b36      	ldr	r3, [pc, #216]	; (8003cf0 <xTaskIncrementTick+0x150>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d104      	bne.n	8003c28 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c1e:	4b37      	ldr	r3, [pc, #220]	; (8003cfc <xTaskIncrementTick+0x15c>)
 8003c20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c24:	601a      	str	r2, [r3, #0]
					break;
 8003c26:	e03f      	b.n	8003ca8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c28:	4b31      	ldr	r3, [pc, #196]	; (8003cf0 <xTaskIncrementTick+0x150>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d203      	bcs.n	8003c48 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c40:	4a2e      	ldr	r2, [pc, #184]	; (8003cfc <xTaskIncrementTick+0x15c>)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003c46:	e02f      	b.n	8003ca8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	3304      	adds	r3, #4
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7fe febf 	bl	80029d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d004      	beq.n	8003c64 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	3318      	adds	r3, #24
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7fe feb6 	bl	80029d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c68:	4b25      	ldr	r3, [pc, #148]	; (8003d00 <xTaskIncrementTick+0x160>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d903      	bls.n	8003c78 <xTaskIncrementTick+0xd8>
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c74:	4a22      	ldr	r2, [pc, #136]	; (8003d00 <xTaskIncrementTick+0x160>)
 8003c76:	6013      	str	r3, [r2, #0]
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4a1f      	ldr	r2, [pc, #124]	; (8003d04 <xTaskIncrementTick+0x164>)
 8003c86:	441a      	add	r2, r3
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	3304      	adds	r3, #4
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	4610      	mov	r0, r2
 8003c90:	f7fe fe41 	bl	8002916 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c98:	4b1b      	ldr	r3, [pc, #108]	; (8003d08 <xTaskIncrementTick+0x168>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d3b8      	bcc.n	8003c14 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ca6:	e7b5      	b.n	8003c14 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ca8:	4b17      	ldr	r3, [pc, #92]	; (8003d08 <xTaskIncrementTick+0x168>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cae:	4915      	ldr	r1, [pc, #84]	; (8003d04 <xTaskIncrementTick+0x164>)
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	440b      	add	r3, r1
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d901      	bls.n	8003cc4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003cc4:	4b11      	ldr	r3, [pc, #68]	; (8003d0c <xTaskIncrementTick+0x16c>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d007      	beq.n	8003cdc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	617b      	str	r3, [r7, #20]
 8003cd0:	e004      	b.n	8003cdc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003cd2:	4b0f      	ldr	r3, [pc, #60]	; (8003d10 <xTaskIncrementTick+0x170>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	4a0d      	ldr	r2, [pc, #52]	; (8003d10 <xTaskIncrementTick+0x170>)
 8003cda:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003cdc:	697b      	ldr	r3, [r7, #20]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3718      	adds	r7, #24
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	20000d80 	.word	0x20000d80
 8003cec:	20000d5c 	.word	0x20000d5c
 8003cf0:	20000d10 	.word	0x20000d10
 8003cf4:	20000d14 	.word	0x20000d14
 8003cf8:	20000d70 	.word	0x20000d70
 8003cfc:	20000d78 	.word	0x20000d78
 8003d00:	20000d60 	.word	0x20000d60
 8003d04:	20000888 	.word	0x20000888
 8003d08:	20000884 	.word	0x20000884
 8003d0c:	20000d6c 	.word	0x20000d6c
 8003d10:	20000d68 	.word	0x20000d68

08003d14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d1a:	4b2a      	ldr	r3, [pc, #168]	; (8003dc4 <vTaskSwitchContext+0xb0>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d22:	4b29      	ldr	r3, [pc, #164]	; (8003dc8 <vTaskSwitchContext+0xb4>)
 8003d24:	2201      	movs	r2, #1
 8003d26:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d28:	e046      	b.n	8003db8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003d2a:	4b27      	ldr	r3, [pc, #156]	; (8003dc8 <vTaskSwitchContext+0xb4>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d30:	4b26      	ldr	r3, [pc, #152]	; (8003dcc <vTaskSwitchContext+0xb8>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	60fb      	str	r3, [r7, #12]
 8003d36:	e010      	b.n	8003d5a <vTaskSwitchContext+0x46>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10a      	bne.n	8003d54 <vTaskSwitchContext+0x40>
	__asm volatile
 8003d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d42:	f383 8811 	msr	BASEPRI, r3
 8003d46:	f3bf 8f6f 	isb	sy
 8003d4a:	f3bf 8f4f 	dsb	sy
 8003d4e:	607b      	str	r3, [r7, #4]
}
 8003d50:	bf00      	nop
 8003d52:	e7fe      	b.n	8003d52 <vTaskSwitchContext+0x3e>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	3b01      	subs	r3, #1
 8003d58:	60fb      	str	r3, [r7, #12]
 8003d5a:	491d      	ldr	r1, [pc, #116]	; (8003dd0 <vTaskSwitchContext+0xbc>)
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4413      	add	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	440b      	add	r3, r1
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d0e4      	beq.n	8003d38 <vTaskSwitchContext+0x24>
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	4613      	mov	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	4413      	add	r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	4a15      	ldr	r2, [pc, #84]	; (8003dd0 <vTaskSwitchContext+0xbc>)
 8003d7a:	4413      	add	r3, r2
 8003d7c:	60bb      	str	r3, [r7, #8]
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	605a      	str	r2, [r3, #4]
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	3308      	adds	r3, #8
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d104      	bne.n	8003d9e <vTaskSwitchContext+0x8a>
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	605a      	str	r2, [r3, #4]
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	4a0b      	ldr	r2, [pc, #44]	; (8003dd4 <vTaskSwitchContext+0xc0>)
 8003da6:	6013      	str	r3, [r2, #0]
 8003da8:	4a08      	ldr	r2, [pc, #32]	; (8003dcc <vTaskSwitchContext+0xb8>)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003dae:	4b09      	ldr	r3, [pc, #36]	; (8003dd4 <vTaskSwitchContext+0xc0>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	3354      	adds	r3, #84	; 0x54
 8003db4:	4a08      	ldr	r2, [pc, #32]	; (8003dd8 <vTaskSwitchContext+0xc4>)
 8003db6:	6013      	str	r3, [r2, #0]
}
 8003db8:	bf00      	nop
 8003dba:	3714      	adds	r7, #20
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	20000d80 	.word	0x20000d80
 8003dc8:	20000d6c 	.word	0x20000d6c
 8003dcc:	20000d60 	.word	0x20000d60
 8003dd0:	20000888 	.word	0x20000888
 8003dd4:	20000884 	.word	0x20000884
 8003dd8:	2000005c 	.word	0x2000005c

08003ddc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d10a      	bne.n	8003e02 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df0:	f383 8811 	msr	BASEPRI, r3
 8003df4:	f3bf 8f6f 	isb	sy
 8003df8:	f3bf 8f4f 	dsb	sy
 8003dfc:	60fb      	str	r3, [r7, #12]
}
 8003dfe:	bf00      	nop
 8003e00:	e7fe      	b.n	8003e00 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e02:	4b07      	ldr	r3, [pc, #28]	; (8003e20 <vTaskPlaceOnEventList+0x44>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	3318      	adds	r3, #24
 8003e08:	4619      	mov	r1, r3
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7fe fda7 	bl	800295e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e10:	2101      	movs	r1, #1
 8003e12:	6838      	ldr	r0, [r7, #0]
 8003e14:	f000 fa80 	bl	8004318 <prvAddCurrentTaskToDelayedList>
}
 8003e18:	bf00      	nop
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	20000884 	.word	0x20000884

08003e24 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10a      	bne.n	8003e4c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3a:	f383 8811 	msr	BASEPRI, r3
 8003e3e:	f3bf 8f6f 	isb	sy
 8003e42:	f3bf 8f4f 	dsb	sy
 8003e46:	617b      	str	r3, [r7, #20]
}
 8003e48:	bf00      	nop
 8003e4a:	e7fe      	b.n	8003e4a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e4c:	4b0a      	ldr	r3, [pc, #40]	; (8003e78 <vTaskPlaceOnEventListRestricted+0x54>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	3318      	adds	r3, #24
 8003e52:	4619      	mov	r1, r3
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f7fe fd5e 	bl	8002916 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d002      	beq.n	8003e66 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003e60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e64:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003e66:	6879      	ldr	r1, [r7, #4]
 8003e68:	68b8      	ldr	r0, [r7, #8]
 8003e6a:	f000 fa55 	bl	8004318 <prvAddCurrentTaskToDelayedList>
	}
 8003e6e:	bf00      	nop
 8003e70:	3718      	adds	r7, #24
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	20000884 	.word	0x20000884

08003e7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10a      	bne.n	8003ea8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e96:	f383 8811 	msr	BASEPRI, r3
 8003e9a:	f3bf 8f6f 	isb	sy
 8003e9e:	f3bf 8f4f 	dsb	sy
 8003ea2:	60fb      	str	r3, [r7, #12]
}
 8003ea4:	bf00      	nop
 8003ea6:	e7fe      	b.n	8003ea6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	3318      	adds	r3, #24
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7fe fd8f 	bl	80029d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003eb2:	4b1e      	ldr	r3, [pc, #120]	; (8003f2c <xTaskRemoveFromEventList+0xb0>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d11d      	bne.n	8003ef6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7fe fd86 	bl	80029d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec8:	4b19      	ldr	r3, [pc, #100]	; (8003f30 <xTaskRemoveFromEventList+0xb4>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d903      	bls.n	8003ed8 <xTaskRemoveFromEventList+0x5c>
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed4:	4a16      	ldr	r2, [pc, #88]	; (8003f30 <xTaskRemoveFromEventList+0xb4>)
 8003ed6:	6013      	str	r3, [r2, #0]
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003edc:	4613      	mov	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4a13      	ldr	r2, [pc, #76]	; (8003f34 <xTaskRemoveFromEventList+0xb8>)
 8003ee6:	441a      	add	r2, r3
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	3304      	adds	r3, #4
 8003eec:	4619      	mov	r1, r3
 8003eee:	4610      	mov	r0, r2
 8003ef0:	f7fe fd11 	bl	8002916 <vListInsertEnd>
 8003ef4:	e005      	b.n	8003f02 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	3318      	adds	r3, #24
 8003efa:	4619      	mov	r1, r3
 8003efc:	480e      	ldr	r0, [pc, #56]	; (8003f38 <xTaskRemoveFromEventList+0xbc>)
 8003efe:	f7fe fd0a 	bl	8002916 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f06:	4b0d      	ldr	r3, [pc, #52]	; (8003f3c <xTaskRemoveFromEventList+0xc0>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d905      	bls.n	8003f1c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003f10:	2301      	movs	r3, #1
 8003f12:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003f14:	4b0a      	ldr	r3, [pc, #40]	; (8003f40 <xTaskRemoveFromEventList+0xc4>)
 8003f16:	2201      	movs	r2, #1
 8003f18:	601a      	str	r2, [r3, #0]
 8003f1a:	e001      	b.n	8003f20 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003f20:	697b      	ldr	r3, [r7, #20]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3718      	adds	r7, #24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	20000d80 	.word	0x20000d80
 8003f30:	20000d60 	.word	0x20000d60
 8003f34:	20000888 	.word	0x20000888
 8003f38:	20000d18 	.word	0x20000d18
 8003f3c:	20000884 	.word	0x20000884
 8003f40:	20000d6c 	.word	0x20000d6c

08003f44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f4c:	4b06      	ldr	r3, [pc, #24]	; (8003f68 <vTaskInternalSetTimeOutState+0x24>)
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003f54:	4b05      	ldr	r3, [pc, #20]	; (8003f6c <vTaskInternalSetTimeOutState+0x28>)
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	605a      	str	r2, [r3, #4]
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr
 8003f68:	20000d70 	.word	0x20000d70
 8003f6c:	20000d5c 	.word	0x20000d5c

08003f70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b088      	sub	sp, #32
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10a      	bne.n	8003f96 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f84:	f383 8811 	msr	BASEPRI, r3
 8003f88:	f3bf 8f6f 	isb	sy
 8003f8c:	f3bf 8f4f 	dsb	sy
 8003f90:	613b      	str	r3, [r7, #16]
}
 8003f92:	bf00      	nop
 8003f94:	e7fe      	b.n	8003f94 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10a      	bne.n	8003fb2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa0:	f383 8811 	msr	BASEPRI, r3
 8003fa4:	f3bf 8f6f 	isb	sy
 8003fa8:	f3bf 8f4f 	dsb	sy
 8003fac:	60fb      	str	r3, [r7, #12]
}
 8003fae:	bf00      	nop
 8003fb0:	e7fe      	b.n	8003fb0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003fb2:	f000 fe7f 	bl	8004cb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003fb6:	4b1d      	ldr	r3, [pc, #116]	; (800402c <xTaskCheckForTimeOut+0xbc>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fce:	d102      	bne.n	8003fd6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	61fb      	str	r3, [r7, #28]
 8003fd4:	e023      	b.n	800401e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	4b15      	ldr	r3, [pc, #84]	; (8004030 <xTaskCheckForTimeOut+0xc0>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d007      	beq.n	8003ff2 <xTaskCheckForTimeOut+0x82>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d302      	bcc.n	8003ff2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003fec:	2301      	movs	r3, #1
 8003fee:	61fb      	str	r3, [r7, #28]
 8003ff0:	e015      	b.n	800401e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d20b      	bcs.n	8004014 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	1ad2      	subs	r2, r2, r3
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f7ff ff9b 	bl	8003f44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800400e:	2300      	movs	r3, #0
 8004010:	61fb      	str	r3, [r7, #28]
 8004012:	e004      	b.n	800401e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	2200      	movs	r2, #0
 8004018:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800401a:	2301      	movs	r3, #1
 800401c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800401e:	f000 fe79 	bl	8004d14 <vPortExitCritical>

	return xReturn;
 8004022:	69fb      	ldr	r3, [r7, #28]
}
 8004024:	4618      	mov	r0, r3
 8004026:	3720      	adds	r7, #32
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	20000d5c 	.word	0x20000d5c
 8004030:	20000d70 	.word	0x20000d70

08004034 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004034:	b480      	push	{r7}
 8004036:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004038:	4b03      	ldr	r3, [pc, #12]	; (8004048 <vTaskMissedYield+0x14>)
 800403a:	2201      	movs	r2, #1
 800403c:	601a      	str	r2, [r3, #0]
}
 800403e:	bf00      	nop
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	20000d6c 	.word	0x20000d6c

0800404c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004054:	f000 f852 	bl	80040fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004058:	4b06      	ldr	r3, [pc, #24]	; (8004074 <prvIdleTask+0x28>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d9f9      	bls.n	8004054 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004060:	4b05      	ldr	r3, [pc, #20]	; (8004078 <prvIdleTask+0x2c>)
 8004062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	f3bf 8f4f 	dsb	sy
 800406c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004070:	e7f0      	b.n	8004054 <prvIdleTask+0x8>
 8004072:	bf00      	nop
 8004074:	20000888 	.word	0x20000888
 8004078:	e000ed04 	.word	0xe000ed04

0800407c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004082:	2300      	movs	r3, #0
 8004084:	607b      	str	r3, [r7, #4]
 8004086:	e00c      	b.n	80040a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	4613      	mov	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	4413      	add	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4a12      	ldr	r2, [pc, #72]	; (80040dc <prvInitialiseTaskLists+0x60>)
 8004094:	4413      	add	r3, r2
 8004096:	4618      	mov	r0, r3
 8004098:	f7fe fc10 	bl	80028bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	3301      	adds	r3, #1
 80040a0:	607b      	str	r3, [r7, #4]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2b37      	cmp	r3, #55	; 0x37
 80040a6:	d9ef      	bls.n	8004088 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80040a8:	480d      	ldr	r0, [pc, #52]	; (80040e0 <prvInitialiseTaskLists+0x64>)
 80040aa:	f7fe fc07 	bl	80028bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80040ae:	480d      	ldr	r0, [pc, #52]	; (80040e4 <prvInitialiseTaskLists+0x68>)
 80040b0:	f7fe fc04 	bl	80028bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80040b4:	480c      	ldr	r0, [pc, #48]	; (80040e8 <prvInitialiseTaskLists+0x6c>)
 80040b6:	f7fe fc01 	bl	80028bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80040ba:	480c      	ldr	r0, [pc, #48]	; (80040ec <prvInitialiseTaskLists+0x70>)
 80040bc:	f7fe fbfe 	bl	80028bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80040c0:	480b      	ldr	r0, [pc, #44]	; (80040f0 <prvInitialiseTaskLists+0x74>)
 80040c2:	f7fe fbfb 	bl	80028bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80040c6:	4b0b      	ldr	r3, [pc, #44]	; (80040f4 <prvInitialiseTaskLists+0x78>)
 80040c8:	4a05      	ldr	r2, [pc, #20]	; (80040e0 <prvInitialiseTaskLists+0x64>)
 80040ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80040cc:	4b0a      	ldr	r3, [pc, #40]	; (80040f8 <prvInitialiseTaskLists+0x7c>)
 80040ce:	4a05      	ldr	r2, [pc, #20]	; (80040e4 <prvInitialiseTaskLists+0x68>)
 80040d0:	601a      	str	r2, [r3, #0]
}
 80040d2:	bf00      	nop
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	20000888 	.word	0x20000888
 80040e0:	20000ce8 	.word	0x20000ce8
 80040e4:	20000cfc 	.word	0x20000cfc
 80040e8:	20000d18 	.word	0x20000d18
 80040ec:	20000d2c 	.word	0x20000d2c
 80040f0:	20000d44 	.word	0x20000d44
 80040f4:	20000d10 	.word	0x20000d10
 80040f8:	20000d14 	.word	0x20000d14

080040fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004102:	e019      	b.n	8004138 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004104:	f000 fdd6 	bl	8004cb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004108:	4b10      	ldr	r3, [pc, #64]	; (800414c <prvCheckTasksWaitingTermination+0x50>)
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	3304      	adds	r3, #4
 8004114:	4618      	mov	r0, r3
 8004116:	f7fe fc5b 	bl	80029d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800411a:	4b0d      	ldr	r3, [pc, #52]	; (8004150 <prvCheckTasksWaitingTermination+0x54>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	3b01      	subs	r3, #1
 8004120:	4a0b      	ldr	r2, [pc, #44]	; (8004150 <prvCheckTasksWaitingTermination+0x54>)
 8004122:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004124:	4b0b      	ldr	r3, [pc, #44]	; (8004154 <prvCheckTasksWaitingTermination+0x58>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	3b01      	subs	r3, #1
 800412a:	4a0a      	ldr	r2, [pc, #40]	; (8004154 <prvCheckTasksWaitingTermination+0x58>)
 800412c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800412e:	f000 fdf1 	bl	8004d14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f810 	bl	8004158 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004138:	4b06      	ldr	r3, [pc, #24]	; (8004154 <prvCheckTasksWaitingTermination+0x58>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1e1      	bne.n	8004104 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004140:	bf00      	nop
 8004142:	bf00      	nop
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	20000d2c 	.word	0x20000d2c
 8004150:	20000d58 	.word	0x20000d58
 8004154:	20000d40 	.word	0x20000d40

08004158 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	3354      	adds	r3, #84	; 0x54
 8004164:	4618      	mov	r0, r3
 8004166:	f001 f8d9 	bl	800531c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004170:	2b00      	cmp	r3, #0
 8004172:	d108      	bne.n	8004186 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004178:	4618      	mov	r0, r3
 800417a:	f000 ff89 	bl	8005090 <vPortFree>
				vPortFree( pxTCB );
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 ff86 	bl	8005090 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004184:	e018      	b.n	80041b8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800418c:	2b01      	cmp	r3, #1
 800418e:	d103      	bne.n	8004198 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 ff7d 	bl	8005090 <vPortFree>
	}
 8004196:	e00f      	b.n	80041b8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d00a      	beq.n	80041b8 <prvDeleteTCB+0x60>
	__asm volatile
 80041a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a6:	f383 8811 	msr	BASEPRI, r3
 80041aa:	f3bf 8f6f 	isb	sy
 80041ae:	f3bf 8f4f 	dsb	sy
 80041b2:	60fb      	str	r3, [r7, #12]
}
 80041b4:	bf00      	nop
 80041b6:	e7fe      	b.n	80041b6 <prvDeleteTCB+0x5e>
	}
 80041b8:	bf00      	nop
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041c6:	4b0c      	ldr	r3, [pc, #48]	; (80041f8 <prvResetNextTaskUnblockTime+0x38>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d104      	bne.n	80041da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80041d0:	4b0a      	ldr	r3, [pc, #40]	; (80041fc <prvResetNextTaskUnblockTime+0x3c>)
 80041d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80041d8:	e008      	b.n	80041ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041da:	4b07      	ldr	r3, [pc, #28]	; (80041f8 <prvResetNextTaskUnblockTime+0x38>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	4a04      	ldr	r2, [pc, #16]	; (80041fc <prvResetNextTaskUnblockTime+0x3c>)
 80041ea:	6013      	str	r3, [r2, #0]
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr
 80041f8:	20000d10 	.word	0x20000d10
 80041fc:	20000d78 	.word	0x20000d78

08004200 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004206:	4b0b      	ldr	r3, [pc, #44]	; (8004234 <xTaskGetSchedulerState+0x34>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d102      	bne.n	8004214 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800420e:	2301      	movs	r3, #1
 8004210:	607b      	str	r3, [r7, #4]
 8004212:	e008      	b.n	8004226 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004214:	4b08      	ldr	r3, [pc, #32]	; (8004238 <xTaskGetSchedulerState+0x38>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d102      	bne.n	8004222 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800421c:	2302      	movs	r3, #2
 800421e:	607b      	str	r3, [r7, #4]
 8004220:	e001      	b.n	8004226 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004222:	2300      	movs	r3, #0
 8004224:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004226:	687b      	ldr	r3, [r7, #4]
	}
 8004228:	4618      	mov	r0, r3
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	20000d64 	.word	0x20000d64
 8004238:	20000d80 	.word	0x20000d80

0800423c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004248:	2300      	movs	r3, #0
 800424a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d056      	beq.n	8004300 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004252:	4b2e      	ldr	r3, [pc, #184]	; (800430c <xTaskPriorityDisinherit+0xd0>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	429a      	cmp	r2, r3
 800425a:	d00a      	beq.n	8004272 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800425c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004260:	f383 8811 	msr	BASEPRI, r3
 8004264:	f3bf 8f6f 	isb	sy
 8004268:	f3bf 8f4f 	dsb	sy
 800426c:	60fb      	str	r3, [r7, #12]
}
 800426e:	bf00      	nop
 8004270:	e7fe      	b.n	8004270 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10a      	bne.n	8004290 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800427a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427e:	f383 8811 	msr	BASEPRI, r3
 8004282:	f3bf 8f6f 	isb	sy
 8004286:	f3bf 8f4f 	dsb	sy
 800428a:	60bb      	str	r3, [r7, #8]
}
 800428c:	bf00      	nop
 800428e:	e7fe      	b.n	800428e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004294:	1e5a      	subs	r2, r3, #1
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d02c      	beq.n	8004300 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d128      	bne.n	8004300 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	3304      	adds	r3, #4
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fe fb8c 	bl	80029d0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042d0:	4b0f      	ldr	r3, [pc, #60]	; (8004310 <xTaskPriorityDisinherit+0xd4>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d903      	bls.n	80042e0 <xTaskPriorityDisinherit+0xa4>
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042dc:	4a0c      	ldr	r2, [pc, #48]	; (8004310 <xTaskPriorityDisinherit+0xd4>)
 80042de:	6013      	str	r3, [r2, #0]
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e4:	4613      	mov	r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4413      	add	r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	4a09      	ldr	r2, [pc, #36]	; (8004314 <xTaskPriorityDisinherit+0xd8>)
 80042ee:	441a      	add	r2, r3
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	3304      	adds	r3, #4
 80042f4:	4619      	mov	r1, r3
 80042f6:	4610      	mov	r0, r2
 80042f8:	f7fe fb0d 	bl	8002916 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80042fc:	2301      	movs	r3, #1
 80042fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004300:	697b      	ldr	r3, [r7, #20]
	}
 8004302:	4618      	mov	r0, r3
 8004304:	3718      	adds	r7, #24
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	20000884 	.word	0x20000884
 8004310:	20000d60 	.word	0x20000d60
 8004314:	20000888 	.word	0x20000888

08004318 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004322:	4b21      	ldr	r3, [pc, #132]	; (80043a8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004328:	4b20      	ldr	r3, [pc, #128]	; (80043ac <prvAddCurrentTaskToDelayedList+0x94>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	3304      	adds	r3, #4
 800432e:	4618      	mov	r0, r3
 8004330:	f7fe fb4e 	bl	80029d0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800433a:	d10a      	bne.n	8004352 <prvAddCurrentTaskToDelayedList+0x3a>
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d007      	beq.n	8004352 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004342:	4b1a      	ldr	r3, [pc, #104]	; (80043ac <prvAddCurrentTaskToDelayedList+0x94>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	3304      	adds	r3, #4
 8004348:	4619      	mov	r1, r3
 800434a:	4819      	ldr	r0, [pc, #100]	; (80043b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800434c:	f7fe fae3 	bl	8002916 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004350:	e026      	b.n	80043a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4413      	add	r3, r2
 8004358:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800435a:	4b14      	ldr	r3, [pc, #80]	; (80043ac <prvAddCurrentTaskToDelayedList+0x94>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004362:	68ba      	ldr	r2, [r7, #8]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	429a      	cmp	r2, r3
 8004368:	d209      	bcs.n	800437e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800436a:	4b12      	ldr	r3, [pc, #72]	; (80043b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	4b0f      	ldr	r3, [pc, #60]	; (80043ac <prvAddCurrentTaskToDelayedList+0x94>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	3304      	adds	r3, #4
 8004374:	4619      	mov	r1, r3
 8004376:	4610      	mov	r0, r2
 8004378:	f7fe faf1 	bl	800295e <vListInsert>
}
 800437c:	e010      	b.n	80043a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800437e:	4b0e      	ldr	r3, [pc, #56]	; (80043b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	4b0a      	ldr	r3, [pc, #40]	; (80043ac <prvAddCurrentTaskToDelayedList+0x94>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	3304      	adds	r3, #4
 8004388:	4619      	mov	r1, r3
 800438a:	4610      	mov	r0, r2
 800438c:	f7fe fae7 	bl	800295e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004390:	4b0a      	ldr	r3, [pc, #40]	; (80043bc <prvAddCurrentTaskToDelayedList+0xa4>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68ba      	ldr	r2, [r7, #8]
 8004396:	429a      	cmp	r2, r3
 8004398:	d202      	bcs.n	80043a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800439a:	4a08      	ldr	r2, [pc, #32]	; (80043bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	6013      	str	r3, [r2, #0]
}
 80043a0:	bf00      	nop
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	20000d5c 	.word	0x20000d5c
 80043ac:	20000884 	.word	0x20000884
 80043b0:	20000d44 	.word	0x20000d44
 80043b4:	20000d14 	.word	0x20000d14
 80043b8:	20000d10 	.word	0x20000d10
 80043bc:	20000d78 	.word	0x20000d78

080043c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b08a      	sub	sp, #40	; 0x28
 80043c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80043c6:	2300      	movs	r3, #0
 80043c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80043ca:	f000 fb07 	bl	80049dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80043ce:	4b1c      	ldr	r3, [pc, #112]	; (8004440 <xTimerCreateTimerTask+0x80>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d021      	beq.n	800441a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80043d6:	2300      	movs	r3, #0
 80043d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80043da:	2300      	movs	r3, #0
 80043dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80043de:	1d3a      	adds	r2, r7, #4
 80043e0:	f107 0108 	add.w	r1, r7, #8
 80043e4:	f107 030c 	add.w	r3, r7, #12
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7fe fa4d 	bl	8002888 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80043ee:	6879      	ldr	r1, [r7, #4]
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	9202      	str	r2, [sp, #8]
 80043f6:	9301      	str	r3, [sp, #4]
 80043f8:	2302      	movs	r3, #2
 80043fa:	9300      	str	r3, [sp, #0]
 80043fc:	2300      	movs	r3, #0
 80043fe:	460a      	mov	r2, r1
 8004400:	4910      	ldr	r1, [pc, #64]	; (8004444 <xTimerCreateTimerTask+0x84>)
 8004402:	4811      	ldr	r0, [pc, #68]	; (8004448 <xTimerCreateTimerTask+0x88>)
 8004404:	f7ff f8b4 	bl	8003570 <xTaskCreateStatic>
 8004408:	4603      	mov	r3, r0
 800440a:	4a10      	ldr	r2, [pc, #64]	; (800444c <xTimerCreateTimerTask+0x8c>)
 800440c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800440e:	4b0f      	ldr	r3, [pc, #60]	; (800444c <xTimerCreateTimerTask+0x8c>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004416:	2301      	movs	r3, #1
 8004418:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10a      	bne.n	8004436 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004424:	f383 8811 	msr	BASEPRI, r3
 8004428:	f3bf 8f6f 	isb	sy
 800442c:	f3bf 8f4f 	dsb	sy
 8004430:	613b      	str	r3, [r7, #16]
}
 8004432:	bf00      	nop
 8004434:	e7fe      	b.n	8004434 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004436:	697b      	ldr	r3, [r7, #20]
}
 8004438:	4618      	mov	r0, r3
 800443a:	3718      	adds	r7, #24
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	20000db4 	.word	0x20000db4
 8004444:	08005d4c 	.word	0x08005d4c
 8004448:	08004585 	.word	0x08004585
 800444c:	20000db8 	.word	0x20000db8

08004450 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b08a      	sub	sp, #40	; 0x28
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
 800445c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800445e:	2300      	movs	r3, #0
 8004460:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10a      	bne.n	800447e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446c:	f383 8811 	msr	BASEPRI, r3
 8004470:	f3bf 8f6f 	isb	sy
 8004474:	f3bf 8f4f 	dsb	sy
 8004478:	623b      	str	r3, [r7, #32]
}
 800447a:	bf00      	nop
 800447c:	e7fe      	b.n	800447c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800447e:	4b1a      	ldr	r3, [pc, #104]	; (80044e8 <xTimerGenericCommand+0x98>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d02a      	beq.n	80044dc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	2b05      	cmp	r3, #5
 8004496:	dc18      	bgt.n	80044ca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004498:	f7ff feb2 	bl	8004200 <xTaskGetSchedulerState>
 800449c:	4603      	mov	r3, r0
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d109      	bne.n	80044b6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80044a2:	4b11      	ldr	r3, [pc, #68]	; (80044e8 <xTimerGenericCommand+0x98>)
 80044a4:	6818      	ldr	r0, [r3, #0]
 80044a6:	f107 0110 	add.w	r1, r7, #16
 80044aa:	2300      	movs	r3, #0
 80044ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044ae:	f7fe fbf7 	bl	8002ca0 <xQueueGenericSend>
 80044b2:	6278      	str	r0, [r7, #36]	; 0x24
 80044b4:	e012      	b.n	80044dc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80044b6:	4b0c      	ldr	r3, [pc, #48]	; (80044e8 <xTimerGenericCommand+0x98>)
 80044b8:	6818      	ldr	r0, [r3, #0]
 80044ba:	f107 0110 	add.w	r1, r7, #16
 80044be:	2300      	movs	r3, #0
 80044c0:	2200      	movs	r2, #0
 80044c2:	f7fe fbed 	bl	8002ca0 <xQueueGenericSend>
 80044c6:	6278      	str	r0, [r7, #36]	; 0x24
 80044c8:	e008      	b.n	80044dc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80044ca:	4b07      	ldr	r3, [pc, #28]	; (80044e8 <xTimerGenericCommand+0x98>)
 80044cc:	6818      	ldr	r0, [r3, #0]
 80044ce:	f107 0110 	add.w	r1, r7, #16
 80044d2:	2300      	movs	r3, #0
 80044d4:	683a      	ldr	r2, [r7, #0]
 80044d6:	f7fe fce1 	bl	8002e9c <xQueueGenericSendFromISR>
 80044da:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80044dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3728      	adds	r7, #40	; 0x28
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	20000db4 	.word	0x20000db4

080044ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b088      	sub	sp, #32
 80044f0:	af02      	add	r7, sp, #8
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044f6:	4b22      	ldr	r3, [pc, #136]	; (8004580 <prvProcessExpiredTimer+0x94>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	3304      	adds	r3, #4
 8004504:	4618      	mov	r0, r3
 8004506:	f7fe fa63 	bl	80029d0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004510:	f003 0304 	and.w	r3, r3, #4
 8004514:	2b00      	cmp	r3, #0
 8004516:	d022      	beq.n	800455e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	699a      	ldr	r2, [r3, #24]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	18d1      	adds	r1, r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	6978      	ldr	r0, [r7, #20]
 8004526:	f000 f8d1 	bl	80046cc <prvInsertTimerInActiveList>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d01f      	beq.n	8004570 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004530:	2300      	movs	r3, #0
 8004532:	9300      	str	r3, [sp, #0]
 8004534:	2300      	movs	r3, #0
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	2100      	movs	r1, #0
 800453a:	6978      	ldr	r0, [r7, #20]
 800453c:	f7ff ff88 	bl	8004450 <xTimerGenericCommand>
 8004540:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d113      	bne.n	8004570 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454c:	f383 8811 	msr	BASEPRI, r3
 8004550:	f3bf 8f6f 	isb	sy
 8004554:	f3bf 8f4f 	dsb	sy
 8004558:	60fb      	str	r3, [r7, #12]
}
 800455a:	bf00      	nop
 800455c:	e7fe      	b.n	800455c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004564:	f023 0301 	bic.w	r3, r3, #1
 8004568:	b2da      	uxtb	r2, r3
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	6a1b      	ldr	r3, [r3, #32]
 8004574:	6978      	ldr	r0, [r7, #20]
 8004576:	4798      	blx	r3
}
 8004578:	bf00      	nop
 800457a:	3718      	adds	r7, #24
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	20000dac 	.word	0x20000dac

08004584 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800458c:	f107 0308 	add.w	r3, r7, #8
 8004590:	4618      	mov	r0, r3
 8004592:	f000 f857 	bl	8004644 <prvGetNextExpireTime>
 8004596:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	4619      	mov	r1, r3
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 f803 	bl	80045a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80045a2:	f000 f8d5 	bl	8004750 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045a6:	e7f1      	b.n	800458c <prvTimerTask+0x8>

080045a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80045b2:	f7ff fa39 	bl	8003a28 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80045b6:	f107 0308 	add.w	r3, r7, #8
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 f866 	bl	800468c <prvSampleTimeNow>
 80045c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d130      	bne.n	800462a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10a      	bne.n	80045e4 <prvProcessTimerOrBlockTask+0x3c>
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d806      	bhi.n	80045e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80045d6:	f7ff fa35 	bl	8003a44 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80045da:	68f9      	ldr	r1, [r7, #12]
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f7ff ff85 	bl	80044ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80045e2:	e024      	b.n	800462e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d008      	beq.n	80045fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80045ea:	4b13      	ldr	r3, [pc, #76]	; (8004638 <prvProcessTimerOrBlockTask+0x90>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d101      	bne.n	80045f8 <prvProcessTimerOrBlockTask+0x50>
 80045f4:	2301      	movs	r3, #1
 80045f6:	e000      	b.n	80045fa <prvProcessTimerOrBlockTask+0x52>
 80045f8:	2300      	movs	r3, #0
 80045fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80045fc:	4b0f      	ldr	r3, [pc, #60]	; (800463c <prvProcessTimerOrBlockTask+0x94>)
 80045fe:	6818      	ldr	r0, [r3, #0]
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	4619      	mov	r1, r3
 800460a:	f7fe ff7d 	bl	8003508 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800460e:	f7ff fa19 	bl	8003a44 <xTaskResumeAll>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d10a      	bne.n	800462e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004618:	4b09      	ldr	r3, [pc, #36]	; (8004640 <prvProcessTimerOrBlockTask+0x98>)
 800461a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800461e:	601a      	str	r2, [r3, #0]
 8004620:	f3bf 8f4f 	dsb	sy
 8004624:	f3bf 8f6f 	isb	sy
}
 8004628:	e001      	b.n	800462e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800462a:	f7ff fa0b 	bl	8003a44 <xTaskResumeAll>
}
 800462e:	bf00      	nop
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	20000db0 	.word	0x20000db0
 800463c:	20000db4 	.word	0x20000db4
 8004640:	e000ed04 	.word	0xe000ed04

08004644 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800464c:	4b0e      	ldr	r3, [pc, #56]	; (8004688 <prvGetNextExpireTime+0x44>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <prvGetNextExpireTime+0x16>
 8004656:	2201      	movs	r2, #1
 8004658:	e000      	b.n	800465c <prvGetNextExpireTime+0x18>
 800465a:	2200      	movs	r2, #0
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d105      	bne.n	8004674 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004668:	4b07      	ldr	r3, [pc, #28]	; (8004688 <prvGetNextExpireTime+0x44>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	60fb      	str	r3, [r7, #12]
 8004672:	e001      	b.n	8004678 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004674:	2300      	movs	r3, #0
 8004676:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004678:	68fb      	ldr	r3, [r7, #12]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	20000dac 	.word	0x20000dac

0800468c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004694:	f7ff fa74 	bl	8003b80 <xTaskGetTickCount>
 8004698:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800469a:	4b0b      	ldr	r3, [pc, #44]	; (80046c8 <prvSampleTimeNow+0x3c>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d205      	bcs.n	80046b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80046a4:	f000 f936 	bl	8004914 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	601a      	str	r2, [r3, #0]
 80046ae:	e002      	b.n	80046b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80046b6:	4a04      	ldr	r2, [pc, #16]	; (80046c8 <prvSampleTimeNow+0x3c>)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80046bc:	68fb      	ldr	r3, [r7, #12]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	20000dbc 	.word	0x20000dbc

080046cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
 80046d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80046da:	2300      	movs	r3, #0
 80046dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d812      	bhi.n	8004718 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	1ad2      	subs	r2, r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d302      	bcc.n	8004706 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004700:	2301      	movs	r3, #1
 8004702:	617b      	str	r3, [r7, #20]
 8004704:	e01b      	b.n	800473e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004706:	4b10      	ldr	r3, [pc, #64]	; (8004748 <prvInsertTimerInActiveList+0x7c>)
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	3304      	adds	r3, #4
 800470e:	4619      	mov	r1, r3
 8004710:	4610      	mov	r0, r2
 8004712:	f7fe f924 	bl	800295e <vListInsert>
 8004716:	e012      	b.n	800473e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	429a      	cmp	r2, r3
 800471e:	d206      	bcs.n	800472e <prvInsertTimerInActiveList+0x62>
 8004720:	68ba      	ldr	r2, [r7, #8]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	429a      	cmp	r2, r3
 8004726:	d302      	bcc.n	800472e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004728:	2301      	movs	r3, #1
 800472a:	617b      	str	r3, [r7, #20]
 800472c:	e007      	b.n	800473e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800472e:	4b07      	ldr	r3, [pc, #28]	; (800474c <prvInsertTimerInActiveList+0x80>)
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	3304      	adds	r3, #4
 8004736:	4619      	mov	r1, r3
 8004738:	4610      	mov	r0, r2
 800473a:	f7fe f910 	bl	800295e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800473e:	697b      	ldr	r3, [r7, #20]
}
 8004740:	4618      	mov	r0, r3
 8004742:	3718      	adds	r7, #24
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	20000db0 	.word	0x20000db0
 800474c:	20000dac 	.word	0x20000dac

08004750 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b08e      	sub	sp, #56	; 0x38
 8004754:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004756:	e0ca      	b.n	80048ee <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	da18      	bge.n	8004790 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800475e:	1d3b      	adds	r3, r7, #4
 8004760:	3304      	adds	r3, #4
 8004762:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10a      	bne.n	8004780 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800476a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476e:	f383 8811 	msr	BASEPRI, r3
 8004772:	f3bf 8f6f 	isb	sy
 8004776:	f3bf 8f4f 	dsb	sy
 800477a:	61fb      	str	r3, [r7, #28]
}
 800477c:	bf00      	nop
 800477e:	e7fe      	b.n	800477e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004786:	6850      	ldr	r0, [r2, #4]
 8004788:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800478a:	6892      	ldr	r2, [r2, #8]
 800478c:	4611      	mov	r1, r2
 800478e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	f2c0 80ab 	blt.w	80048ee <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800479c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d004      	beq.n	80047ae <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80047a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a6:	3304      	adds	r3, #4
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7fe f911 	bl	80029d0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80047ae:	463b      	mov	r3, r7
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7ff ff6b 	bl	800468c <prvSampleTimeNow>
 80047b6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b09      	cmp	r3, #9
 80047bc:	f200 8096 	bhi.w	80048ec <prvProcessReceivedCommands+0x19c>
 80047c0:	a201      	add	r2, pc, #4	; (adr r2, 80047c8 <prvProcessReceivedCommands+0x78>)
 80047c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c6:	bf00      	nop
 80047c8:	080047f1 	.word	0x080047f1
 80047cc:	080047f1 	.word	0x080047f1
 80047d0:	080047f1 	.word	0x080047f1
 80047d4:	08004865 	.word	0x08004865
 80047d8:	08004879 	.word	0x08004879
 80047dc:	080048c3 	.word	0x080048c3
 80047e0:	080047f1 	.word	0x080047f1
 80047e4:	080047f1 	.word	0x080047f1
 80047e8:	08004865 	.word	0x08004865
 80047ec:	08004879 	.word	0x08004879
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80047f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047f6:	f043 0301 	orr.w	r3, r3, #1
 80047fa:	b2da      	uxtb	r2, r3
 80047fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	18d1      	adds	r1, r2, r3
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800480e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004810:	f7ff ff5c 	bl	80046cc <prvInsertTimerInActiveList>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d069      	beq.n	80048ee <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800481a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004820:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004824:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004828:	f003 0304 	and.w	r3, r3, #4
 800482c:	2b00      	cmp	r3, #0
 800482e:	d05e      	beq.n	80048ee <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	441a      	add	r2, r3
 8004838:	2300      	movs	r3, #0
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	2300      	movs	r3, #0
 800483e:	2100      	movs	r1, #0
 8004840:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004842:	f7ff fe05 	bl	8004450 <xTimerGenericCommand>
 8004846:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004848:	6a3b      	ldr	r3, [r7, #32]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d14f      	bne.n	80048ee <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800484e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004852:	f383 8811 	msr	BASEPRI, r3
 8004856:	f3bf 8f6f 	isb	sy
 800485a:	f3bf 8f4f 	dsb	sy
 800485e:	61bb      	str	r3, [r7, #24]
}
 8004860:	bf00      	nop
 8004862:	e7fe      	b.n	8004862 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004866:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800486a:	f023 0301 	bic.w	r3, r3, #1
 800486e:	b2da      	uxtb	r2, r3
 8004870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004872:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004876:	e03a      	b.n	80048ee <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800487e:	f043 0301 	orr.w	r3, r3, #1
 8004882:	b2da      	uxtb	r2, r3
 8004884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004886:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10a      	bne.n	80048ae <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489c:	f383 8811 	msr	BASEPRI, r3
 80048a0:	f3bf 8f6f 	isb	sy
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	617b      	str	r3, [r7, #20]
}
 80048aa:	bf00      	nop
 80048ac:	e7fe      	b.n	80048ac <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80048ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b0:	699a      	ldr	r2, [r3, #24]
 80048b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b4:	18d1      	adds	r1, r2, r3
 80048b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048bc:	f7ff ff06 	bl	80046cc <prvInsertTimerInActiveList>
					break;
 80048c0:	e015      	b.n	80048ee <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80048c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d103      	bne.n	80048d8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80048d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048d2:	f000 fbdd 	bl	8005090 <vPortFree>
 80048d6:	e00a      	b.n	80048ee <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80048d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048de:	f023 0301 	bic.w	r3, r3, #1
 80048e2:	b2da      	uxtb	r2, r3
 80048e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80048ea:	e000      	b.n	80048ee <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80048ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80048ee:	4b08      	ldr	r3, [pc, #32]	; (8004910 <prvProcessReceivedCommands+0x1c0>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	1d39      	adds	r1, r7, #4
 80048f4:	2200      	movs	r2, #0
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7fe fb6c 	bl	8002fd4 <xQueueReceive>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f47f af2a 	bne.w	8004758 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004904:	bf00      	nop
 8004906:	bf00      	nop
 8004908:	3730      	adds	r7, #48	; 0x30
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	20000db4 	.word	0x20000db4

08004914 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b088      	sub	sp, #32
 8004918:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800491a:	e048      	b.n	80049ae <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800491c:	4b2d      	ldr	r3, [pc, #180]	; (80049d4 <prvSwitchTimerLists+0xc0>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004926:	4b2b      	ldr	r3, [pc, #172]	; (80049d4 <prvSwitchTimerLists+0xc0>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	3304      	adds	r3, #4
 8004934:	4618      	mov	r0, r3
 8004936:	f7fe f84b 	bl	80029d0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004948:	f003 0304 	and.w	r3, r3, #4
 800494c:	2b00      	cmp	r3, #0
 800494e:	d02e      	beq.n	80049ae <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	4413      	add	r3, r2
 8004958:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	429a      	cmp	r2, r3
 8004960:	d90e      	bls.n	8004980 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	68ba      	ldr	r2, [r7, #8]
 8004966:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800496e:	4b19      	ldr	r3, [pc, #100]	; (80049d4 <prvSwitchTimerLists+0xc0>)
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	3304      	adds	r3, #4
 8004976:	4619      	mov	r1, r3
 8004978:	4610      	mov	r0, r2
 800497a:	f7fd fff0 	bl	800295e <vListInsert>
 800497e:	e016      	b.n	80049ae <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004980:	2300      	movs	r3, #0
 8004982:	9300      	str	r3, [sp, #0]
 8004984:	2300      	movs	r3, #0
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	2100      	movs	r1, #0
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f7ff fd60 	bl	8004450 <xTimerGenericCommand>
 8004990:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10a      	bne.n	80049ae <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499c:	f383 8811 	msr	BASEPRI, r3
 80049a0:	f3bf 8f6f 	isb	sy
 80049a4:	f3bf 8f4f 	dsb	sy
 80049a8:	603b      	str	r3, [r7, #0]
}
 80049aa:	bf00      	nop
 80049ac:	e7fe      	b.n	80049ac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80049ae:	4b09      	ldr	r3, [pc, #36]	; (80049d4 <prvSwitchTimerLists+0xc0>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1b1      	bne.n	800491c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80049b8:	4b06      	ldr	r3, [pc, #24]	; (80049d4 <prvSwitchTimerLists+0xc0>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80049be:	4b06      	ldr	r3, [pc, #24]	; (80049d8 <prvSwitchTimerLists+0xc4>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a04      	ldr	r2, [pc, #16]	; (80049d4 <prvSwitchTimerLists+0xc0>)
 80049c4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80049c6:	4a04      	ldr	r2, [pc, #16]	; (80049d8 <prvSwitchTimerLists+0xc4>)
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	6013      	str	r3, [r2, #0]
}
 80049cc:	bf00      	nop
 80049ce:	3718      	adds	r7, #24
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	20000dac 	.word	0x20000dac
 80049d8:	20000db0 	.word	0x20000db0

080049dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80049e2:	f000 f967 	bl	8004cb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80049e6:	4b15      	ldr	r3, [pc, #84]	; (8004a3c <prvCheckForValidListAndQueue+0x60>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d120      	bne.n	8004a30 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80049ee:	4814      	ldr	r0, [pc, #80]	; (8004a40 <prvCheckForValidListAndQueue+0x64>)
 80049f0:	f7fd ff64 	bl	80028bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80049f4:	4813      	ldr	r0, [pc, #76]	; (8004a44 <prvCheckForValidListAndQueue+0x68>)
 80049f6:	f7fd ff61 	bl	80028bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80049fa:	4b13      	ldr	r3, [pc, #76]	; (8004a48 <prvCheckForValidListAndQueue+0x6c>)
 80049fc:	4a10      	ldr	r2, [pc, #64]	; (8004a40 <prvCheckForValidListAndQueue+0x64>)
 80049fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004a00:	4b12      	ldr	r3, [pc, #72]	; (8004a4c <prvCheckForValidListAndQueue+0x70>)
 8004a02:	4a10      	ldr	r2, [pc, #64]	; (8004a44 <prvCheckForValidListAndQueue+0x68>)
 8004a04:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004a06:	2300      	movs	r3, #0
 8004a08:	9300      	str	r3, [sp, #0]
 8004a0a:	4b11      	ldr	r3, [pc, #68]	; (8004a50 <prvCheckForValidListAndQueue+0x74>)
 8004a0c:	4a11      	ldr	r2, [pc, #68]	; (8004a54 <prvCheckForValidListAndQueue+0x78>)
 8004a0e:	2110      	movs	r1, #16
 8004a10:	200a      	movs	r0, #10
 8004a12:	f7fe f86f 	bl	8002af4 <xQueueGenericCreateStatic>
 8004a16:	4603      	mov	r3, r0
 8004a18:	4a08      	ldr	r2, [pc, #32]	; (8004a3c <prvCheckForValidListAndQueue+0x60>)
 8004a1a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004a1c:	4b07      	ldr	r3, [pc, #28]	; (8004a3c <prvCheckForValidListAndQueue+0x60>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d005      	beq.n	8004a30 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004a24:	4b05      	ldr	r3, [pc, #20]	; (8004a3c <prvCheckForValidListAndQueue+0x60>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	490b      	ldr	r1, [pc, #44]	; (8004a58 <prvCheckForValidListAndQueue+0x7c>)
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7fe fd42 	bl	80034b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a30:	f000 f970 	bl	8004d14 <vPortExitCritical>
}
 8004a34:	bf00      	nop
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	20000db4 	.word	0x20000db4
 8004a40:	20000d84 	.word	0x20000d84
 8004a44:	20000d98 	.word	0x20000d98
 8004a48:	20000dac 	.word	0x20000dac
 8004a4c:	20000db0 	.word	0x20000db0
 8004a50:	20000e60 	.word	0x20000e60
 8004a54:	20000dc0 	.word	0x20000dc0
 8004a58:	08005d54 	.word	0x08005d54

08004a5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	3b04      	subs	r3, #4
 8004a6c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	3b04      	subs	r3, #4
 8004a7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	f023 0201 	bic.w	r2, r3, #1
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	3b04      	subs	r3, #4
 8004a8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004a8c:	4a0c      	ldr	r2, [pc, #48]	; (8004ac0 <pxPortInitialiseStack+0x64>)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	3b14      	subs	r3, #20
 8004a96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	3b04      	subs	r3, #4
 8004aa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f06f 0202 	mvn.w	r2, #2
 8004aaa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	3b20      	subs	r3, #32
 8004ab0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3714      	adds	r7, #20
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr
 8004ac0:	08004ac5 	.word	0x08004ac5

08004ac4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004aca:	2300      	movs	r3, #0
 8004acc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004ace:	4b12      	ldr	r3, [pc, #72]	; (8004b18 <prvTaskExitError+0x54>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ad6:	d00a      	beq.n	8004aee <prvTaskExitError+0x2a>
	__asm volatile
 8004ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004adc:	f383 8811 	msr	BASEPRI, r3
 8004ae0:	f3bf 8f6f 	isb	sy
 8004ae4:	f3bf 8f4f 	dsb	sy
 8004ae8:	60fb      	str	r3, [r7, #12]
}
 8004aea:	bf00      	nop
 8004aec:	e7fe      	b.n	8004aec <prvTaskExitError+0x28>
	__asm volatile
 8004aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af2:	f383 8811 	msr	BASEPRI, r3
 8004af6:	f3bf 8f6f 	isb	sy
 8004afa:	f3bf 8f4f 	dsb	sy
 8004afe:	60bb      	str	r3, [r7, #8]
}
 8004b00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004b02:	bf00      	nop
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d0fc      	beq.n	8004b04 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004b0a:	bf00      	nop
 8004b0c:	bf00      	nop
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr
 8004b18:	2000000c 	.word	0x2000000c
 8004b1c:	00000000 	.word	0x00000000

08004b20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004b20:	4b07      	ldr	r3, [pc, #28]	; (8004b40 <pxCurrentTCBConst2>)
 8004b22:	6819      	ldr	r1, [r3, #0]
 8004b24:	6808      	ldr	r0, [r1, #0]
 8004b26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b2a:	f380 8809 	msr	PSP, r0
 8004b2e:	f3bf 8f6f 	isb	sy
 8004b32:	f04f 0000 	mov.w	r0, #0
 8004b36:	f380 8811 	msr	BASEPRI, r0
 8004b3a:	4770      	bx	lr
 8004b3c:	f3af 8000 	nop.w

08004b40 <pxCurrentTCBConst2>:
 8004b40:	20000884 	.word	0x20000884
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004b44:	bf00      	nop
 8004b46:	bf00      	nop

08004b48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004b48:	4808      	ldr	r0, [pc, #32]	; (8004b6c <prvPortStartFirstTask+0x24>)
 8004b4a:	6800      	ldr	r0, [r0, #0]
 8004b4c:	6800      	ldr	r0, [r0, #0]
 8004b4e:	f380 8808 	msr	MSP, r0
 8004b52:	f04f 0000 	mov.w	r0, #0
 8004b56:	f380 8814 	msr	CONTROL, r0
 8004b5a:	b662      	cpsie	i
 8004b5c:	b661      	cpsie	f
 8004b5e:	f3bf 8f4f 	dsb	sy
 8004b62:	f3bf 8f6f 	isb	sy
 8004b66:	df00      	svc	0
 8004b68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004b6a:	bf00      	nop
 8004b6c:	e000ed08 	.word	0xe000ed08

08004b70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004b76:	4b46      	ldr	r3, [pc, #280]	; (8004c90 <xPortStartScheduler+0x120>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a46      	ldr	r2, [pc, #280]	; (8004c94 <xPortStartScheduler+0x124>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d10a      	bne.n	8004b96 <xPortStartScheduler+0x26>
	__asm volatile
 8004b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b84:	f383 8811 	msr	BASEPRI, r3
 8004b88:	f3bf 8f6f 	isb	sy
 8004b8c:	f3bf 8f4f 	dsb	sy
 8004b90:	613b      	str	r3, [r7, #16]
}
 8004b92:	bf00      	nop
 8004b94:	e7fe      	b.n	8004b94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004b96:	4b3e      	ldr	r3, [pc, #248]	; (8004c90 <xPortStartScheduler+0x120>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a3f      	ldr	r2, [pc, #252]	; (8004c98 <xPortStartScheduler+0x128>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d10a      	bne.n	8004bb6 <xPortStartScheduler+0x46>
	__asm volatile
 8004ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba4:	f383 8811 	msr	BASEPRI, r3
 8004ba8:	f3bf 8f6f 	isb	sy
 8004bac:	f3bf 8f4f 	dsb	sy
 8004bb0:	60fb      	str	r3, [r7, #12]
}
 8004bb2:	bf00      	nop
 8004bb4:	e7fe      	b.n	8004bb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004bb6:	4b39      	ldr	r3, [pc, #228]	; (8004c9c <xPortStartScheduler+0x12c>)
 8004bb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	22ff      	movs	r2, #255	; 0xff
 8004bc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004bd0:	78fb      	ldrb	r3, [r7, #3]
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004bd8:	b2da      	uxtb	r2, r3
 8004bda:	4b31      	ldr	r3, [pc, #196]	; (8004ca0 <xPortStartScheduler+0x130>)
 8004bdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004bde:	4b31      	ldr	r3, [pc, #196]	; (8004ca4 <xPortStartScheduler+0x134>)
 8004be0:	2207      	movs	r2, #7
 8004be2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004be4:	e009      	b.n	8004bfa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004be6:	4b2f      	ldr	r3, [pc, #188]	; (8004ca4 <xPortStartScheduler+0x134>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	3b01      	subs	r3, #1
 8004bec:	4a2d      	ldr	r2, [pc, #180]	; (8004ca4 <xPortStartScheduler+0x134>)
 8004bee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004bf0:	78fb      	ldrb	r3, [r7, #3]
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	005b      	lsls	r3, r3, #1
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004bfa:	78fb      	ldrb	r3, [r7, #3]
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c02:	2b80      	cmp	r3, #128	; 0x80
 8004c04:	d0ef      	beq.n	8004be6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c06:	4b27      	ldr	r3, [pc, #156]	; (8004ca4 <xPortStartScheduler+0x134>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f1c3 0307 	rsb	r3, r3, #7
 8004c0e:	2b04      	cmp	r3, #4
 8004c10:	d00a      	beq.n	8004c28 <xPortStartScheduler+0xb8>
	__asm volatile
 8004c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c16:	f383 8811 	msr	BASEPRI, r3
 8004c1a:	f3bf 8f6f 	isb	sy
 8004c1e:	f3bf 8f4f 	dsb	sy
 8004c22:	60bb      	str	r3, [r7, #8]
}
 8004c24:	bf00      	nop
 8004c26:	e7fe      	b.n	8004c26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c28:	4b1e      	ldr	r3, [pc, #120]	; (8004ca4 <xPortStartScheduler+0x134>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	021b      	lsls	r3, r3, #8
 8004c2e:	4a1d      	ldr	r2, [pc, #116]	; (8004ca4 <xPortStartScheduler+0x134>)
 8004c30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c32:	4b1c      	ldr	r3, [pc, #112]	; (8004ca4 <xPortStartScheduler+0x134>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c3a:	4a1a      	ldr	r2, [pc, #104]	; (8004ca4 <xPortStartScheduler+0x134>)
 8004c3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	b2da      	uxtb	r2, r3
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004c46:	4b18      	ldr	r3, [pc, #96]	; (8004ca8 <xPortStartScheduler+0x138>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a17      	ldr	r2, [pc, #92]	; (8004ca8 <xPortStartScheduler+0x138>)
 8004c4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004c52:	4b15      	ldr	r3, [pc, #84]	; (8004ca8 <xPortStartScheduler+0x138>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a14      	ldr	r2, [pc, #80]	; (8004ca8 <xPortStartScheduler+0x138>)
 8004c58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004c5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004c5e:	f000 f8dd 	bl	8004e1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004c62:	4b12      	ldr	r3, [pc, #72]	; (8004cac <xPortStartScheduler+0x13c>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004c68:	f000 f8fc 	bl	8004e64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004c6c:	4b10      	ldr	r3, [pc, #64]	; (8004cb0 <xPortStartScheduler+0x140>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a0f      	ldr	r2, [pc, #60]	; (8004cb0 <xPortStartScheduler+0x140>)
 8004c72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004c76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004c78:	f7ff ff66 	bl	8004b48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004c7c:	f7ff f84a 	bl	8003d14 <vTaskSwitchContext>
	prvTaskExitError();
 8004c80:	f7ff ff20 	bl	8004ac4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3718      	adds	r7, #24
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	e000ed00 	.word	0xe000ed00
 8004c94:	410fc271 	.word	0x410fc271
 8004c98:	410fc270 	.word	0x410fc270
 8004c9c:	e000e400 	.word	0xe000e400
 8004ca0:	20000eb0 	.word	0x20000eb0
 8004ca4:	20000eb4 	.word	0x20000eb4
 8004ca8:	e000ed20 	.word	0xe000ed20
 8004cac:	2000000c 	.word	0x2000000c
 8004cb0:	e000ef34 	.word	0xe000ef34

08004cb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
	__asm volatile
 8004cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbe:	f383 8811 	msr	BASEPRI, r3
 8004cc2:	f3bf 8f6f 	isb	sy
 8004cc6:	f3bf 8f4f 	dsb	sy
 8004cca:	607b      	str	r3, [r7, #4]
}
 8004ccc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004cce:	4b0f      	ldr	r3, [pc, #60]	; (8004d0c <vPortEnterCritical+0x58>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	4a0d      	ldr	r2, [pc, #52]	; (8004d0c <vPortEnterCritical+0x58>)
 8004cd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004cd8:	4b0c      	ldr	r3, [pc, #48]	; (8004d0c <vPortEnterCritical+0x58>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d10f      	bne.n	8004d00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ce0:	4b0b      	ldr	r3, [pc, #44]	; (8004d10 <vPortEnterCritical+0x5c>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00a      	beq.n	8004d00 <vPortEnterCritical+0x4c>
	__asm volatile
 8004cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cee:	f383 8811 	msr	BASEPRI, r3
 8004cf2:	f3bf 8f6f 	isb	sy
 8004cf6:	f3bf 8f4f 	dsb	sy
 8004cfa:	603b      	str	r3, [r7, #0]
}
 8004cfc:	bf00      	nop
 8004cfe:	e7fe      	b.n	8004cfe <vPortEnterCritical+0x4a>
	}
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr
 8004d0c:	2000000c 	.word	0x2000000c
 8004d10:	e000ed04 	.word	0xe000ed04

08004d14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004d1a:	4b12      	ldr	r3, [pc, #72]	; (8004d64 <vPortExitCritical+0x50>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10a      	bne.n	8004d38 <vPortExitCritical+0x24>
	__asm volatile
 8004d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d26:	f383 8811 	msr	BASEPRI, r3
 8004d2a:	f3bf 8f6f 	isb	sy
 8004d2e:	f3bf 8f4f 	dsb	sy
 8004d32:	607b      	str	r3, [r7, #4]
}
 8004d34:	bf00      	nop
 8004d36:	e7fe      	b.n	8004d36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004d38:	4b0a      	ldr	r3, [pc, #40]	; (8004d64 <vPortExitCritical+0x50>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	4a09      	ldr	r2, [pc, #36]	; (8004d64 <vPortExitCritical+0x50>)
 8004d40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004d42:	4b08      	ldr	r3, [pc, #32]	; (8004d64 <vPortExitCritical+0x50>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d105      	bne.n	8004d56 <vPortExitCritical+0x42>
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	f383 8811 	msr	BASEPRI, r3
}
 8004d54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004d56:	bf00      	nop
 8004d58:	370c      	adds	r7, #12
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	2000000c 	.word	0x2000000c
	...

08004d70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004d70:	f3ef 8009 	mrs	r0, PSP
 8004d74:	f3bf 8f6f 	isb	sy
 8004d78:	4b15      	ldr	r3, [pc, #84]	; (8004dd0 <pxCurrentTCBConst>)
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	f01e 0f10 	tst.w	lr, #16
 8004d80:	bf08      	it	eq
 8004d82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004d86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d8a:	6010      	str	r0, [r2, #0]
 8004d8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004d90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004d94:	f380 8811 	msr	BASEPRI, r0
 8004d98:	f3bf 8f4f 	dsb	sy
 8004d9c:	f3bf 8f6f 	isb	sy
 8004da0:	f7fe ffb8 	bl	8003d14 <vTaskSwitchContext>
 8004da4:	f04f 0000 	mov.w	r0, #0
 8004da8:	f380 8811 	msr	BASEPRI, r0
 8004dac:	bc09      	pop	{r0, r3}
 8004dae:	6819      	ldr	r1, [r3, #0]
 8004db0:	6808      	ldr	r0, [r1, #0]
 8004db2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004db6:	f01e 0f10 	tst.w	lr, #16
 8004dba:	bf08      	it	eq
 8004dbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004dc0:	f380 8809 	msr	PSP, r0
 8004dc4:	f3bf 8f6f 	isb	sy
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	f3af 8000 	nop.w

08004dd0 <pxCurrentTCBConst>:
 8004dd0:	20000884 	.word	0x20000884
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004dd4:	bf00      	nop
 8004dd6:	bf00      	nop

08004dd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
	__asm volatile
 8004dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de2:	f383 8811 	msr	BASEPRI, r3
 8004de6:	f3bf 8f6f 	isb	sy
 8004dea:	f3bf 8f4f 	dsb	sy
 8004dee:	607b      	str	r3, [r7, #4]
}
 8004df0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004df2:	f7fe fed5 	bl	8003ba0 <xTaskIncrementTick>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d003      	beq.n	8004e04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004dfc:	4b06      	ldr	r3, [pc, #24]	; (8004e18 <xPortSysTickHandler+0x40>)
 8004dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e02:	601a      	str	r2, [r3, #0]
 8004e04:	2300      	movs	r3, #0
 8004e06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	f383 8811 	msr	BASEPRI, r3
}
 8004e0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004e10:	bf00      	nop
 8004e12:	3708      	adds	r7, #8
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	e000ed04 	.word	0xe000ed04

08004e1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e20:	4b0b      	ldr	r3, [pc, #44]	; (8004e50 <vPortSetupTimerInterrupt+0x34>)
 8004e22:	2200      	movs	r2, #0
 8004e24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e26:	4b0b      	ldr	r3, [pc, #44]	; (8004e54 <vPortSetupTimerInterrupt+0x38>)
 8004e28:	2200      	movs	r2, #0
 8004e2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e2c:	4b0a      	ldr	r3, [pc, #40]	; (8004e58 <vPortSetupTimerInterrupt+0x3c>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a0a      	ldr	r2, [pc, #40]	; (8004e5c <vPortSetupTimerInterrupt+0x40>)
 8004e32:	fba2 2303 	umull	r2, r3, r2, r3
 8004e36:	099b      	lsrs	r3, r3, #6
 8004e38:	4a09      	ldr	r2, [pc, #36]	; (8004e60 <vPortSetupTimerInterrupt+0x44>)
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004e3e:	4b04      	ldr	r3, [pc, #16]	; (8004e50 <vPortSetupTimerInterrupt+0x34>)
 8004e40:	2207      	movs	r2, #7
 8004e42:	601a      	str	r2, [r3, #0]
}
 8004e44:	bf00      	nop
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	e000e010 	.word	0xe000e010
 8004e54:	e000e018 	.word	0xe000e018
 8004e58:	20000000 	.word	0x20000000
 8004e5c:	10624dd3 	.word	0x10624dd3
 8004e60:	e000e014 	.word	0xe000e014

08004e64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004e64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004e74 <vPortEnableVFP+0x10>
 8004e68:	6801      	ldr	r1, [r0, #0]
 8004e6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004e6e:	6001      	str	r1, [r0, #0]
 8004e70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004e72:	bf00      	nop
 8004e74:	e000ed88 	.word	0xe000ed88

08004e78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004e7e:	f3ef 8305 	mrs	r3, IPSR
 8004e82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2b0f      	cmp	r3, #15
 8004e88:	d914      	bls.n	8004eb4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004e8a:	4a17      	ldr	r2, [pc, #92]	; (8004ee8 <vPortValidateInterruptPriority+0x70>)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	4413      	add	r3, r2
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004e94:	4b15      	ldr	r3, [pc, #84]	; (8004eec <vPortValidateInterruptPriority+0x74>)
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	7afa      	ldrb	r2, [r7, #11]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d20a      	bcs.n	8004eb4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	607b      	str	r3, [r7, #4]
}
 8004eb0:	bf00      	nop
 8004eb2:	e7fe      	b.n	8004eb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004eb4:	4b0e      	ldr	r3, [pc, #56]	; (8004ef0 <vPortValidateInterruptPriority+0x78>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ebc:	4b0d      	ldr	r3, [pc, #52]	; (8004ef4 <vPortValidateInterruptPriority+0x7c>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d90a      	bls.n	8004eda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec8:	f383 8811 	msr	BASEPRI, r3
 8004ecc:	f3bf 8f6f 	isb	sy
 8004ed0:	f3bf 8f4f 	dsb	sy
 8004ed4:	603b      	str	r3, [r7, #0]
}
 8004ed6:	bf00      	nop
 8004ed8:	e7fe      	b.n	8004ed8 <vPortValidateInterruptPriority+0x60>
	}
 8004eda:	bf00      	nop
 8004edc:	3714      	adds	r7, #20
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	e000e3f0 	.word	0xe000e3f0
 8004eec:	20000eb0 	.word	0x20000eb0
 8004ef0:	e000ed0c 	.word	0xe000ed0c
 8004ef4:	20000eb4 	.word	0x20000eb4

08004ef8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b08a      	sub	sp, #40	; 0x28
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f00:	2300      	movs	r3, #0
 8004f02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004f04:	f7fe fd90 	bl	8003a28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f08:	4b5b      	ldr	r3, [pc, #364]	; (8005078 <pvPortMalloc+0x180>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d101      	bne.n	8004f14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f10:	f000 f920 	bl	8005154 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f14:	4b59      	ldr	r3, [pc, #356]	; (800507c <pvPortMalloc+0x184>)
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f040 8093 	bne.w	8005048 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d01d      	beq.n	8004f64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004f28:	2208      	movs	r2, #8
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f003 0307 	and.w	r3, r3, #7
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d014      	beq.n	8004f64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f023 0307 	bic.w	r3, r3, #7
 8004f40:	3308      	adds	r3, #8
 8004f42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f003 0307 	and.w	r3, r3, #7
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00a      	beq.n	8004f64 <pvPortMalloc+0x6c>
	__asm volatile
 8004f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f52:	f383 8811 	msr	BASEPRI, r3
 8004f56:	f3bf 8f6f 	isb	sy
 8004f5a:	f3bf 8f4f 	dsb	sy
 8004f5e:	617b      	str	r3, [r7, #20]
}
 8004f60:	bf00      	nop
 8004f62:	e7fe      	b.n	8004f62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d06e      	beq.n	8005048 <pvPortMalloc+0x150>
 8004f6a:	4b45      	ldr	r3, [pc, #276]	; (8005080 <pvPortMalloc+0x188>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d869      	bhi.n	8005048 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004f74:	4b43      	ldr	r3, [pc, #268]	; (8005084 <pvPortMalloc+0x18c>)
 8004f76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004f78:	4b42      	ldr	r3, [pc, #264]	; (8005084 <pvPortMalloc+0x18c>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f7e:	e004      	b.n	8004f8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d903      	bls.n	8004f9c <pvPortMalloc+0xa4>
 8004f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1f1      	bne.n	8004f80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004f9c:	4b36      	ldr	r3, [pc, #216]	; (8005078 <pvPortMalloc+0x180>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d050      	beq.n	8005048 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2208      	movs	r2, #8
 8004fac:	4413      	add	r3, r2
 8004fae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	6a3b      	ldr	r3, [r7, #32]
 8004fb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	1ad2      	subs	r2, r2, r3
 8004fc0:	2308      	movs	r3, #8
 8004fc2:	005b      	lsls	r3, r3, #1
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d91f      	bls.n	8005008 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4413      	add	r3, r2
 8004fce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	f003 0307 	and.w	r3, r3, #7
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00a      	beq.n	8004ff0 <pvPortMalloc+0xf8>
	__asm volatile
 8004fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fde:	f383 8811 	msr	BASEPRI, r3
 8004fe2:	f3bf 8f6f 	isb	sy
 8004fe6:	f3bf 8f4f 	dsb	sy
 8004fea:	613b      	str	r3, [r7, #16]
}
 8004fec:	bf00      	nop
 8004fee:	e7fe      	b.n	8004fee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	1ad2      	subs	r2, r2, r3
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005002:	69b8      	ldr	r0, [r7, #24]
 8005004:	f000 f908 	bl	8005218 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005008:	4b1d      	ldr	r3, [pc, #116]	; (8005080 <pvPortMalloc+0x188>)
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	4a1b      	ldr	r2, [pc, #108]	; (8005080 <pvPortMalloc+0x188>)
 8005014:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005016:	4b1a      	ldr	r3, [pc, #104]	; (8005080 <pvPortMalloc+0x188>)
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	4b1b      	ldr	r3, [pc, #108]	; (8005088 <pvPortMalloc+0x190>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	429a      	cmp	r2, r3
 8005020:	d203      	bcs.n	800502a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005022:	4b17      	ldr	r3, [pc, #92]	; (8005080 <pvPortMalloc+0x188>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a18      	ldr	r2, [pc, #96]	; (8005088 <pvPortMalloc+0x190>)
 8005028:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800502a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502c:	685a      	ldr	r2, [r3, #4]
 800502e:	4b13      	ldr	r3, [pc, #76]	; (800507c <pvPortMalloc+0x184>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	431a      	orrs	r2, r3
 8005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005036:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503a:	2200      	movs	r2, #0
 800503c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800503e:	4b13      	ldr	r3, [pc, #76]	; (800508c <pvPortMalloc+0x194>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	3301      	adds	r3, #1
 8005044:	4a11      	ldr	r2, [pc, #68]	; (800508c <pvPortMalloc+0x194>)
 8005046:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005048:	f7fe fcfc 	bl	8003a44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	f003 0307 	and.w	r3, r3, #7
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00a      	beq.n	800506c <pvPortMalloc+0x174>
	__asm volatile
 8005056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505a:	f383 8811 	msr	BASEPRI, r3
 800505e:	f3bf 8f6f 	isb	sy
 8005062:	f3bf 8f4f 	dsb	sy
 8005066:	60fb      	str	r3, [r7, #12]
}
 8005068:	bf00      	nop
 800506a:	e7fe      	b.n	800506a <pvPortMalloc+0x172>
	return pvReturn;
 800506c:	69fb      	ldr	r3, [r7, #28]
}
 800506e:	4618      	mov	r0, r3
 8005070:	3728      	adds	r7, #40	; 0x28
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	20004ac0 	.word	0x20004ac0
 800507c:	20004ad4 	.word	0x20004ad4
 8005080:	20004ac4 	.word	0x20004ac4
 8005084:	20004ab8 	.word	0x20004ab8
 8005088:	20004ac8 	.word	0x20004ac8
 800508c:	20004acc 	.word	0x20004acc

08005090 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d04d      	beq.n	800513e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80050a2:	2308      	movs	r3, #8
 80050a4:	425b      	negs	r3, r3
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	4413      	add	r3, r2
 80050aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	685a      	ldr	r2, [r3, #4]
 80050b4:	4b24      	ldr	r3, [pc, #144]	; (8005148 <vPortFree+0xb8>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4013      	ands	r3, r2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10a      	bne.n	80050d4 <vPortFree+0x44>
	__asm volatile
 80050be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c2:	f383 8811 	msr	BASEPRI, r3
 80050c6:	f3bf 8f6f 	isb	sy
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	60fb      	str	r3, [r7, #12]
}
 80050d0:	bf00      	nop
 80050d2:	e7fe      	b.n	80050d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00a      	beq.n	80050f2 <vPortFree+0x62>
	__asm volatile
 80050dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e0:	f383 8811 	msr	BASEPRI, r3
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	60bb      	str	r3, [r7, #8]
}
 80050ee:	bf00      	nop
 80050f0:	e7fe      	b.n	80050f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	685a      	ldr	r2, [r3, #4]
 80050f6:	4b14      	ldr	r3, [pc, #80]	; (8005148 <vPortFree+0xb8>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4013      	ands	r3, r2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d01e      	beq.n	800513e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d11a      	bne.n	800513e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	685a      	ldr	r2, [r3, #4]
 800510c:	4b0e      	ldr	r3, [pc, #56]	; (8005148 <vPortFree+0xb8>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	43db      	mvns	r3, r3
 8005112:	401a      	ands	r2, r3
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005118:	f7fe fc86 	bl	8003a28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	4b0a      	ldr	r3, [pc, #40]	; (800514c <vPortFree+0xbc>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4413      	add	r3, r2
 8005126:	4a09      	ldr	r2, [pc, #36]	; (800514c <vPortFree+0xbc>)
 8005128:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800512a:	6938      	ldr	r0, [r7, #16]
 800512c:	f000 f874 	bl	8005218 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005130:	4b07      	ldr	r3, [pc, #28]	; (8005150 <vPortFree+0xc0>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	3301      	adds	r3, #1
 8005136:	4a06      	ldr	r2, [pc, #24]	; (8005150 <vPortFree+0xc0>)
 8005138:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800513a:	f7fe fc83 	bl	8003a44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800513e:	bf00      	nop
 8005140:	3718      	adds	r7, #24
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	20004ad4 	.word	0x20004ad4
 800514c:	20004ac4 	.word	0x20004ac4
 8005150:	20004ad0 	.word	0x20004ad0

08005154 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800515a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800515e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005160:	4b27      	ldr	r3, [pc, #156]	; (8005200 <prvHeapInit+0xac>)
 8005162:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f003 0307 	and.w	r3, r3, #7
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00c      	beq.n	8005188 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	3307      	adds	r3, #7
 8005172:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f023 0307 	bic.w	r3, r3, #7
 800517a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	4a1f      	ldr	r2, [pc, #124]	; (8005200 <prvHeapInit+0xac>)
 8005184:	4413      	add	r3, r2
 8005186:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800518c:	4a1d      	ldr	r2, [pc, #116]	; (8005204 <prvHeapInit+0xb0>)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005192:	4b1c      	ldr	r3, [pc, #112]	; (8005204 <prvHeapInit+0xb0>)
 8005194:	2200      	movs	r2, #0
 8005196:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	4413      	add	r3, r2
 800519e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80051a0:	2208      	movs	r2, #8
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	1a9b      	subs	r3, r3, r2
 80051a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f023 0307 	bic.w	r3, r3, #7
 80051ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	4a15      	ldr	r2, [pc, #84]	; (8005208 <prvHeapInit+0xb4>)
 80051b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80051b6:	4b14      	ldr	r3, [pc, #80]	; (8005208 <prvHeapInit+0xb4>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2200      	movs	r2, #0
 80051bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80051be:	4b12      	ldr	r3, [pc, #72]	; (8005208 <prvHeapInit+0xb4>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2200      	movs	r2, #0
 80051c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	1ad2      	subs	r2, r2, r3
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80051d4:	4b0c      	ldr	r3, [pc, #48]	; (8005208 <prvHeapInit+0xb4>)
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	4a0a      	ldr	r2, [pc, #40]	; (800520c <prvHeapInit+0xb8>)
 80051e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	4a09      	ldr	r2, [pc, #36]	; (8005210 <prvHeapInit+0xbc>)
 80051ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80051ec:	4b09      	ldr	r3, [pc, #36]	; (8005214 <prvHeapInit+0xc0>)
 80051ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80051f2:	601a      	str	r2, [r3, #0]
}
 80051f4:	bf00      	nop
 80051f6:	3714      	adds	r7, #20
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	20000eb8 	.word	0x20000eb8
 8005204:	20004ab8 	.word	0x20004ab8
 8005208:	20004ac0 	.word	0x20004ac0
 800520c:	20004ac8 	.word	0x20004ac8
 8005210:	20004ac4 	.word	0x20004ac4
 8005214:	20004ad4 	.word	0x20004ad4

08005218 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005220:	4b28      	ldr	r3, [pc, #160]	; (80052c4 <prvInsertBlockIntoFreeList+0xac>)
 8005222:	60fb      	str	r3, [r7, #12]
 8005224:	e002      	b.n	800522c <prvInsertBlockIntoFreeList+0x14>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	60fb      	str	r3, [r7, #12]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	429a      	cmp	r2, r3
 8005234:	d8f7      	bhi.n	8005226 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	4413      	add	r3, r2
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	429a      	cmp	r2, r3
 8005246:	d108      	bne.n	800525a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	441a      	add	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	441a      	add	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	429a      	cmp	r2, r3
 800526c:	d118      	bne.n	80052a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	4b15      	ldr	r3, [pc, #84]	; (80052c8 <prvInsertBlockIntoFreeList+0xb0>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	429a      	cmp	r2, r3
 8005278:	d00d      	beq.n	8005296 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	441a      	add	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	e008      	b.n	80052a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005296:	4b0c      	ldr	r3, [pc, #48]	; (80052c8 <prvInsertBlockIntoFreeList+0xb0>)
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	601a      	str	r2, [r3, #0]
 800529e:	e003      	b.n	80052a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d002      	beq.n	80052b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052b6:	bf00      	nop
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	20004ab8 	.word	0x20004ab8
 80052c8:	20004ac0 	.word	0x20004ac0

080052cc <siprintf>:
 80052cc:	b40e      	push	{r1, r2, r3}
 80052ce:	b500      	push	{lr}
 80052d0:	b09c      	sub	sp, #112	; 0x70
 80052d2:	ab1d      	add	r3, sp, #116	; 0x74
 80052d4:	9002      	str	r0, [sp, #8]
 80052d6:	9006      	str	r0, [sp, #24]
 80052d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80052dc:	4809      	ldr	r0, [pc, #36]	; (8005304 <siprintf+0x38>)
 80052de:	9107      	str	r1, [sp, #28]
 80052e0:	9104      	str	r1, [sp, #16]
 80052e2:	4909      	ldr	r1, [pc, #36]	; (8005308 <siprintf+0x3c>)
 80052e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80052e8:	9105      	str	r1, [sp, #20]
 80052ea:	6800      	ldr	r0, [r0, #0]
 80052ec:	9301      	str	r3, [sp, #4]
 80052ee:	a902      	add	r1, sp, #8
 80052f0:	f000 f9f6 	bl	80056e0 <_svfiprintf_r>
 80052f4:	9b02      	ldr	r3, [sp, #8]
 80052f6:	2200      	movs	r2, #0
 80052f8:	701a      	strb	r2, [r3, #0]
 80052fa:	b01c      	add	sp, #112	; 0x70
 80052fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005300:	b003      	add	sp, #12
 8005302:	4770      	bx	lr
 8005304:	2000005c 	.word	0x2000005c
 8005308:	ffff0208 	.word	0xffff0208

0800530c <memset>:
 800530c:	4402      	add	r2, r0
 800530e:	4603      	mov	r3, r0
 8005310:	4293      	cmp	r3, r2
 8005312:	d100      	bne.n	8005316 <memset+0xa>
 8005314:	4770      	bx	lr
 8005316:	f803 1b01 	strb.w	r1, [r3], #1
 800531a:	e7f9      	b.n	8005310 <memset+0x4>

0800531c <_reclaim_reent>:
 800531c:	4b29      	ldr	r3, [pc, #164]	; (80053c4 <_reclaim_reent+0xa8>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4283      	cmp	r3, r0
 8005322:	b570      	push	{r4, r5, r6, lr}
 8005324:	4604      	mov	r4, r0
 8005326:	d04b      	beq.n	80053c0 <_reclaim_reent+0xa4>
 8005328:	69c3      	ldr	r3, [r0, #28]
 800532a:	b143      	cbz	r3, 800533e <_reclaim_reent+0x22>
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d144      	bne.n	80053bc <_reclaim_reent+0xa0>
 8005332:	69e3      	ldr	r3, [r4, #28]
 8005334:	6819      	ldr	r1, [r3, #0]
 8005336:	b111      	cbz	r1, 800533e <_reclaim_reent+0x22>
 8005338:	4620      	mov	r0, r4
 800533a:	f000 f87f 	bl	800543c <_free_r>
 800533e:	6961      	ldr	r1, [r4, #20]
 8005340:	b111      	cbz	r1, 8005348 <_reclaim_reent+0x2c>
 8005342:	4620      	mov	r0, r4
 8005344:	f000 f87a 	bl	800543c <_free_r>
 8005348:	69e1      	ldr	r1, [r4, #28]
 800534a:	b111      	cbz	r1, 8005352 <_reclaim_reent+0x36>
 800534c:	4620      	mov	r0, r4
 800534e:	f000 f875 	bl	800543c <_free_r>
 8005352:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005354:	b111      	cbz	r1, 800535c <_reclaim_reent+0x40>
 8005356:	4620      	mov	r0, r4
 8005358:	f000 f870 	bl	800543c <_free_r>
 800535c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800535e:	b111      	cbz	r1, 8005366 <_reclaim_reent+0x4a>
 8005360:	4620      	mov	r0, r4
 8005362:	f000 f86b 	bl	800543c <_free_r>
 8005366:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005368:	b111      	cbz	r1, 8005370 <_reclaim_reent+0x54>
 800536a:	4620      	mov	r0, r4
 800536c:	f000 f866 	bl	800543c <_free_r>
 8005370:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005372:	b111      	cbz	r1, 800537a <_reclaim_reent+0x5e>
 8005374:	4620      	mov	r0, r4
 8005376:	f000 f861 	bl	800543c <_free_r>
 800537a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800537c:	b111      	cbz	r1, 8005384 <_reclaim_reent+0x68>
 800537e:	4620      	mov	r0, r4
 8005380:	f000 f85c 	bl	800543c <_free_r>
 8005384:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005386:	b111      	cbz	r1, 800538e <_reclaim_reent+0x72>
 8005388:	4620      	mov	r0, r4
 800538a:	f000 f857 	bl	800543c <_free_r>
 800538e:	6a23      	ldr	r3, [r4, #32]
 8005390:	b1b3      	cbz	r3, 80053c0 <_reclaim_reent+0xa4>
 8005392:	4620      	mov	r0, r4
 8005394:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005398:	4718      	bx	r3
 800539a:	5949      	ldr	r1, [r1, r5]
 800539c:	b941      	cbnz	r1, 80053b0 <_reclaim_reent+0x94>
 800539e:	3504      	adds	r5, #4
 80053a0:	69e3      	ldr	r3, [r4, #28]
 80053a2:	2d80      	cmp	r5, #128	; 0x80
 80053a4:	68d9      	ldr	r1, [r3, #12]
 80053a6:	d1f8      	bne.n	800539a <_reclaim_reent+0x7e>
 80053a8:	4620      	mov	r0, r4
 80053aa:	f000 f847 	bl	800543c <_free_r>
 80053ae:	e7c0      	b.n	8005332 <_reclaim_reent+0x16>
 80053b0:	680e      	ldr	r6, [r1, #0]
 80053b2:	4620      	mov	r0, r4
 80053b4:	f000 f842 	bl	800543c <_free_r>
 80053b8:	4631      	mov	r1, r6
 80053ba:	e7ef      	b.n	800539c <_reclaim_reent+0x80>
 80053bc:	2500      	movs	r5, #0
 80053be:	e7ef      	b.n	80053a0 <_reclaim_reent+0x84>
 80053c0:	bd70      	pop	{r4, r5, r6, pc}
 80053c2:	bf00      	nop
 80053c4:	2000005c 	.word	0x2000005c

080053c8 <__errno>:
 80053c8:	4b01      	ldr	r3, [pc, #4]	; (80053d0 <__errno+0x8>)
 80053ca:	6818      	ldr	r0, [r3, #0]
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	2000005c 	.word	0x2000005c

080053d4 <__libc_init_array>:
 80053d4:	b570      	push	{r4, r5, r6, lr}
 80053d6:	4d0d      	ldr	r5, [pc, #52]	; (800540c <__libc_init_array+0x38>)
 80053d8:	4c0d      	ldr	r4, [pc, #52]	; (8005410 <__libc_init_array+0x3c>)
 80053da:	1b64      	subs	r4, r4, r5
 80053dc:	10a4      	asrs	r4, r4, #2
 80053de:	2600      	movs	r6, #0
 80053e0:	42a6      	cmp	r6, r4
 80053e2:	d109      	bne.n	80053f8 <__libc_init_array+0x24>
 80053e4:	4d0b      	ldr	r5, [pc, #44]	; (8005414 <__libc_init_array+0x40>)
 80053e6:	4c0c      	ldr	r4, [pc, #48]	; (8005418 <__libc_init_array+0x44>)
 80053e8:	f000 fc6a 	bl	8005cc0 <_init>
 80053ec:	1b64      	subs	r4, r4, r5
 80053ee:	10a4      	asrs	r4, r4, #2
 80053f0:	2600      	movs	r6, #0
 80053f2:	42a6      	cmp	r6, r4
 80053f4:	d105      	bne.n	8005402 <__libc_init_array+0x2e>
 80053f6:	bd70      	pop	{r4, r5, r6, pc}
 80053f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80053fc:	4798      	blx	r3
 80053fe:	3601      	adds	r6, #1
 8005400:	e7ee      	b.n	80053e0 <__libc_init_array+0xc>
 8005402:	f855 3b04 	ldr.w	r3, [r5], #4
 8005406:	4798      	blx	r3
 8005408:	3601      	adds	r6, #1
 800540a:	e7f2      	b.n	80053f2 <__libc_init_array+0x1e>
 800540c:	08005ee8 	.word	0x08005ee8
 8005410:	08005ee8 	.word	0x08005ee8
 8005414:	08005ee8 	.word	0x08005ee8
 8005418:	08005eec 	.word	0x08005eec

0800541c <__retarget_lock_acquire_recursive>:
 800541c:	4770      	bx	lr

0800541e <__retarget_lock_release_recursive>:
 800541e:	4770      	bx	lr

08005420 <memcpy>:
 8005420:	440a      	add	r2, r1
 8005422:	4291      	cmp	r1, r2
 8005424:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005428:	d100      	bne.n	800542c <memcpy+0xc>
 800542a:	4770      	bx	lr
 800542c:	b510      	push	{r4, lr}
 800542e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005432:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005436:	4291      	cmp	r1, r2
 8005438:	d1f9      	bne.n	800542e <memcpy+0xe>
 800543a:	bd10      	pop	{r4, pc}

0800543c <_free_r>:
 800543c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800543e:	2900      	cmp	r1, #0
 8005440:	d044      	beq.n	80054cc <_free_r+0x90>
 8005442:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005446:	9001      	str	r0, [sp, #4]
 8005448:	2b00      	cmp	r3, #0
 800544a:	f1a1 0404 	sub.w	r4, r1, #4
 800544e:	bfb8      	it	lt
 8005450:	18e4      	addlt	r4, r4, r3
 8005452:	f000 f8df 	bl	8005614 <__malloc_lock>
 8005456:	4a1e      	ldr	r2, [pc, #120]	; (80054d0 <_free_r+0x94>)
 8005458:	9801      	ldr	r0, [sp, #4]
 800545a:	6813      	ldr	r3, [r2, #0]
 800545c:	b933      	cbnz	r3, 800546c <_free_r+0x30>
 800545e:	6063      	str	r3, [r4, #4]
 8005460:	6014      	str	r4, [r2, #0]
 8005462:	b003      	add	sp, #12
 8005464:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005468:	f000 b8da 	b.w	8005620 <__malloc_unlock>
 800546c:	42a3      	cmp	r3, r4
 800546e:	d908      	bls.n	8005482 <_free_r+0x46>
 8005470:	6825      	ldr	r5, [r4, #0]
 8005472:	1961      	adds	r1, r4, r5
 8005474:	428b      	cmp	r3, r1
 8005476:	bf01      	itttt	eq
 8005478:	6819      	ldreq	r1, [r3, #0]
 800547a:	685b      	ldreq	r3, [r3, #4]
 800547c:	1949      	addeq	r1, r1, r5
 800547e:	6021      	streq	r1, [r4, #0]
 8005480:	e7ed      	b.n	800545e <_free_r+0x22>
 8005482:	461a      	mov	r2, r3
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	b10b      	cbz	r3, 800548c <_free_r+0x50>
 8005488:	42a3      	cmp	r3, r4
 800548a:	d9fa      	bls.n	8005482 <_free_r+0x46>
 800548c:	6811      	ldr	r1, [r2, #0]
 800548e:	1855      	adds	r5, r2, r1
 8005490:	42a5      	cmp	r5, r4
 8005492:	d10b      	bne.n	80054ac <_free_r+0x70>
 8005494:	6824      	ldr	r4, [r4, #0]
 8005496:	4421      	add	r1, r4
 8005498:	1854      	adds	r4, r2, r1
 800549a:	42a3      	cmp	r3, r4
 800549c:	6011      	str	r1, [r2, #0]
 800549e:	d1e0      	bne.n	8005462 <_free_r+0x26>
 80054a0:	681c      	ldr	r4, [r3, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	6053      	str	r3, [r2, #4]
 80054a6:	440c      	add	r4, r1
 80054a8:	6014      	str	r4, [r2, #0]
 80054aa:	e7da      	b.n	8005462 <_free_r+0x26>
 80054ac:	d902      	bls.n	80054b4 <_free_r+0x78>
 80054ae:	230c      	movs	r3, #12
 80054b0:	6003      	str	r3, [r0, #0]
 80054b2:	e7d6      	b.n	8005462 <_free_r+0x26>
 80054b4:	6825      	ldr	r5, [r4, #0]
 80054b6:	1961      	adds	r1, r4, r5
 80054b8:	428b      	cmp	r3, r1
 80054ba:	bf04      	itt	eq
 80054bc:	6819      	ldreq	r1, [r3, #0]
 80054be:	685b      	ldreq	r3, [r3, #4]
 80054c0:	6063      	str	r3, [r4, #4]
 80054c2:	bf04      	itt	eq
 80054c4:	1949      	addeq	r1, r1, r5
 80054c6:	6021      	streq	r1, [r4, #0]
 80054c8:	6054      	str	r4, [r2, #4]
 80054ca:	e7ca      	b.n	8005462 <_free_r+0x26>
 80054cc:	b003      	add	sp, #12
 80054ce:	bd30      	pop	{r4, r5, pc}
 80054d0:	20004c18 	.word	0x20004c18

080054d4 <sbrk_aligned>:
 80054d4:	b570      	push	{r4, r5, r6, lr}
 80054d6:	4e0e      	ldr	r6, [pc, #56]	; (8005510 <sbrk_aligned+0x3c>)
 80054d8:	460c      	mov	r4, r1
 80054da:	6831      	ldr	r1, [r6, #0]
 80054dc:	4605      	mov	r5, r0
 80054de:	b911      	cbnz	r1, 80054e6 <sbrk_aligned+0x12>
 80054e0:	f000 fba6 	bl	8005c30 <_sbrk_r>
 80054e4:	6030      	str	r0, [r6, #0]
 80054e6:	4621      	mov	r1, r4
 80054e8:	4628      	mov	r0, r5
 80054ea:	f000 fba1 	bl	8005c30 <_sbrk_r>
 80054ee:	1c43      	adds	r3, r0, #1
 80054f0:	d00a      	beq.n	8005508 <sbrk_aligned+0x34>
 80054f2:	1cc4      	adds	r4, r0, #3
 80054f4:	f024 0403 	bic.w	r4, r4, #3
 80054f8:	42a0      	cmp	r0, r4
 80054fa:	d007      	beq.n	800550c <sbrk_aligned+0x38>
 80054fc:	1a21      	subs	r1, r4, r0
 80054fe:	4628      	mov	r0, r5
 8005500:	f000 fb96 	bl	8005c30 <_sbrk_r>
 8005504:	3001      	adds	r0, #1
 8005506:	d101      	bne.n	800550c <sbrk_aligned+0x38>
 8005508:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800550c:	4620      	mov	r0, r4
 800550e:	bd70      	pop	{r4, r5, r6, pc}
 8005510:	20004c1c 	.word	0x20004c1c

08005514 <_malloc_r>:
 8005514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005518:	1ccd      	adds	r5, r1, #3
 800551a:	f025 0503 	bic.w	r5, r5, #3
 800551e:	3508      	adds	r5, #8
 8005520:	2d0c      	cmp	r5, #12
 8005522:	bf38      	it	cc
 8005524:	250c      	movcc	r5, #12
 8005526:	2d00      	cmp	r5, #0
 8005528:	4607      	mov	r7, r0
 800552a:	db01      	blt.n	8005530 <_malloc_r+0x1c>
 800552c:	42a9      	cmp	r1, r5
 800552e:	d905      	bls.n	800553c <_malloc_r+0x28>
 8005530:	230c      	movs	r3, #12
 8005532:	603b      	str	r3, [r7, #0]
 8005534:	2600      	movs	r6, #0
 8005536:	4630      	mov	r0, r6
 8005538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800553c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005610 <_malloc_r+0xfc>
 8005540:	f000 f868 	bl	8005614 <__malloc_lock>
 8005544:	f8d8 3000 	ldr.w	r3, [r8]
 8005548:	461c      	mov	r4, r3
 800554a:	bb5c      	cbnz	r4, 80055a4 <_malloc_r+0x90>
 800554c:	4629      	mov	r1, r5
 800554e:	4638      	mov	r0, r7
 8005550:	f7ff ffc0 	bl	80054d4 <sbrk_aligned>
 8005554:	1c43      	adds	r3, r0, #1
 8005556:	4604      	mov	r4, r0
 8005558:	d155      	bne.n	8005606 <_malloc_r+0xf2>
 800555a:	f8d8 4000 	ldr.w	r4, [r8]
 800555e:	4626      	mov	r6, r4
 8005560:	2e00      	cmp	r6, #0
 8005562:	d145      	bne.n	80055f0 <_malloc_r+0xdc>
 8005564:	2c00      	cmp	r4, #0
 8005566:	d048      	beq.n	80055fa <_malloc_r+0xe6>
 8005568:	6823      	ldr	r3, [r4, #0]
 800556a:	4631      	mov	r1, r6
 800556c:	4638      	mov	r0, r7
 800556e:	eb04 0903 	add.w	r9, r4, r3
 8005572:	f000 fb5d 	bl	8005c30 <_sbrk_r>
 8005576:	4581      	cmp	r9, r0
 8005578:	d13f      	bne.n	80055fa <_malloc_r+0xe6>
 800557a:	6821      	ldr	r1, [r4, #0]
 800557c:	1a6d      	subs	r5, r5, r1
 800557e:	4629      	mov	r1, r5
 8005580:	4638      	mov	r0, r7
 8005582:	f7ff ffa7 	bl	80054d4 <sbrk_aligned>
 8005586:	3001      	adds	r0, #1
 8005588:	d037      	beq.n	80055fa <_malloc_r+0xe6>
 800558a:	6823      	ldr	r3, [r4, #0]
 800558c:	442b      	add	r3, r5
 800558e:	6023      	str	r3, [r4, #0]
 8005590:	f8d8 3000 	ldr.w	r3, [r8]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d038      	beq.n	800560a <_malloc_r+0xf6>
 8005598:	685a      	ldr	r2, [r3, #4]
 800559a:	42a2      	cmp	r2, r4
 800559c:	d12b      	bne.n	80055f6 <_malloc_r+0xe2>
 800559e:	2200      	movs	r2, #0
 80055a0:	605a      	str	r2, [r3, #4]
 80055a2:	e00f      	b.n	80055c4 <_malloc_r+0xb0>
 80055a4:	6822      	ldr	r2, [r4, #0]
 80055a6:	1b52      	subs	r2, r2, r5
 80055a8:	d41f      	bmi.n	80055ea <_malloc_r+0xd6>
 80055aa:	2a0b      	cmp	r2, #11
 80055ac:	d917      	bls.n	80055de <_malloc_r+0xca>
 80055ae:	1961      	adds	r1, r4, r5
 80055b0:	42a3      	cmp	r3, r4
 80055b2:	6025      	str	r5, [r4, #0]
 80055b4:	bf18      	it	ne
 80055b6:	6059      	strne	r1, [r3, #4]
 80055b8:	6863      	ldr	r3, [r4, #4]
 80055ba:	bf08      	it	eq
 80055bc:	f8c8 1000 	streq.w	r1, [r8]
 80055c0:	5162      	str	r2, [r4, r5]
 80055c2:	604b      	str	r3, [r1, #4]
 80055c4:	4638      	mov	r0, r7
 80055c6:	f104 060b 	add.w	r6, r4, #11
 80055ca:	f000 f829 	bl	8005620 <__malloc_unlock>
 80055ce:	f026 0607 	bic.w	r6, r6, #7
 80055d2:	1d23      	adds	r3, r4, #4
 80055d4:	1af2      	subs	r2, r6, r3
 80055d6:	d0ae      	beq.n	8005536 <_malloc_r+0x22>
 80055d8:	1b9b      	subs	r3, r3, r6
 80055da:	50a3      	str	r3, [r4, r2]
 80055dc:	e7ab      	b.n	8005536 <_malloc_r+0x22>
 80055de:	42a3      	cmp	r3, r4
 80055e0:	6862      	ldr	r2, [r4, #4]
 80055e2:	d1dd      	bne.n	80055a0 <_malloc_r+0x8c>
 80055e4:	f8c8 2000 	str.w	r2, [r8]
 80055e8:	e7ec      	b.n	80055c4 <_malloc_r+0xb0>
 80055ea:	4623      	mov	r3, r4
 80055ec:	6864      	ldr	r4, [r4, #4]
 80055ee:	e7ac      	b.n	800554a <_malloc_r+0x36>
 80055f0:	4634      	mov	r4, r6
 80055f2:	6876      	ldr	r6, [r6, #4]
 80055f4:	e7b4      	b.n	8005560 <_malloc_r+0x4c>
 80055f6:	4613      	mov	r3, r2
 80055f8:	e7cc      	b.n	8005594 <_malloc_r+0x80>
 80055fa:	230c      	movs	r3, #12
 80055fc:	603b      	str	r3, [r7, #0]
 80055fe:	4638      	mov	r0, r7
 8005600:	f000 f80e 	bl	8005620 <__malloc_unlock>
 8005604:	e797      	b.n	8005536 <_malloc_r+0x22>
 8005606:	6025      	str	r5, [r4, #0]
 8005608:	e7dc      	b.n	80055c4 <_malloc_r+0xb0>
 800560a:	605b      	str	r3, [r3, #4]
 800560c:	deff      	udf	#255	; 0xff
 800560e:	bf00      	nop
 8005610:	20004c18 	.word	0x20004c18

08005614 <__malloc_lock>:
 8005614:	4801      	ldr	r0, [pc, #4]	; (800561c <__malloc_lock+0x8>)
 8005616:	f7ff bf01 	b.w	800541c <__retarget_lock_acquire_recursive>
 800561a:	bf00      	nop
 800561c:	20004c14 	.word	0x20004c14

08005620 <__malloc_unlock>:
 8005620:	4801      	ldr	r0, [pc, #4]	; (8005628 <__malloc_unlock+0x8>)
 8005622:	f7ff befc 	b.w	800541e <__retarget_lock_release_recursive>
 8005626:	bf00      	nop
 8005628:	20004c14 	.word	0x20004c14

0800562c <__ssputs_r>:
 800562c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005630:	688e      	ldr	r6, [r1, #8]
 8005632:	461f      	mov	r7, r3
 8005634:	42be      	cmp	r6, r7
 8005636:	680b      	ldr	r3, [r1, #0]
 8005638:	4682      	mov	sl, r0
 800563a:	460c      	mov	r4, r1
 800563c:	4690      	mov	r8, r2
 800563e:	d82c      	bhi.n	800569a <__ssputs_r+0x6e>
 8005640:	898a      	ldrh	r2, [r1, #12]
 8005642:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005646:	d026      	beq.n	8005696 <__ssputs_r+0x6a>
 8005648:	6965      	ldr	r5, [r4, #20]
 800564a:	6909      	ldr	r1, [r1, #16]
 800564c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005650:	eba3 0901 	sub.w	r9, r3, r1
 8005654:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005658:	1c7b      	adds	r3, r7, #1
 800565a:	444b      	add	r3, r9
 800565c:	106d      	asrs	r5, r5, #1
 800565e:	429d      	cmp	r5, r3
 8005660:	bf38      	it	cc
 8005662:	461d      	movcc	r5, r3
 8005664:	0553      	lsls	r3, r2, #21
 8005666:	d527      	bpl.n	80056b8 <__ssputs_r+0x8c>
 8005668:	4629      	mov	r1, r5
 800566a:	f7ff ff53 	bl	8005514 <_malloc_r>
 800566e:	4606      	mov	r6, r0
 8005670:	b360      	cbz	r0, 80056cc <__ssputs_r+0xa0>
 8005672:	6921      	ldr	r1, [r4, #16]
 8005674:	464a      	mov	r2, r9
 8005676:	f7ff fed3 	bl	8005420 <memcpy>
 800567a:	89a3      	ldrh	r3, [r4, #12]
 800567c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005684:	81a3      	strh	r3, [r4, #12]
 8005686:	6126      	str	r6, [r4, #16]
 8005688:	6165      	str	r5, [r4, #20]
 800568a:	444e      	add	r6, r9
 800568c:	eba5 0509 	sub.w	r5, r5, r9
 8005690:	6026      	str	r6, [r4, #0]
 8005692:	60a5      	str	r5, [r4, #8]
 8005694:	463e      	mov	r6, r7
 8005696:	42be      	cmp	r6, r7
 8005698:	d900      	bls.n	800569c <__ssputs_r+0x70>
 800569a:	463e      	mov	r6, r7
 800569c:	6820      	ldr	r0, [r4, #0]
 800569e:	4632      	mov	r2, r6
 80056a0:	4641      	mov	r1, r8
 80056a2:	f000 faab 	bl	8005bfc <memmove>
 80056a6:	68a3      	ldr	r3, [r4, #8]
 80056a8:	1b9b      	subs	r3, r3, r6
 80056aa:	60a3      	str	r3, [r4, #8]
 80056ac:	6823      	ldr	r3, [r4, #0]
 80056ae:	4433      	add	r3, r6
 80056b0:	6023      	str	r3, [r4, #0]
 80056b2:	2000      	movs	r0, #0
 80056b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056b8:	462a      	mov	r2, r5
 80056ba:	f000 fac9 	bl	8005c50 <_realloc_r>
 80056be:	4606      	mov	r6, r0
 80056c0:	2800      	cmp	r0, #0
 80056c2:	d1e0      	bne.n	8005686 <__ssputs_r+0x5a>
 80056c4:	6921      	ldr	r1, [r4, #16]
 80056c6:	4650      	mov	r0, sl
 80056c8:	f7ff feb8 	bl	800543c <_free_r>
 80056cc:	230c      	movs	r3, #12
 80056ce:	f8ca 3000 	str.w	r3, [sl]
 80056d2:	89a3      	ldrh	r3, [r4, #12]
 80056d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056d8:	81a3      	strh	r3, [r4, #12]
 80056da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056de:	e7e9      	b.n	80056b4 <__ssputs_r+0x88>

080056e0 <_svfiprintf_r>:
 80056e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e4:	4698      	mov	r8, r3
 80056e6:	898b      	ldrh	r3, [r1, #12]
 80056e8:	061b      	lsls	r3, r3, #24
 80056ea:	b09d      	sub	sp, #116	; 0x74
 80056ec:	4607      	mov	r7, r0
 80056ee:	460d      	mov	r5, r1
 80056f0:	4614      	mov	r4, r2
 80056f2:	d50e      	bpl.n	8005712 <_svfiprintf_r+0x32>
 80056f4:	690b      	ldr	r3, [r1, #16]
 80056f6:	b963      	cbnz	r3, 8005712 <_svfiprintf_r+0x32>
 80056f8:	2140      	movs	r1, #64	; 0x40
 80056fa:	f7ff ff0b 	bl	8005514 <_malloc_r>
 80056fe:	6028      	str	r0, [r5, #0]
 8005700:	6128      	str	r0, [r5, #16]
 8005702:	b920      	cbnz	r0, 800570e <_svfiprintf_r+0x2e>
 8005704:	230c      	movs	r3, #12
 8005706:	603b      	str	r3, [r7, #0]
 8005708:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800570c:	e0d0      	b.n	80058b0 <_svfiprintf_r+0x1d0>
 800570e:	2340      	movs	r3, #64	; 0x40
 8005710:	616b      	str	r3, [r5, #20]
 8005712:	2300      	movs	r3, #0
 8005714:	9309      	str	r3, [sp, #36]	; 0x24
 8005716:	2320      	movs	r3, #32
 8005718:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800571c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005720:	2330      	movs	r3, #48	; 0x30
 8005722:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80058c8 <_svfiprintf_r+0x1e8>
 8005726:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800572a:	f04f 0901 	mov.w	r9, #1
 800572e:	4623      	mov	r3, r4
 8005730:	469a      	mov	sl, r3
 8005732:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005736:	b10a      	cbz	r2, 800573c <_svfiprintf_r+0x5c>
 8005738:	2a25      	cmp	r2, #37	; 0x25
 800573a:	d1f9      	bne.n	8005730 <_svfiprintf_r+0x50>
 800573c:	ebba 0b04 	subs.w	fp, sl, r4
 8005740:	d00b      	beq.n	800575a <_svfiprintf_r+0x7a>
 8005742:	465b      	mov	r3, fp
 8005744:	4622      	mov	r2, r4
 8005746:	4629      	mov	r1, r5
 8005748:	4638      	mov	r0, r7
 800574a:	f7ff ff6f 	bl	800562c <__ssputs_r>
 800574e:	3001      	adds	r0, #1
 8005750:	f000 80a9 	beq.w	80058a6 <_svfiprintf_r+0x1c6>
 8005754:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005756:	445a      	add	r2, fp
 8005758:	9209      	str	r2, [sp, #36]	; 0x24
 800575a:	f89a 3000 	ldrb.w	r3, [sl]
 800575e:	2b00      	cmp	r3, #0
 8005760:	f000 80a1 	beq.w	80058a6 <_svfiprintf_r+0x1c6>
 8005764:	2300      	movs	r3, #0
 8005766:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800576a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800576e:	f10a 0a01 	add.w	sl, sl, #1
 8005772:	9304      	str	r3, [sp, #16]
 8005774:	9307      	str	r3, [sp, #28]
 8005776:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800577a:	931a      	str	r3, [sp, #104]	; 0x68
 800577c:	4654      	mov	r4, sl
 800577e:	2205      	movs	r2, #5
 8005780:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005784:	4850      	ldr	r0, [pc, #320]	; (80058c8 <_svfiprintf_r+0x1e8>)
 8005786:	f7fa fd2b 	bl	80001e0 <memchr>
 800578a:	9a04      	ldr	r2, [sp, #16]
 800578c:	b9d8      	cbnz	r0, 80057c6 <_svfiprintf_r+0xe6>
 800578e:	06d0      	lsls	r0, r2, #27
 8005790:	bf44      	itt	mi
 8005792:	2320      	movmi	r3, #32
 8005794:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005798:	0711      	lsls	r1, r2, #28
 800579a:	bf44      	itt	mi
 800579c:	232b      	movmi	r3, #43	; 0x2b
 800579e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057a2:	f89a 3000 	ldrb.w	r3, [sl]
 80057a6:	2b2a      	cmp	r3, #42	; 0x2a
 80057a8:	d015      	beq.n	80057d6 <_svfiprintf_r+0xf6>
 80057aa:	9a07      	ldr	r2, [sp, #28]
 80057ac:	4654      	mov	r4, sl
 80057ae:	2000      	movs	r0, #0
 80057b0:	f04f 0c0a 	mov.w	ip, #10
 80057b4:	4621      	mov	r1, r4
 80057b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057ba:	3b30      	subs	r3, #48	; 0x30
 80057bc:	2b09      	cmp	r3, #9
 80057be:	d94d      	bls.n	800585c <_svfiprintf_r+0x17c>
 80057c0:	b1b0      	cbz	r0, 80057f0 <_svfiprintf_r+0x110>
 80057c2:	9207      	str	r2, [sp, #28]
 80057c4:	e014      	b.n	80057f0 <_svfiprintf_r+0x110>
 80057c6:	eba0 0308 	sub.w	r3, r0, r8
 80057ca:	fa09 f303 	lsl.w	r3, r9, r3
 80057ce:	4313      	orrs	r3, r2
 80057d0:	9304      	str	r3, [sp, #16]
 80057d2:	46a2      	mov	sl, r4
 80057d4:	e7d2      	b.n	800577c <_svfiprintf_r+0x9c>
 80057d6:	9b03      	ldr	r3, [sp, #12]
 80057d8:	1d19      	adds	r1, r3, #4
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	9103      	str	r1, [sp, #12]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	bfbb      	ittet	lt
 80057e2:	425b      	neglt	r3, r3
 80057e4:	f042 0202 	orrlt.w	r2, r2, #2
 80057e8:	9307      	strge	r3, [sp, #28]
 80057ea:	9307      	strlt	r3, [sp, #28]
 80057ec:	bfb8      	it	lt
 80057ee:	9204      	strlt	r2, [sp, #16]
 80057f0:	7823      	ldrb	r3, [r4, #0]
 80057f2:	2b2e      	cmp	r3, #46	; 0x2e
 80057f4:	d10c      	bne.n	8005810 <_svfiprintf_r+0x130>
 80057f6:	7863      	ldrb	r3, [r4, #1]
 80057f8:	2b2a      	cmp	r3, #42	; 0x2a
 80057fa:	d134      	bne.n	8005866 <_svfiprintf_r+0x186>
 80057fc:	9b03      	ldr	r3, [sp, #12]
 80057fe:	1d1a      	adds	r2, r3, #4
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	9203      	str	r2, [sp, #12]
 8005804:	2b00      	cmp	r3, #0
 8005806:	bfb8      	it	lt
 8005808:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800580c:	3402      	adds	r4, #2
 800580e:	9305      	str	r3, [sp, #20]
 8005810:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80058d8 <_svfiprintf_r+0x1f8>
 8005814:	7821      	ldrb	r1, [r4, #0]
 8005816:	2203      	movs	r2, #3
 8005818:	4650      	mov	r0, sl
 800581a:	f7fa fce1 	bl	80001e0 <memchr>
 800581e:	b138      	cbz	r0, 8005830 <_svfiprintf_r+0x150>
 8005820:	9b04      	ldr	r3, [sp, #16]
 8005822:	eba0 000a 	sub.w	r0, r0, sl
 8005826:	2240      	movs	r2, #64	; 0x40
 8005828:	4082      	lsls	r2, r0
 800582a:	4313      	orrs	r3, r2
 800582c:	3401      	adds	r4, #1
 800582e:	9304      	str	r3, [sp, #16]
 8005830:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005834:	4825      	ldr	r0, [pc, #148]	; (80058cc <_svfiprintf_r+0x1ec>)
 8005836:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800583a:	2206      	movs	r2, #6
 800583c:	f7fa fcd0 	bl	80001e0 <memchr>
 8005840:	2800      	cmp	r0, #0
 8005842:	d038      	beq.n	80058b6 <_svfiprintf_r+0x1d6>
 8005844:	4b22      	ldr	r3, [pc, #136]	; (80058d0 <_svfiprintf_r+0x1f0>)
 8005846:	bb1b      	cbnz	r3, 8005890 <_svfiprintf_r+0x1b0>
 8005848:	9b03      	ldr	r3, [sp, #12]
 800584a:	3307      	adds	r3, #7
 800584c:	f023 0307 	bic.w	r3, r3, #7
 8005850:	3308      	adds	r3, #8
 8005852:	9303      	str	r3, [sp, #12]
 8005854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005856:	4433      	add	r3, r6
 8005858:	9309      	str	r3, [sp, #36]	; 0x24
 800585a:	e768      	b.n	800572e <_svfiprintf_r+0x4e>
 800585c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005860:	460c      	mov	r4, r1
 8005862:	2001      	movs	r0, #1
 8005864:	e7a6      	b.n	80057b4 <_svfiprintf_r+0xd4>
 8005866:	2300      	movs	r3, #0
 8005868:	3401      	adds	r4, #1
 800586a:	9305      	str	r3, [sp, #20]
 800586c:	4619      	mov	r1, r3
 800586e:	f04f 0c0a 	mov.w	ip, #10
 8005872:	4620      	mov	r0, r4
 8005874:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005878:	3a30      	subs	r2, #48	; 0x30
 800587a:	2a09      	cmp	r2, #9
 800587c:	d903      	bls.n	8005886 <_svfiprintf_r+0x1a6>
 800587e:	2b00      	cmp	r3, #0
 8005880:	d0c6      	beq.n	8005810 <_svfiprintf_r+0x130>
 8005882:	9105      	str	r1, [sp, #20]
 8005884:	e7c4      	b.n	8005810 <_svfiprintf_r+0x130>
 8005886:	fb0c 2101 	mla	r1, ip, r1, r2
 800588a:	4604      	mov	r4, r0
 800588c:	2301      	movs	r3, #1
 800588e:	e7f0      	b.n	8005872 <_svfiprintf_r+0x192>
 8005890:	ab03      	add	r3, sp, #12
 8005892:	9300      	str	r3, [sp, #0]
 8005894:	462a      	mov	r2, r5
 8005896:	4b0f      	ldr	r3, [pc, #60]	; (80058d4 <_svfiprintf_r+0x1f4>)
 8005898:	a904      	add	r1, sp, #16
 800589a:	4638      	mov	r0, r7
 800589c:	f3af 8000 	nop.w
 80058a0:	1c42      	adds	r2, r0, #1
 80058a2:	4606      	mov	r6, r0
 80058a4:	d1d6      	bne.n	8005854 <_svfiprintf_r+0x174>
 80058a6:	89ab      	ldrh	r3, [r5, #12]
 80058a8:	065b      	lsls	r3, r3, #25
 80058aa:	f53f af2d 	bmi.w	8005708 <_svfiprintf_r+0x28>
 80058ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058b0:	b01d      	add	sp, #116	; 0x74
 80058b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058b6:	ab03      	add	r3, sp, #12
 80058b8:	9300      	str	r3, [sp, #0]
 80058ba:	462a      	mov	r2, r5
 80058bc:	4b05      	ldr	r3, [pc, #20]	; (80058d4 <_svfiprintf_r+0x1f4>)
 80058be:	a904      	add	r1, sp, #16
 80058c0:	4638      	mov	r0, r7
 80058c2:	f000 f879 	bl	80059b8 <_printf_i>
 80058c6:	e7eb      	b.n	80058a0 <_svfiprintf_r+0x1c0>
 80058c8:	08005eac 	.word	0x08005eac
 80058cc:	08005eb6 	.word	0x08005eb6
 80058d0:	00000000 	.word	0x00000000
 80058d4:	0800562d 	.word	0x0800562d
 80058d8:	08005eb2 	.word	0x08005eb2

080058dc <_printf_common>:
 80058dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058e0:	4616      	mov	r6, r2
 80058e2:	4699      	mov	r9, r3
 80058e4:	688a      	ldr	r2, [r1, #8]
 80058e6:	690b      	ldr	r3, [r1, #16]
 80058e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058ec:	4293      	cmp	r3, r2
 80058ee:	bfb8      	it	lt
 80058f0:	4613      	movlt	r3, r2
 80058f2:	6033      	str	r3, [r6, #0]
 80058f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058f8:	4607      	mov	r7, r0
 80058fa:	460c      	mov	r4, r1
 80058fc:	b10a      	cbz	r2, 8005902 <_printf_common+0x26>
 80058fe:	3301      	adds	r3, #1
 8005900:	6033      	str	r3, [r6, #0]
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	0699      	lsls	r1, r3, #26
 8005906:	bf42      	ittt	mi
 8005908:	6833      	ldrmi	r3, [r6, #0]
 800590a:	3302      	addmi	r3, #2
 800590c:	6033      	strmi	r3, [r6, #0]
 800590e:	6825      	ldr	r5, [r4, #0]
 8005910:	f015 0506 	ands.w	r5, r5, #6
 8005914:	d106      	bne.n	8005924 <_printf_common+0x48>
 8005916:	f104 0a19 	add.w	sl, r4, #25
 800591a:	68e3      	ldr	r3, [r4, #12]
 800591c:	6832      	ldr	r2, [r6, #0]
 800591e:	1a9b      	subs	r3, r3, r2
 8005920:	42ab      	cmp	r3, r5
 8005922:	dc26      	bgt.n	8005972 <_printf_common+0x96>
 8005924:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005928:	1e13      	subs	r3, r2, #0
 800592a:	6822      	ldr	r2, [r4, #0]
 800592c:	bf18      	it	ne
 800592e:	2301      	movne	r3, #1
 8005930:	0692      	lsls	r2, r2, #26
 8005932:	d42b      	bmi.n	800598c <_printf_common+0xb0>
 8005934:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005938:	4649      	mov	r1, r9
 800593a:	4638      	mov	r0, r7
 800593c:	47c0      	blx	r8
 800593e:	3001      	adds	r0, #1
 8005940:	d01e      	beq.n	8005980 <_printf_common+0xa4>
 8005942:	6823      	ldr	r3, [r4, #0]
 8005944:	6922      	ldr	r2, [r4, #16]
 8005946:	f003 0306 	and.w	r3, r3, #6
 800594a:	2b04      	cmp	r3, #4
 800594c:	bf02      	ittt	eq
 800594e:	68e5      	ldreq	r5, [r4, #12]
 8005950:	6833      	ldreq	r3, [r6, #0]
 8005952:	1aed      	subeq	r5, r5, r3
 8005954:	68a3      	ldr	r3, [r4, #8]
 8005956:	bf0c      	ite	eq
 8005958:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800595c:	2500      	movne	r5, #0
 800595e:	4293      	cmp	r3, r2
 8005960:	bfc4      	itt	gt
 8005962:	1a9b      	subgt	r3, r3, r2
 8005964:	18ed      	addgt	r5, r5, r3
 8005966:	2600      	movs	r6, #0
 8005968:	341a      	adds	r4, #26
 800596a:	42b5      	cmp	r5, r6
 800596c:	d11a      	bne.n	80059a4 <_printf_common+0xc8>
 800596e:	2000      	movs	r0, #0
 8005970:	e008      	b.n	8005984 <_printf_common+0xa8>
 8005972:	2301      	movs	r3, #1
 8005974:	4652      	mov	r2, sl
 8005976:	4649      	mov	r1, r9
 8005978:	4638      	mov	r0, r7
 800597a:	47c0      	blx	r8
 800597c:	3001      	adds	r0, #1
 800597e:	d103      	bne.n	8005988 <_printf_common+0xac>
 8005980:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005988:	3501      	adds	r5, #1
 800598a:	e7c6      	b.n	800591a <_printf_common+0x3e>
 800598c:	18e1      	adds	r1, r4, r3
 800598e:	1c5a      	adds	r2, r3, #1
 8005990:	2030      	movs	r0, #48	; 0x30
 8005992:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005996:	4422      	add	r2, r4
 8005998:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800599c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059a0:	3302      	adds	r3, #2
 80059a2:	e7c7      	b.n	8005934 <_printf_common+0x58>
 80059a4:	2301      	movs	r3, #1
 80059a6:	4622      	mov	r2, r4
 80059a8:	4649      	mov	r1, r9
 80059aa:	4638      	mov	r0, r7
 80059ac:	47c0      	blx	r8
 80059ae:	3001      	adds	r0, #1
 80059b0:	d0e6      	beq.n	8005980 <_printf_common+0xa4>
 80059b2:	3601      	adds	r6, #1
 80059b4:	e7d9      	b.n	800596a <_printf_common+0x8e>
	...

080059b8 <_printf_i>:
 80059b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059bc:	7e0f      	ldrb	r7, [r1, #24]
 80059be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80059c0:	2f78      	cmp	r7, #120	; 0x78
 80059c2:	4691      	mov	r9, r2
 80059c4:	4680      	mov	r8, r0
 80059c6:	460c      	mov	r4, r1
 80059c8:	469a      	mov	sl, r3
 80059ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80059ce:	d807      	bhi.n	80059e0 <_printf_i+0x28>
 80059d0:	2f62      	cmp	r7, #98	; 0x62
 80059d2:	d80a      	bhi.n	80059ea <_printf_i+0x32>
 80059d4:	2f00      	cmp	r7, #0
 80059d6:	f000 80d4 	beq.w	8005b82 <_printf_i+0x1ca>
 80059da:	2f58      	cmp	r7, #88	; 0x58
 80059dc:	f000 80c0 	beq.w	8005b60 <_printf_i+0x1a8>
 80059e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80059e8:	e03a      	b.n	8005a60 <_printf_i+0xa8>
 80059ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80059ee:	2b15      	cmp	r3, #21
 80059f0:	d8f6      	bhi.n	80059e0 <_printf_i+0x28>
 80059f2:	a101      	add	r1, pc, #4	; (adr r1, 80059f8 <_printf_i+0x40>)
 80059f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059f8:	08005a51 	.word	0x08005a51
 80059fc:	08005a65 	.word	0x08005a65
 8005a00:	080059e1 	.word	0x080059e1
 8005a04:	080059e1 	.word	0x080059e1
 8005a08:	080059e1 	.word	0x080059e1
 8005a0c:	080059e1 	.word	0x080059e1
 8005a10:	08005a65 	.word	0x08005a65
 8005a14:	080059e1 	.word	0x080059e1
 8005a18:	080059e1 	.word	0x080059e1
 8005a1c:	080059e1 	.word	0x080059e1
 8005a20:	080059e1 	.word	0x080059e1
 8005a24:	08005b69 	.word	0x08005b69
 8005a28:	08005a91 	.word	0x08005a91
 8005a2c:	08005b23 	.word	0x08005b23
 8005a30:	080059e1 	.word	0x080059e1
 8005a34:	080059e1 	.word	0x080059e1
 8005a38:	08005b8b 	.word	0x08005b8b
 8005a3c:	080059e1 	.word	0x080059e1
 8005a40:	08005a91 	.word	0x08005a91
 8005a44:	080059e1 	.word	0x080059e1
 8005a48:	080059e1 	.word	0x080059e1
 8005a4c:	08005b2b 	.word	0x08005b2b
 8005a50:	682b      	ldr	r3, [r5, #0]
 8005a52:	1d1a      	adds	r2, r3, #4
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	602a      	str	r2, [r5, #0]
 8005a58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a60:	2301      	movs	r3, #1
 8005a62:	e09f      	b.n	8005ba4 <_printf_i+0x1ec>
 8005a64:	6820      	ldr	r0, [r4, #0]
 8005a66:	682b      	ldr	r3, [r5, #0]
 8005a68:	0607      	lsls	r7, r0, #24
 8005a6a:	f103 0104 	add.w	r1, r3, #4
 8005a6e:	6029      	str	r1, [r5, #0]
 8005a70:	d501      	bpl.n	8005a76 <_printf_i+0xbe>
 8005a72:	681e      	ldr	r6, [r3, #0]
 8005a74:	e003      	b.n	8005a7e <_printf_i+0xc6>
 8005a76:	0646      	lsls	r6, r0, #25
 8005a78:	d5fb      	bpl.n	8005a72 <_printf_i+0xba>
 8005a7a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005a7e:	2e00      	cmp	r6, #0
 8005a80:	da03      	bge.n	8005a8a <_printf_i+0xd2>
 8005a82:	232d      	movs	r3, #45	; 0x2d
 8005a84:	4276      	negs	r6, r6
 8005a86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a8a:	485a      	ldr	r0, [pc, #360]	; (8005bf4 <_printf_i+0x23c>)
 8005a8c:	230a      	movs	r3, #10
 8005a8e:	e012      	b.n	8005ab6 <_printf_i+0xfe>
 8005a90:	682b      	ldr	r3, [r5, #0]
 8005a92:	6820      	ldr	r0, [r4, #0]
 8005a94:	1d19      	adds	r1, r3, #4
 8005a96:	6029      	str	r1, [r5, #0]
 8005a98:	0605      	lsls	r5, r0, #24
 8005a9a:	d501      	bpl.n	8005aa0 <_printf_i+0xe8>
 8005a9c:	681e      	ldr	r6, [r3, #0]
 8005a9e:	e002      	b.n	8005aa6 <_printf_i+0xee>
 8005aa0:	0641      	lsls	r1, r0, #25
 8005aa2:	d5fb      	bpl.n	8005a9c <_printf_i+0xe4>
 8005aa4:	881e      	ldrh	r6, [r3, #0]
 8005aa6:	4853      	ldr	r0, [pc, #332]	; (8005bf4 <_printf_i+0x23c>)
 8005aa8:	2f6f      	cmp	r7, #111	; 0x6f
 8005aaa:	bf0c      	ite	eq
 8005aac:	2308      	moveq	r3, #8
 8005aae:	230a      	movne	r3, #10
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ab6:	6865      	ldr	r5, [r4, #4]
 8005ab8:	60a5      	str	r5, [r4, #8]
 8005aba:	2d00      	cmp	r5, #0
 8005abc:	bfa2      	ittt	ge
 8005abe:	6821      	ldrge	r1, [r4, #0]
 8005ac0:	f021 0104 	bicge.w	r1, r1, #4
 8005ac4:	6021      	strge	r1, [r4, #0]
 8005ac6:	b90e      	cbnz	r6, 8005acc <_printf_i+0x114>
 8005ac8:	2d00      	cmp	r5, #0
 8005aca:	d04b      	beq.n	8005b64 <_printf_i+0x1ac>
 8005acc:	4615      	mov	r5, r2
 8005ace:	fbb6 f1f3 	udiv	r1, r6, r3
 8005ad2:	fb03 6711 	mls	r7, r3, r1, r6
 8005ad6:	5dc7      	ldrb	r7, [r0, r7]
 8005ad8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005adc:	4637      	mov	r7, r6
 8005ade:	42bb      	cmp	r3, r7
 8005ae0:	460e      	mov	r6, r1
 8005ae2:	d9f4      	bls.n	8005ace <_printf_i+0x116>
 8005ae4:	2b08      	cmp	r3, #8
 8005ae6:	d10b      	bne.n	8005b00 <_printf_i+0x148>
 8005ae8:	6823      	ldr	r3, [r4, #0]
 8005aea:	07de      	lsls	r6, r3, #31
 8005aec:	d508      	bpl.n	8005b00 <_printf_i+0x148>
 8005aee:	6923      	ldr	r3, [r4, #16]
 8005af0:	6861      	ldr	r1, [r4, #4]
 8005af2:	4299      	cmp	r1, r3
 8005af4:	bfde      	ittt	le
 8005af6:	2330      	movle	r3, #48	; 0x30
 8005af8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005afc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005b00:	1b52      	subs	r2, r2, r5
 8005b02:	6122      	str	r2, [r4, #16]
 8005b04:	f8cd a000 	str.w	sl, [sp]
 8005b08:	464b      	mov	r3, r9
 8005b0a:	aa03      	add	r2, sp, #12
 8005b0c:	4621      	mov	r1, r4
 8005b0e:	4640      	mov	r0, r8
 8005b10:	f7ff fee4 	bl	80058dc <_printf_common>
 8005b14:	3001      	adds	r0, #1
 8005b16:	d14a      	bne.n	8005bae <_printf_i+0x1f6>
 8005b18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b1c:	b004      	add	sp, #16
 8005b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b22:	6823      	ldr	r3, [r4, #0]
 8005b24:	f043 0320 	orr.w	r3, r3, #32
 8005b28:	6023      	str	r3, [r4, #0]
 8005b2a:	4833      	ldr	r0, [pc, #204]	; (8005bf8 <_printf_i+0x240>)
 8005b2c:	2778      	movs	r7, #120	; 0x78
 8005b2e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005b32:	6823      	ldr	r3, [r4, #0]
 8005b34:	6829      	ldr	r1, [r5, #0]
 8005b36:	061f      	lsls	r7, r3, #24
 8005b38:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b3c:	d402      	bmi.n	8005b44 <_printf_i+0x18c>
 8005b3e:	065f      	lsls	r7, r3, #25
 8005b40:	bf48      	it	mi
 8005b42:	b2b6      	uxthmi	r6, r6
 8005b44:	07df      	lsls	r7, r3, #31
 8005b46:	bf48      	it	mi
 8005b48:	f043 0320 	orrmi.w	r3, r3, #32
 8005b4c:	6029      	str	r1, [r5, #0]
 8005b4e:	bf48      	it	mi
 8005b50:	6023      	strmi	r3, [r4, #0]
 8005b52:	b91e      	cbnz	r6, 8005b5c <_printf_i+0x1a4>
 8005b54:	6823      	ldr	r3, [r4, #0]
 8005b56:	f023 0320 	bic.w	r3, r3, #32
 8005b5a:	6023      	str	r3, [r4, #0]
 8005b5c:	2310      	movs	r3, #16
 8005b5e:	e7a7      	b.n	8005ab0 <_printf_i+0xf8>
 8005b60:	4824      	ldr	r0, [pc, #144]	; (8005bf4 <_printf_i+0x23c>)
 8005b62:	e7e4      	b.n	8005b2e <_printf_i+0x176>
 8005b64:	4615      	mov	r5, r2
 8005b66:	e7bd      	b.n	8005ae4 <_printf_i+0x12c>
 8005b68:	682b      	ldr	r3, [r5, #0]
 8005b6a:	6826      	ldr	r6, [r4, #0]
 8005b6c:	6961      	ldr	r1, [r4, #20]
 8005b6e:	1d18      	adds	r0, r3, #4
 8005b70:	6028      	str	r0, [r5, #0]
 8005b72:	0635      	lsls	r5, r6, #24
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	d501      	bpl.n	8005b7c <_printf_i+0x1c4>
 8005b78:	6019      	str	r1, [r3, #0]
 8005b7a:	e002      	b.n	8005b82 <_printf_i+0x1ca>
 8005b7c:	0670      	lsls	r0, r6, #25
 8005b7e:	d5fb      	bpl.n	8005b78 <_printf_i+0x1c0>
 8005b80:	8019      	strh	r1, [r3, #0]
 8005b82:	2300      	movs	r3, #0
 8005b84:	6123      	str	r3, [r4, #16]
 8005b86:	4615      	mov	r5, r2
 8005b88:	e7bc      	b.n	8005b04 <_printf_i+0x14c>
 8005b8a:	682b      	ldr	r3, [r5, #0]
 8005b8c:	1d1a      	adds	r2, r3, #4
 8005b8e:	602a      	str	r2, [r5, #0]
 8005b90:	681d      	ldr	r5, [r3, #0]
 8005b92:	6862      	ldr	r2, [r4, #4]
 8005b94:	2100      	movs	r1, #0
 8005b96:	4628      	mov	r0, r5
 8005b98:	f7fa fb22 	bl	80001e0 <memchr>
 8005b9c:	b108      	cbz	r0, 8005ba2 <_printf_i+0x1ea>
 8005b9e:	1b40      	subs	r0, r0, r5
 8005ba0:	6060      	str	r0, [r4, #4]
 8005ba2:	6863      	ldr	r3, [r4, #4]
 8005ba4:	6123      	str	r3, [r4, #16]
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bac:	e7aa      	b.n	8005b04 <_printf_i+0x14c>
 8005bae:	6923      	ldr	r3, [r4, #16]
 8005bb0:	462a      	mov	r2, r5
 8005bb2:	4649      	mov	r1, r9
 8005bb4:	4640      	mov	r0, r8
 8005bb6:	47d0      	blx	sl
 8005bb8:	3001      	adds	r0, #1
 8005bba:	d0ad      	beq.n	8005b18 <_printf_i+0x160>
 8005bbc:	6823      	ldr	r3, [r4, #0]
 8005bbe:	079b      	lsls	r3, r3, #30
 8005bc0:	d413      	bmi.n	8005bea <_printf_i+0x232>
 8005bc2:	68e0      	ldr	r0, [r4, #12]
 8005bc4:	9b03      	ldr	r3, [sp, #12]
 8005bc6:	4298      	cmp	r0, r3
 8005bc8:	bfb8      	it	lt
 8005bca:	4618      	movlt	r0, r3
 8005bcc:	e7a6      	b.n	8005b1c <_printf_i+0x164>
 8005bce:	2301      	movs	r3, #1
 8005bd0:	4632      	mov	r2, r6
 8005bd2:	4649      	mov	r1, r9
 8005bd4:	4640      	mov	r0, r8
 8005bd6:	47d0      	blx	sl
 8005bd8:	3001      	adds	r0, #1
 8005bda:	d09d      	beq.n	8005b18 <_printf_i+0x160>
 8005bdc:	3501      	adds	r5, #1
 8005bde:	68e3      	ldr	r3, [r4, #12]
 8005be0:	9903      	ldr	r1, [sp, #12]
 8005be2:	1a5b      	subs	r3, r3, r1
 8005be4:	42ab      	cmp	r3, r5
 8005be6:	dcf2      	bgt.n	8005bce <_printf_i+0x216>
 8005be8:	e7eb      	b.n	8005bc2 <_printf_i+0x20a>
 8005bea:	2500      	movs	r5, #0
 8005bec:	f104 0619 	add.w	r6, r4, #25
 8005bf0:	e7f5      	b.n	8005bde <_printf_i+0x226>
 8005bf2:	bf00      	nop
 8005bf4:	08005ebd 	.word	0x08005ebd
 8005bf8:	08005ece 	.word	0x08005ece

08005bfc <memmove>:
 8005bfc:	4288      	cmp	r0, r1
 8005bfe:	b510      	push	{r4, lr}
 8005c00:	eb01 0402 	add.w	r4, r1, r2
 8005c04:	d902      	bls.n	8005c0c <memmove+0x10>
 8005c06:	4284      	cmp	r4, r0
 8005c08:	4623      	mov	r3, r4
 8005c0a:	d807      	bhi.n	8005c1c <memmove+0x20>
 8005c0c:	1e43      	subs	r3, r0, #1
 8005c0e:	42a1      	cmp	r1, r4
 8005c10:	d008      	beq.n	8005c24 <memmove+0x28>
 8005c12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c1a:	e7f8      	b.n	8005c0e <memmove+0x12>
 8005c1c:	4402      	add	r2, r0
 8005c1e:	4601      	mov	r1, r0
 8005c20:	428a      	cmp	r2, r1
 8005c22:	d100      	bne.n	8005c26 <memmove+0x2a>
 8005c24:	bd10      	pop	{r4, pc}
 8005c26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c2e:	e7f7      	b.n	8005c20 <memmove+0x24>

08005c30 <_sbrk_r>:
 8005c30:	b538      	push	{r3, r4, r5, lr}
 8005c32:	4d06      	ldr	r5, [pc, #24]	; (8005c4c <_sbrk_r+0x1c>)
 8005c34:	2300      	movs	r3, #0
 8005c36:	4604      	mov	r4, r0
 8005c38:	4608      	mov	r0, r1
 8005c3a:	602b      	str	r3, [r5, #0]
 8005c3c:	f7fa ff88 	bl	8000b50 <_sbrk>
 8005c40:	1c43      	adds	r3, r0, #1
 8005c42:	d102      	bne.n	8005c4a <_sbrk_r+0x1a>
 8005c44:	682b      	ldr	r3, [r5, #0]
 8005c46:	b103      	cbz	r3, 8005c4a <_sbrk_r+0x1a>
 8005c48:	6023      	str	r3, [r4, #0]
 8005c4a:	bd38      	pop	{r3, r4, r5, pc}
 8005c4c:	20004c10 	.word	0x20004c10

08005c50 <_realloc_r>:
 8005c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c54:	4680      	mov	r8, r0
 8005c56:	4614      	mov	r4, r2
 8005c58:	460e      	mov	r6, r1
 8005c5a:	b921      	cbnz	r1, 8005c66 <_realloc_r+0x16>
 8005c5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c60:	4611      	mov	r1, r2
 8005c62:	f7ff bc57 	b.w	8005514 <_malloc_r>
 8005c66:	b92a      	cbnz	r2, 8005c74 <_realloc_r+0x24>
 8005c68:	f7ff fbe8 	bl	800543c <_free_r>
 8005c6c:	4625      	mov	r5, r4
 8005c6e:	4628      	mov	r0, r5
 8005c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c74:	f000 f81b 	bl	8005cae <_malloc_usable_size_r>
 8005c78:	4284      	cmp	r4, r0
 8005c7a:	4607      	mov	r7, r0
 8005c7c:	d802      	bhi.n	8005c84 <_realloc_r+0x34>
 8005c7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005c82:	d812      	bhi.n	8005caa <_realloc_r+0x5a>
 8005c84:	4621      	mov	r1, r4
 8005c86:	4640      	mov	r0, r8
 8005c88:	f7ff fc44 	bl	8005514 <_malloc_r>
 8005c8c:	4605      	mov	r5, r0
 8005c8e:	2800      	cmp	r0, #0
 8005c90:	d0ed      	beq.n	8005c6e <_realloc_r+0x1e>
 8005c92:	42bc      	cmp	r4, r7
 8005c94:	4622      	mov	r2, r4
 8005c96:	4631      	mov	r1, r6
 8005c98:	bf28      	it	cs
 8005c9a:	463a      	movcs	r2, r7
 8005c9c:	f7ff fbc0 	bl	8005420 <memcpy>
 8005ca0:	4631      	mov	r1, r6
 8005ca2:	4640      	mov	r0, r8
 8005ca4:	f7ff fbca 	bl	800543c <_free_r>
 8005ca8:	e7e1      	b.n	8005c6e <_realloc_r+0x1e>
 8005caa:	4635      	mov	r5, r6
 8005cac:	e7df      	b.n	8005c6e <_realloc_r+0x1e>

08005cae <_malloc_usable_size_r>:
 8005cae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cb2:	1f18      	subs	r0, r3, #4
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	bfbc      	itt	lt
 8005cb8:	580b      	ldrlt	r3, [r1, r0]
 8005cba:	18c0      	addlt	r0, r0, r3
 8005cbc:	4770      	bx	lr
	...

08005cc0 <_init>:
 8005cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc2:	bf00      	nop
 8005cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cc6:	bc08      	pop	{r3}
 8005cc8:	469e      	mov	lr, r3
 8005cca:	4770      	bx	lr

08005ccc <_fini>:
 8005ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cce:	bf00      	nop
 8005cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cd2:	bc08      	pop	{r3}
 8005cd4:	469e      	mov	lr, r3
 8005cd6:	4770      	bx	lr
