
Lab06-01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034ac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  0800364c  0800364c  0001364c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003730  08003730  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08003730  08003730  00013730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003738  08003738  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003738  08003738  00013738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800373c  0800373c  0001373c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08003740  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041b0  20000060  080037a0  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004210  080037a0  00024210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d881  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002265  00000000  00000000  0002d954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000af8  00000000  00000000  0002fbc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000860  00000000  00000000  000306b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016a9f  00000000  00000000  00030f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bfa8  00000000  00000000  000479b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008dd5c  00000000  00000000  0005395f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002ea4  00000000  00000000  000e16bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000e4560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003634 	.word	0x08003634

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08003634 	.word	0x08003634

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	4a07      	ldr	r2, [pc, #28]	; (8000508 <vApplicationGetIdleTaskMemory+0x2c>)
 80004ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	4a06      	ldr	r2, [pc, #24]	; (800050c <vApplicationGetIdleTaskMemory+0x30>)
 80004f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2280      	movs	r2, #128	; 0x80
 80004f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fa:	bf00      	nop
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	2000007c 	.word	0x2000007c
 800050c:	2000011c 	.word	0x2000011c

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b5b0      	push	{r4, r5, r7, lr}
 8000512:	b0a4      	sub	sp, #144	; 0x90
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 faad 	bl	8000a74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f879 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 f90b 	bl	8000738 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000522:	f000 f8df 	bl	80006e4 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000526:	4b30      	ldr	r3, [pc, #192]	; (80005e8 <main+0xd8>)
 8000528:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800052c:	461d      	mov	r5, r3
 800052e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000530:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000532:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000536:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800053a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800053e:	2100      	movs	r1, #0
 8000540:	4618      	mov	r0, r3
 8000542:	f001 fd22 	bl	8001f8a <osThreadCreate>
 8000546:	4603      	mov	r3, r0
 8000548:	4a28      	ldr	r2, [pc, #160]	; (80005ec <main+0xdc>)
 800054a:	6013      	str	r3, [r2, #0]

  /* definition and creation of led_blue */
  osThreadDef(led_blue, led_thread_blue, osPriorityIdle, 0, 128);
 800054c:	4b28      	ldr	r3, [pc, #160]	; (80005f0 <main+0xe0>)
 800054e:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000552:	461d      	mov	r5, r3
 8000554:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000556:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000558:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800055c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  led_blueHandle = osThreadCreate(osThread(led_blue), NULL);
 8000560:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f001 fd0f 	bl	8001f8a <osThreadCreate>
 800056c:	4603      	mov	r3, r0
 800056e:	4a21      	ldr	r2, [pc, #132]	; (80005f4 <main+0xe4>)
 8000570:	6013      	str	r3, [r2, #0]

  /* definition and creation of led_green */
  osThreadDef(led_green, led_thread_green, osPriorityIdle, 0, 128);
 8000572:	4b21      	ldr	r3, [pc, #132]	; (80005f8 <main+0xe8>)
 8000574:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000578:	461d      	mov	r5, r3
 800057a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800057c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800057e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000582:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  led_greenHandle = osThreadCreate(osThread(led_green), NULL);
 8000586:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800058a:	2100      	movs	r1, #0
 800058c:	4618      	mov	r0, r3
 800058e:	f001 fcfc 	bl	8001f8a <osThreadCreate>
 8000592:	4603      	mov	r3, r0
 8000594:	4a19      	ldr	r2, [pc, #100]	; (80005fc <main+0xec>)
 8000596:	6013      	str	r3, [r2, #0]

  /* definition and creation of led_white */
  osThreadDef(led_white, led_thread_white, osPriorityIdle, 0, 128);
 8000598:	4b19      	ldr	r3, [pc, #100]	; (8000600 <main+0xf0>)
 800059a:	f107 0420 	add.w	r4, r7, #32
 800059e:	461d      	mov	r5, r3
 80005a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  led_whiteHandle = osThreadCreate(osThread(led_white), NULL);
 80005ac:	f107 0320 	add.w	r3, r7, #32
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f001 fce9 	bl	8001f8a <osThreadCreate>
 80005b8:	4603      	mov	r3, r0
 80005ba:	4a12      	ldr	r2, [pc, #72]	; (8000604 <main+0xf4>)
 80005bc:	6013      	str	r3, [r2, #0]

  /* definition and creation of led_red */
  osThreadDef(led_red, led_thread_red, osPriorityIdle, 0, 128);
 80005be:	4b12      	ldr	r3, [pc, #72]	; (8000608 <main+0xf8>)
 80005c0:	1d3c      	adds	r4, r7, #4
 80005c2:	461d      	mov	r5, r3
 80005c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  led_redHandle = osThreadCreate(osThread(led_red), NULL);
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	2100      	movs	r1, #0
 80005d4:	4618      	mov	r0, r3
 80005d6:	f001 fcd8 	bl	8001f8a <osThreadCreate>
 80005da:	4603      	mov	r3, r0
 80005dc:	4a0b      	ldr	r2, [pc, #44]	; (800060c <main+0xfc>)
 80005de:	6013      	str	r3, [r2, #0]
  /* add threads, ... */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005e0:	f001 fccc 	bl	8001f7c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e4:	e7fe      	b.n	80005e4 <main+0xd4>
 80005e6:	bf00      	nop
 80005e8:	08003658 	.word	0x08003658
 80005ec:	20000364 	.word	0x20000364
 80005f0:	08003680 	.word	0x08003680
 80005f4:	20000368 	.word	0x20000368
 80005f8:	080036a8 	.word	0x080036a8
 80005fc:	2000036c 	.word	0x2000036c
 8000600:	080036d0 	.word	0x080036d0
 8000604:	20000370 	.word	0x20000370
 8000608:	080036f4 	.word	0x080036f4
 800060c:	20000374 	.word	0x20000374

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	; 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0320 	add.w	r3, r7, #32
 800061a:	2230      	movs	r2, #48	; 0x30
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f002 ff2c 	bl	800347c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	4b28      	ldr	r3, [pc, #160]	; (80006dc <SystemClock_Config+0xcc>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	4a27      	ldr	r2, [pc, #156]	; (80006dc <SystemClock_Config+0xcc>)
 800063e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000642:	6413      	str	r3, [r2, #64]	; 0x40
 8000644:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemClock_Config+0xcc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	4b22      	ldr	r3, [pc, #136]	; (80006e0 <SystemClock_Config+0xd0>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a21      	ldr	r2, [pc, #132]	; (80006e0 <SystemClock_Config+0xd0>)
 800065a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	4b1f      	ldr	r3, [pc, #124]	; (80006e0 <SystemClock_Config+0xd0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800066c:	2302      	movs	r3, #2
 800066e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000670:	2301      	movs	r3, #1
 8000672:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000674:	2310      	movs	r3, #16
 8000676:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000678:	2302      	movs	r3, #2
 800067a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800067c:	2300      	movs	r3, #0
 800067e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000680:	2310      	movs	r3, #16
 8000682:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000684:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000688:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800068a:	2304      	movs	r3, #4
 800068c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800068e:	2304      	movs	r3, #4
 8000690:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000692:	f107 0320 	add.w	r3, r7, #32
 8000696:	4618      	mov	r0, r3
 8000698:	f000 fcfc 	bl	8001094 <HAL_RCC_OscConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006a2:	f000 f90d 	bl	80008c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a6:	230f      	movs	r3, #15
 80006a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006aa:	2302      	movs	r3, #2
 80006ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	2102      	movs	r1, #2
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 ff5e 	bl	8001584 <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ce:	f000 f8f7 	bl	80008c0 <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	3750      	adds	r7, #80	; 0x50
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40007000 	.word	0x40007000

080006e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_USART2_UART_Init+0x4c>)
 80006ea:	4a12      	ldr	r2, [pc, #72]	; (8000734 <MX_USART2_UART_Init+0x50>)
 80006ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <MX_USART2_UART_Init+0x4c>)
 80006f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_USART2_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <MX_USART2_UART_Init+0x4c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000702:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <MX_USART2_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <MX_USART2_UART_Init+0x4c>)
 800070a:	220c      	movs	r2, #12
 800070c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070e:	4b08      	ldr	r3, [pc, #32]	; (8000730 <MX_USART2_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <MX_USART2_UART_Init+0x4c>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <MX_USART2_UART_Init+0x4c>)
 800071c:	f001 f952 	bl	80019c4 <HAL_UART_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000726:	f000 f8cb 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	2000031c 	.word	0x2000031c
 8000734:	40004400 	.word	0x40004400

08000738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08a      	sub	sp, #40	; 0x28
 800073c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	f107 0314 	add.w	r3, r7, #20
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	613b      	str	r3, [r7, #16]
 8000752:	4b38      	ldr	r3, [pc, #224]	; (8000834 <MX_GPIO_Init+0xfc>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a37      	ldr	r2, [pc, #220]	; (8000834 <MX_GPIO_Init+0xfc>)
 8000758:	f043 0304 	orr.w	r3, r3, #4
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b35      	ldr	r3, [pc, #212]	; (8000834 <MX_GPIO_Init+0xfc>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0304 	and.w	r3, r3, #4
 8000766:	613b      	str	r3, [r7, #16]
 8000768:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	4b31      	ldr	r3, [pc, #196]	; (8000834 <MX_GPIO_Init+0xfc>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a30      	ldr	r2, [pc, #192]	; (8000834 <MX_GPIO_Init+0xfc>)
 8000774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b2e      	ldr	r3, [pc, #184]	; (8000834 <MX_GPIO_Init+0xfc>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	4b2a      	ldr	r3, [pc, #168]	; (8000834 <MX_GPIO_Init+0xfc>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a29      	ldr	r2, [pc, #164]	; (8000834 <MX_GPIO_Init+0xfc>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b27      	ldr	r3, [pc, #156]	; (8000834 <MX_GPIO_Init+0xfc>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	4b23      	ldr	r3, [pc, #140]	; (8000834 <MX_GPIO_Init+0xfc>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a22      	ldr	r2, [pc, #136]	; (8000834 <MX_GPIO_Init+0xfc>)
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b20      	ldr	r3, [pc, #128]	; (8000834 <MX_GPIO_Init+0xfc>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80007be:	2200      	movs	r2, #0
 80007c0:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 80007c4:	481c      	ldr	r0, [pc, #112]	; (8000838 <MX_GPIO_Init+0x100>)
 80007c6:	f000 fc31 	bl	800102c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2180      	movs	r1, #128	; 0x80
 80007ce:	481b      	ldr	r0, [pc, #108]	; (800083c <MX_GPIO_Init+0x104>)
 80007d0:	f000 fc2c 	bl	800102c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007da:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	4619      	mov	r1, r3
 80007ea:	4814      	ldr	r0, [pc, #80]	; (800083c <MX_GPIO_Init+0x104>)
 80007ec:	f000 fa9a 	bl	8000d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 PA8
                           PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80007f0:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80007f4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	2300      	movs	r3, #0
 8000800:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4619      	mov	r1, r3
 8000808:	480b      	ldr	r0, [pc, #44]	; (8000838 <MX_GPIO_Init+0x100>)
 800080a:	f000 fa8b 	bl	8000d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800080e:	2380      	movs	r3, #128	; 0x80
 8000810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	4619      	mov	r1, r3
 8000824:	4805      	ldr	r0, [pc, #20]	; (800083c <MX_GPIO_Init+0x104>)
 8000826:	f000 fa7d 	bl	8000d24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800082a:	bf00      	nop
 800082c:	3728      	adds	r7, #40	; 0x28
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40023800 	.word	0x40023800
 8000838:	40020000 	.word	0x40020000
 800083c:	40020800 	.word	0x40020800

08000840 <StartDefaultTask>:
  * @retval None
  */

/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
//	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
    osDelay(1);
 8000848:	2001      	movs	r0, #1
 800084a:	f001 fbea 	bl	8002022 <osDelay>
 800084e:	e7fb      	b.n	8000848 <StartDefaultTask+0x8>

08000850 <led_thread_blue>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_led_thread_blue */
void led_thread_blue(void const * argument)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN led_thread_blue */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000858:	2140      	movs	r1, #64	; 0x40
 800085a:	4803      	ldr	r0, [pc, #12]	; (8000868 <led_thread_blue+0x18>)
 800085c:	f000 fbff 	bl	800105e <HAL_GPIO_TogglePin>
    osDelay(50);
 8000860:	2032      	movs	r0, #50	; 0x32
 8000862:	f001 fbde 	bl	8002022 <osDelay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000866:	e7f7      	b.n	8000858 <led_thread_blue+0x8>
 8000868:	40020000 	.word	0x40020000

0800086c <led_thread_green>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_led_thread_green */
void led_thread_green(void const * argument)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN led_thread_green */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8000874:	2180      	movs	r1, #128	; 0x80
 8000876:	4803      	ldr	r0, [pc, #12]	; (8000884 <led_thread_green+0x18>)
 8000878:	f000 fbf1 	bl	800105e <HAL_GPIO_TogglePin>
    osDelay(18);
 800087c:	2012      	movs	r0, #18
 800087e:	f001 fbd0 	bl	8002022 <osDelay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8000882:	e7f7      	b.n	8000874 <led_thread_green+0x8>
 8000884:	40020000 	.word	0x40020000

08000888 <led_thread_white>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_led_thread_white */
void led_thread_white(void const * argument)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN led_thread_white */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8000890:	2180      	movs	r1, #128	; 0x80
 8000892:	4803      	ldr	r0, [pc, #12]	; (80008a0 <led_thread_white+0x18>)
 8000894:	f000 fbe3 	bl	800105e <HAL_GPIO_TogglePin>
    osDelay(64);
 8000898:	2040      	movs	r0, #64	; 0x40
 800089a:	f001 fbc2 	bl	8002022 <osDelay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 800089e:	e7f7      	b.n	8000890 <led_thread_white+0x8>
 80008a0:	40020800 	.word	0x40020800

080008a4 <led_thread_red>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_led_thread_red */
void led_thread_red(void const * argument)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN led_thread_red */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80008ac:	2120      	movs	r1, #32
 80008ae:	4803      	ldr	r0, [pc, #12]	; (80008bc <led_thread_red+0x18>)
 80008b0:	f000 fbd5 	bl	800105e <HAL_GPIO_TogglePin>
    osDelay(128);
 80008b4:	2080      	movs	r0, #128	; 0x80
 80008b6:	f001 fbb4 	bl	8002022 <osDelay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80008ba:	e7f7      	b.n	80008ac <led_thread_red+0x8>
 80008bc:	40020000 	.word	0x40020000

080008c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c4:	b672      	cpsid	i
}
 80008c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <Error_Handler+0x8>
	...

080008cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4b12      	ldr	r3, [pc, #72]	; (8000920 <HAL_MspInit+0x54>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008da:	4a11      	ldr	r2, [pc, #68]	; (8000920 <HAL_MspInit+0x54>)
 80008dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e0:	6453      	str	r3, [r2, #68]	; 0x44
 80008e2:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <HAL_MspInit+0x54>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	603b      	str	r3, [r7, #0]
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <HAL_MspInit+0x54>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	4a0a      	ldr	r2, [pc, #40]	; (8000920 <HAL_MspInit+0x54>)
 80008f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fc:	6413      	str	r3, [r2, #64]	; 0x40
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <HAL_MspInit+0x54>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	210f      	movs	r1, #15
 800090e:	f06f 0001 	mvn.w	r0, #1
 8000912:	f000 f9de 	bl	8000cd2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800

08000924 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a19      	ldr	r2, [pc, #100]	; (80009a8 <HAL_UART_MspInit+0x84>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d12b      	bne.n	800099e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	613b      	str	r3, [r7, #16]
 800094a:	4b18      	ldr	r3, [pc, #96]	; (80009ac <HAL_UART_MspInit+0x88>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	4a17      	ldr	r2, [pc, #92]	; (80009ac <HAL_UART_MspInit+0x88>)
 8000950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000954:	6413      	str	r3, [r2, #64]	; 0x40
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <HAL_UART_MspInit+0x88>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800095e:	613b      	str	r3, [r7, #16]
 8000960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	4b11      	ldr	r3, [pc, #68]	; (80009ac <HAL_UART_MspInit+0x88>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a10      	ldr	r2, [pc, #64]	; (80009ac <HAL_UART_MspInit+0x88>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <HAL_UART_MspInit+0x88>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800097e:	230c      	movs	r3, #12
 8000980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	2302      	movs	r3, #2
 8000984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098a:	2303      	movs	r3, #3
 800098c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800098e:	2307      	movs	r3, #7
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	4619      	mov	r1, r3
 8000998:	4805      	ldr	r0, [pc, #20]	; (80009b0 <HAL_UART_MspInit+0x8c>)
 800099a:	f000 f9c3 	bl	8000d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800099e:	bf00      	nop
 80009a0:	3728      	adds	r7, #40	; 0x28
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40004400 	.word	0x40004400
 80009ac:	40023800 	.word	0x40023800
 80009b0:	40020000 	.word	0x40020000

080009b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009b8:	e7fe      	b.n	80009b8 <NMI_Handler+0x4>

080009ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009be:	e7fe      	b.n	80009be <HardFault_Handler+0x4>

080009c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <MemManage_Handler+0x4>

080009c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ca:	e7fe      	b.n	80009ca <BusFault_Handler+0x4>

080009cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <UsageFault_Handler+0x4>

080009d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e4:	f000 f898 	bl	8000b18 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80009e8:	f002 f8ca 	bl	8002b80 <xTaskGetSchedulerState>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d001      	beq.n	80009f6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80009f2:	f002 fb09 	bl	8003008 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
	...

080009fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <SystemInit+0x20>)
 8000a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a06:	4a05      	ldr	r2, [pc, #20]	; (8000a1c <SystemInit+0x20>)
 8000a08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a58 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a24:	f7ff ffea 	bl	80009fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a28:	480c      	ldr	r0, [pc, #48]	; (8000a5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a2a:	490d      	ldr	r1, [pc, #52]	; (8000a60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a2c:	4a0d      	ldr	r2, [pc, #52]	; (8000a64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a30:	e002      	b.n	8000a38 <LoopCopyDataInit>

08000a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a36:	3304      	adds	r3, #4

08000a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a3c:	d3f9      	bcc.n	8000a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3e:	4a0a      	ldr	r2, [pc, #40]	; (8000a68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a40:	4c0a      	ldr	r4, [pc, #40]	; (8000a6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a44:	e001      	b.n	8000a4a <LoopFillZerobss>

08000a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a48:	3204      	adds	r2, #4

08000a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a4c:	d3fb      	bcc.n	8000a46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a4e:	f002 fd73 	bl	8003538 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a52:	f7ff fd5d 	bl	8000510 <main>
  bx  lr    
 8000a56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a60:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000a64:	08003740 	.word	0x08003740
  ldr r2, =_sbss
 8000a68:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000a6c:	20004210 	.word	0x20004210

08000a70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a70:	e7fe      	b.n	8000a70 <ADC_IRQHandler>
	...

08000a74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a78:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <HAL_Init+0x40>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a0d      	ldr	r2, [pc, #52]	; (8000ab4 <HAL_Init+0x40>)
 8000a7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a84:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <HAL_Init+0x40>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a0a      	ldr	r2, [pc, #40]	; (8000ab4 <HAL_Init+0x40>)
 8000a8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <HAL_Init+0x40>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a07      	ldr	r2, [pc, #28]	; (8000ab4 <HAL_Init+0x40>)
 8000a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a9c:	2003      	movs	r0, #3
 8000a9e:	f000 f90d 	bl	8000cbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa2:	200f      	movs	r0, #15
 8000aa4:	f000 f808 	bl	8000ab8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa8:	f7ff ff10 	bl	80008cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40023c00 	.word	0x40023c00

08000ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <HAL_InitTick+0x54>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <HAL_InitTick+0x58>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 f917 	bl	8000d0a <HAL_SYSTICK_Config>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e00e      	b.n	8000b04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2b0f      	cmp	r3, #15
 8000aea:	d80a      	bhi.n	8000b02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aec:	2200      	movs	r2, #0
 8000aee:	6879      	ldr	r1, [r7, #4]
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000af4:	f000 f8ed 	bl	8000cd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af8:	4a06      	ldr	r2, [pc, #24]	; (8000b14 <HAL_InitTick+0x5c>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000afe:	2300      	movs	r3, #0
 8000b00:	e000      	b.n	8000b04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000000 	.word	0x20000000
 8000b10:	20000008 	.word	0x20000008
 8000b14:	20000004 	.word	0x20000004

08000b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_IncTick+0x20>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_IncTick+0x24>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4413      	add	r3, r2
 8000b28:	4a04      	ldr	r2, [pc, #16]	; (8000b3c <HAL_IncTick+0x24>)
 8000b2a:	6013      	str	r3, [r2, #0]
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	20000378 	.word	0x20000378

08000b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return uwTick;
 8000b44:	4b03      	ldr	r3, [pc, #12]	; (8000b54 <HAL_GetTick+0x14>)
 8000b46:	681b      	ldr	r3, [r3, #0]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	20000378 	.word	0x20000378

08000b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <__NVIC_SetPriorityGrouping+0x44>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b6e:	68ba      	ldr	r2, [r7, #8]
 8000b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b74:	4013      	ands	r3, r2
 8000b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b8a:	4a04      	ldr	r2, [pc, #16]	; (8000b9c <__NVIC_SetPriorityGrouping+0x44>)
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	60d3      	str	r3, [r2, #12]
}
 8000b90:	bf00      	nop
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba4:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	0a1b      	lsrs	r3, r3, #8
 8000baa:	f003 0307 	and.w	r3, r3, #7
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	6039      	str	r1, [r7, #0]
 8000bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	db0a      	blt.n	8000be6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	490c      	ldr	r1, [pc, #48]	; (8000c08 <__NVIC_SetPriority+0x4c>)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	0112      	lsls	r2, r2, #4
 8000bdc:	b2d2      	uxtb	r2, r2
 8000bde:	440b      	add	r3, r1
 8000be0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be4:	e00a      	b.n	8000bfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	4908      	ldr	r1, [pc, #32]	; (8000c0c <__NVIC_SetPriority+0x50>)
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	f003 030f 	and.w	r3, r3, #15
 8000bf2:	3b04      	subs	r3, #4
 8000bf4:	0112      	lsls	r2, r2, #4
 8000bf6:	b2d2      	uxtb	r2, r2
 8000bf8:	440b      	add	r3, r1
 8000bfa:	761a      	strb	r2, [r3, #24]
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000e100 	.word	0xe000e100
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b089      	sub	sp, #36	; 0x24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	f003 0307 	and.w	r3, r3, #7
 8000c22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	f1c3 0307 	rsb	r3, r3, #7
 8000c2a:	2b04      	cmp	r3, #4
 8000c2c:	bf28      	it	cs
 8000c2e:	2304      	movcs	r3, #4
 8000c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	3304      	adds	r3, #4
 8000c36:	2b06      	cmp	r3, #6
 8000c38:	d902      	bls.n	8000c40 <NVIC_EncodePriority+0x30>
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	3b03      	subs	r3, #3
 8000c3e:	e000      	b.n	8000c42 <NVIC_EncodePriority+0x32>
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	43da      	mvns	r2, r3
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	401a      	ands	r2, r3
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c62:	43d9      	mvns	r1, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c68:	4313      	orrs	r3, r2
         );
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3724      	adds	r7, #36	; 0x24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
	...

08000c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3b01      	subs	r3, #1
 8000c84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c88:	d301      	bcc.n	8000c8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e00f      	b.n	8000cae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <SysTick_Config+0x40>)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3b01      	subs	r3, #1
 8000c94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c96:	210f      	movs	r1, #15
 8000c98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f7ff ff8e 	bl	8000bbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca0:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <SysTick_Config+0x40>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ca6:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <SysTick_Config+0x40>)
 8000ca8:	2207      	movs	r2, #7
 8000caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	e000e010 	.word	0xe000e010

08000cbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	f7ff ff47 	bl	8000b58 <__NVIC_SetPriorityGrouping>
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b086      	sub	sp, #24
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	4603      	mov	r3, r0
 8000cda:	60b9      	str	r1, [r7, #8]
 8000cdc:	607a      	str	r2, [r7, #4]
 8000cde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce4:	f7ff ff5c 	bl	8000ba0 <__NVIC_GetPriorityGrouping>
 8000ce8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	68b9      	ldr	r1, [r7, #8]
 8000cee:	6978      	ldr	r0, [r7, #20]
 8000cf0:	f7ff ff8e 	bl	8000c10 <NVIC_EncodePriority>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cfa:	4611      	mov	r1, r2
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff ff5d 	bl	8000bbc <__NVIC_SetPriority>
}
 8000d02:	bf00      	nop
 8000d04:	3718      	adds	r7, #24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff ffb0 	bl	8000c78 <SysTick_Config>
 8000d18:	4603      	mov	r3, r0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
	...

08000d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b089      	sub	sp, #36	; 0x24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61fb      	str	r3, [r7, #28]
 8000d3e:	e159      	b.n	8000ff4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d40:	2201      	movs	r2, #1
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	697a      	ldr	r2, [r7, #20]
 8000d50:	4013      	ands	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	f040 8148 	bne.w	8000fee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f003 0303 	and.w	r3, r3, #3
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d005      	beq.n	8000d76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d130      	bne.n	8000dd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	2203      	movs	r2, #3
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43db      	mvns	r3, r3
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	68da      	ldr	r2, [r3, #12]
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dac:	2201      	movs	r2, #1
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4013      	ands	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	091b      	lsrs	r3, r3, #4
 8000dc2:	f003 0201 	and.w	r2, r3, #1
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f003 0303 	and.w	r3, r3, #3
 8000de0:	2b03      	cmp	r3, #3
 8000de2:	d017      	beq.n	8000e14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	2203      	movs	r2, #3
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	689a      	ldr	r2, [r3, #8]
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f003 0303 	and.w	r3, r3, #3
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d123      	bne.n	8000e68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	08da      	lsrs	r2, r3, #3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3208      	adds	r2, #8
 8000e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	f003 0307 	and.w	r3, r3, #7
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	220f      	movs	r2, #15
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4013      	ands	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	691a      	ldr	r2, [r3, #16]
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	08da      	lsrs	r2, r3, #3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	3208      	adds	r2, #8
 8000e62:	69b9      	ldr	r1, [r7, #24]
 8000e64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	2203      	movs	r2, #3
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f003 0203 	and.w	r2, r3, #3
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	f000 80a2 	beq.w	8000fee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	4b57      	ldr	r3, [pc, #348]	; (800100c <HAL_GPIO_Init+0x2e8>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb2:	4a56      	ldr	r2, [pc, #344]	; (800100c <HAL_GPIO_Init+0x2e8>)
 8000eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eba:	4b54      	ldr	r3, [pc, #336]	; (800100c <HAL_GPIO_Init+0x2e8>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ec6:	4a52      	ldr	r2, [pc, #328]	; (8001010 <HAL_GPIO_Init+0x2ec>)
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	089b      	lsrs	r3, r3, #2
 8000ecc:	3302      	adds	r3, #2
 8000ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	f003 0303 	and.w	r3, r3, #3
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	220f      	movs	r2, #15
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a49      	ldr	r2, [pc, #292]	; (8001014 <HAL_GPIO_Init+0x2f0>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d019      	beq.n	8000f26 <HAL_GPIO_Init+0x202>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a48      	ldr	r2, [pc, #288]	; (8001018 <HAL_GPIO_Init+0x2f4>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d013      	beq.n	8000f22 <HAL_GPIO_Init+0x1fe>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a47      	ldr	r2, [pc, #284]	; (800101c <HAL_GPIO_Init+0x2f8>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d00d      	beq.n	8000f1e <HAL_GPIO_Init+0x1fa>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a46      	ldr	r2, [pc, #280]	; (8001020 <HAL_GPIO_Init+0x2fc>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d007      	beq.n	8000f1a <HAL_GPIO_Init+0x1f6>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a45      	ldr	r2, [pc, #276]	; (8001024 <HAL_GPIO_Init+0x300>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d101      	bne.n	8000f16 <HAL_GPIO_Init+0x1f2>
 8000f12:	2304      	movs	r3, #4
 8000f14:	e008      	b.n	8000f28 <HAL_GPIO_Init+0x204>
 8000f16:	2307      	movs	r3, #7
 8000f18:	e006      	b.n	8000f28 <HAL_GPIO_Init+0x204>
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	e004      	b.n	8000f28 <HAL_GPIO_Init+0x204>
 8000f1e:	2302      	movs	r3, #2
 8000f20:	e002      	b.n	8000f28 <HAL_GPIO_Init+0x204>
 8000f22:	2301      	movs	r3, #1
 8000f24:	e000      	b.n	8000f28 <HAL_GPIO_Init+0x204>
 8000f26:	2300      	movs	r3, #0
 8000f28:	69fa      	ldr	r2, [r7, #28]
 8000f2a:	f002 0203 	and.w	r2, r2, #3
 8000f2e:	0092      	lsls	r2, r2, #2
 8000f30:	4093      	lsls	r3, r2
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f38:	4935      	ldr	r1, [pc, #212]	; (8001010 <HAL_GPIO_Init+0x2ec>)
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	089b      	lsrs	r3, r3, #2
 8000f3e:	3302      	adds	r3, #2
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f46:	4b38      	ldr	r3, [pc, #224]	; (8001028 <HAL_GPIO_Init+0x304>)
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4013      	ands	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d003      	beq.n	8000f6a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f6a:	4a2f      	ldr	r2, [pc, #188]	; (8001028 <HAL_GPIO_Init+0x304>)
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f70:	4b2d      	ldr	r3, [pc, #180]	; (8001028 <HAL_GPIO_Init+0x304>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d003      	beq.n	8000f94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f94:	4a24      	ldr	r2, [pc, #144]	; (8001028 <HAL_GPIO_Init+0x304>)
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f9a:	4b23      	ldr	r3, [pc, #140]	; (8001028 <HAL_GPIO_Init+0x304>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fbe:	4a1a      	ldr	r2, [pc, #104]	; (8001028 <HAL_GPIO_Init+0x304>)
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fc4:	4b18      	ldr	r3, [pc, #96]	; (8001028 <HAL_GPIO_Init+0x304>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d003      	beq.n	8000fe8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fe8:	4a0f      	ldr	r2, [pc, #60]	; (8001028 <HAL_GPIO_Init+0x304>)
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	61fb      	str	r3, [r7, #28]
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	2b0f      	cmp	r3, #15
 8000ff8:	f67f aea2 	bls.w	8000d40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ffc:	bf00      	nop
 8000ffe:	bf00      	nop
 8001000:	3724      	adds	r7, #36	; 0x24
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	40023800 	.word	0x40023800
 8001010:	40013800 	.word	0x40013800
 8001014:	40020000 	.word	0x40020000
 8001018:	40020400 	.word	0x40020400
 800101c:	40020800 	.word	0x40020800
 8001020:	40020c00 	.word	0x40020c00
 8001024:	40021000 	.word	0x40021000
 8001028:	40013c00 	.word	0x40013c00

0800102c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	460b      	mov	r3, r1
 8001036:	807b      	strh	r3, [r7, #2]
 8001038:	4613      	mov	r3, r2
 800103a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800103c:	787b      	ldrb	r3, [r7, #1]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001042:	887a      	ldrh	r2, [r7, #2]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001048:	e003      	b.n	8001052 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800104a:	887b      	ldrh	r3, [r7, #2]
 800104c:	041a      	lsls	r2, r3, #16
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	619a      	str	r2, [r3, #24]
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800105e:	b480      	push	{r7}
 8001060:	b085      	sub	sp, #20
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
 8001066:	460b      	mov	r3, r1
 8001068:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001070:	887a      	ldrh	r2, [r7, #2]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	4013      	ands	r3, r2
 8001076:	041a      	lsls	r2, r3, #16
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	43d9      	mvns	r1, r3
 800107c:	887b      	ldrh	r3, [r7, #2]
 800107e:	400b      	ands	r3, r1
 8001080:	431a      	orrs	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	619a      	str	r2, [r3, #24]
}
 8001086:	bf00      	nop
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
	...

08001094 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d101      	bne.n	80010a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e267      	b.n	8001576 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d075      	beq.n	800119e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010b2:	4b88      	ldr	r3, [pc, #544]	; (80012d4 <HAL_RCC_OscConfig+0x240>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f003 030c 	and.w	r3, r3, #12
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	d00c      	beq.n	80010d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010be:	4b85      	ldr	r3, [pc, #532]	; (80012d4 <HAL_RCC_OscConfig+0x240>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010c6:	2b08      	cmp	r3, #8
 80010c8:	d112      	bne.n	80010f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ca:	4b82      	ldr	r3, [pc, #520]	; (80012d4 <HAL_RCC_OscConfig+0x240>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010d6:	d10b      	bne.n	80010f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010d8:	4b7e      	ldr	r3, [pc, #504]	; (80012d4 <HAL_RCC_OscConfig+0x240>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d05b      	beq.n	800119c <HAL_RCC_OscConfig+0x108>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d157      	bne.n	800119c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e242      	b.n	8001576 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010f8:	d106      	bne.n	8001108 <HAL_RCC_OscConfig+0x74>
 80010fa:	4b76      	ldr	r3, [pc, #472]	; (80012d4 <HAL_RCC_OscConfig+0x240>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a75      	ldr	r2, [pc, #468]	; (80012d4 <HAL_RCC_OscConfig+0x240>)
 8001100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	e01d      	b.n	8001144 <HAL_RCC_OscConfig+0xb0>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001110:	d10c      	bne.n	800112c <HAL_RCC_OscConfig+0x98>
 8001112:	4b70      	ldr	r3, [pc, #448]	; (80012d4 <HAL_RCC_OscConfig+0x240>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a6f      	ldr	r2, [pc, #444]	; (80012d4 <HAL_RCC_OscConfig+0x240>)
 8001118:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800111c:	6013      	str	r3, [r2, #0]
 800111e:	4b6d      	ldr	r3, [pc, #436]	; (80012d4 <HAL_RCC_OscConfig+0x240>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a6c      	ldr	r2, [pc, #432]	; (80012d4 <HAL_RCC_OscConfig+0x240>)
 8001124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	e00b      	b.n	8001144 <HAL_RCC_OscConfig+0xb0>
 800112c:	4b69      	ldr	r3, [pc, #420]	; (80012d4 <HAL_RCC_OscConfig+0x240>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a68      	ldr	r2, [pc, #416]	; (80012d4 <HAL_RCC_OscConfig+0x240>)
 8001132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	4b66      	ldr	r3, [pc, #408]	; (80012d4 <HAL_RCC_OscConfig+0x240>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a65      	ldr	r2, [pc, #404]	; (80012d4 <HAL_RCC_OscConfig+0x240>)
 800113e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001142:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d013      	beq.n	8001174 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114c:	f7ff fcf8 	bl	8000b40 <HAL_GetTick>
 8001150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001152:	e008      	b.n	8001166 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001154:	f7ff fcf4 	bl	8000b40 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b64      	cmp	r3, #100	; 0x64
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e207      	b.n	8001576 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001166:	4b5b      	ldr	r3, [pc, #364]	; (80012d4 <HAL_RCC_OscConfig+0x240>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d0f0      	beq.n	8001154 <HAL_RCC_OscConfig+0xc0>
 8001172:	e014      	b.n	800119e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001174:	f7ff fce4 	bl	8000b40 <HAL_GetTick>
 8001178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800117a:	e008      	b.n	800118e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800117c:	f7ff fce0 	bl	8000b40 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b64      	cmp	r3, #100	; 0x64
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e1f3      	b.n	8001576 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800118e:	4b51      	ldr	r3, [pc, #324]	; (80012d4 <HAL_RCC_OscConfig+0x240>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1f0      	bne.n	800117c <HAL_RCC_OscConfig+0xe8>
 800119a:	e000      	b.n	800119e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800119c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d063      	beq.n	8001272 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011aa:	4b4a      	ldr	r3, [pc, #296]	; (80012d4 <HAL_RCC_OscConfig+0x240>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f003 030c 	and.w	r3, r3, #12
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d00b      	beq.n	80011ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011b6:	4b47      	ldr	r3, [pc, #284]	; (80012d4 <HAL_RCC_OscConfig+0x240>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011be:	2b08      	cmp	r3, #8
 80011c0:	d11c      	bne.n	80011fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011c2:	4b44      	ldr	r3, [pc, #272]	; (80012d4 <HAL_RCC_OscConfig+0x240>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d116      	bne.n	80011fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ce:	4b41      	ldr	r3, [pc, #260]	; (80012d4 <HAL_RCC_OscConfig+0x240>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d005      	beq.n	80011e6 <HAL_RCC_OscConfig+0x152>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d001      	beq.n	80011e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e1c7      	b.n	8001576 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e6:	4b3b      	ldr	r3, [pc, #236]	; (80012d4 <HAL_RCC_OscConfig+0x240>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	691b      	ldr	r3, [r3, #16]
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	4937      	ldr	r1, [pc, #220]	; (80012d4 <HAL_RCC_OscConfig+0x240>)
 80011f6:	4313      	orrs	r3, r2
 80011f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011fa:	e03a      	b.n	8001272 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d020      	beq.n	8001246 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001204:	4b34      	ldr	r3, [pc, #208]	; (80012d8 <HAL_RCC_OscConfig+0x244>)
 8001206:	2201      	movs	r2, #1
 8001208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800120a:	f7ff fc99 	bl	8000b40 <HAL_GetTick>
 800120e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001210:	e008      	b.n	8001224 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001212:	f7ff fc95 	bl	8000b40 <HAL_GetTick>
 8001216:	4602      	mov	r2, r0
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	2b02      	cmp	r3, #2
 800121e:	d901      	bls.n	8001224 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001220:	2303      	movs	r3, #3
 8001222:	e1a8      	b.n	8001576 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001224:	4b2b      	ldr	r3, [pc, #172]	; (80012d4 <HAL_RCC_OscConfig+0x240>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	2b00      	cmp	r3, #0
 800122e:	d0f0      	beq.n	8001212 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001230:	4b28      	ldr	r3, [pc, #160]	; (80012d4 <HAL_RCC_OscConfig+0x240>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	691b      	ldr	r3, [r3, #16]
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	4925      	ldr	r1, [pc, #148]	; (80012d4 <HAL_RCC_OscConfig+0x240>)
 8001240:	4313      	orrs	r3, r2
 8001242:	600b      	str	r3, [r1, #0]
 8001244:	e015      	b.n	8001272 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001246:	4b24      	ldr	r3, [pc, #144]	; (80012d8 <HAL_RCC_OscConfig+0x244>)
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800124c:	f7ff fc78 	bl	8000b40 <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001254:	f7ff fc74 	bl	8000b40 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e187      	b.n	8001576 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001266:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <HAL_RCC_OscConfig+0x240>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1f0      	bne.n	8001254 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0308 	and.w	r3, r3, #8
 800127a:	2b00      	cmp	r3, #0
 800127c:	d036      	beq.n	80012ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d016      	beq.n	80012b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001286:	4b15      	ldr	r3, [pc, #84]	; (80012dc <HAL_RCC_OscConfig+0x248>)
 8001288:	2201      	movs	r2, #1
 800128a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800128c:	f7ff fc58 	bl	8000b40 <HAL_GetTick>
 8001290:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001292:	e008      	b.n	80012a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001294:	f7ff fc54 	bl	8000b40 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e167      	b.n	8001576 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012a6:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <HAL_RCC_OscConfig+0x240>)
 80012a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d0f0      	beq.n	8001294 <HAL_RCC_OscConfig+0x200>
 80012b2:	e01b      	b.n	80012ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <HAL_RCC_OscConfig+0x248>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ba:	f7ff fc41 	bl	8000b40 <HAL_GetTick>
 80012be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c0:	e00e      	b.n	80012e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012c2:	f7ff fc3d 	bl	8000b40 <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d907      	bls.n	80012e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e150      	b.n	8001576 <HAL_RCC_OscConfig+0x4e2>
 80012d4:	40023800 	.word	0x40023800
 80012d8:	42470000 	.word	0x42470000
 80012dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012e0:	4b88      	ldr	r3, [pc, #544]	; (8001504 <HAL_RCC_OscConfig+0x470>)
 80012e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d1ea      	bne.n	80012c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0304 	and.w	r3, r3, #4
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	f000 8097 	beq.w	8001428 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012fa:	2300      	movs	r3, #0
 80012fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012fe:	4b81      	ldr	r3, [pc, #516]	; (8001504 <HAL_RCC_OscConfig+0x470>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d10f      	bne.n	800132a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	4b7d      	ldr	r3, [pc, #500]	; (8001504 <HAL_RCC_OscConfig+0x470>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	4a7c      	ldr	r2, [pc, #496]	; (8001504 <HAL_RCC_OscConfig+0x470>)
 8001314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001318:	6413      	str	r3, [r2, #64]	; 0x40
 800131a:	4b7a      	ldr	r3, [pc, #488]	; (8001504 <HAL_RCC_OscConfig+0x470>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001326:	2301      	movs	r3, #1
 8001328:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800132a:	4b77      	ldr	r3, [pc, #476]	; (8001508 <HAL_RCC_OscConfig+0x474>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001332:	2b00      	cmp	r3, #0
 8001334:	d118      	bne.n	8001368 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001336:	4b74      	ldr	r3, [pc, #464]	; (8001508 <HAL_RCC_OscConfig+0x474>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a73      	ldr	r2, [pc, #460]	; (8001508 <HAL_RCC_OscConfig+0x474>)
 800133c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001340:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001342:	f7ff fbfd 	bl	8000b40 <HAL_GetTick>
 8001346:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001348:	e008      	b.n	800135c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800134a:	f7ff fbf9 	bl	8000b40 <HAL_GetTick>
 800134e:	4602      	mov	r2, r0
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b02      	cmp	r3, #2
 8001356:	d901      	bls.n	800135c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e10c      	b.n	8001576 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800135c:	4b6a      	ldr	r3, [pc, #424]	; (8001508 <HAL_RCC_OscConfig+0x474>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001364:	2b00      	cmp	r3, #0
 8001366:	d0f0      	beq.n	800134a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d106      	bne.n	800137e <HAL_RCC_OscConfig+0x2ea>
 8001370:	4b64      	ldr	r3, [pc, #400]	; (8001504 <HAL_RCC_OscConfig+0x470>)
 8001372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001374:	4a63      	ldr	r2, [pc, #396]	; (8001504 <HAL_RCC_OscConfig+0x470>)
 8001376:	f043 0301 	orr.w	r3, r3, #1
 800137a:	6713      	str	r3, [r2, #112]	; 0x70
 800137c:	e01c      	b.n	80013b8 <HAL_RCC_OscConfig+0x324>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	2b05      	cmp	r3, #5
 8001384:	d10c      	bne.n	80013a0 <HAL_RCC_OscConfig+0x30c>
 8001386:	4b5f      	ldr	r3, [pc, #380]	; (8001504 <HAL_RCC_OscConfig+0x470>)
 8001388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800138a:	4a5e      	ldr	r2, [pc, #376]	; (8001504 <HAL_RCC_OscConfig+0x470>)
 800138c:	f043 0304 	orr.w	r3, r3, #4
 8001390:	6713      	str	r3, [r2, #112]	; 0x70
 8001392:	4b5c      	ldr	r3, [pc, #368]	; (8001504 <HAL_RCC_OscConfig+0x470>)
 8001394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001396:	4a5b      	ldr	r2, [pc, #364]	; (8001504 <HAL_RCC_OscConfig+0x470>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	6713      	str	r3, [r2, #112]	; 0x70
 800139e:	e00b      	b.n	80013b8 <HAL_RCC_OscConfig+0x324>
 80013a0:	4b58      	ldr	r3, [pc, #352]	; (8001504 <HAL_RCC_OscConfig+0x470>)
 80013a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a4:	4a57      	ldr	r2, [pc, #348]	; (8001504 <HAL_RCC_OscConfig+0x470>)
 80013a6:	f023 0301 	bic.w	r3, r3, #1
 80013aa:	6713      	str	r3, [r2, #112]	; 0x70
 80013ac:	4b55      	ldr	r3, [pc, #340]	; (8001504 <HAL_RCC_OscConfig+0x470>)
 80013ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b0:	4a54      	ldr	r2, [pc, #336]	; (8001504 <HAL_RCC_OscConfig+0x470>)
 80013b2:	f023 0304 	bic.w	r3, r3, #4
 80013b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d015      	beq.n	80013ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c0:	f7ff fbbe 	bl	8000b40 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013c6:	e00a      	b.n	80013de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013c8:	f7ff fbba 	bl	8000b40 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e0cb      	b.n	8001576 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013de:	4b49      	ldr	r3, [pc, #292]	; (8001504 <HAL_RCC_OscConfig+0x470>)
 80013e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d0ee      	beq.n	80013c8 <HAL_RCC_OscConfig+0x334>
 80013ea:	e014      	b.n	8001416 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ec:	f7ff fba8 	bl	8000b40 <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013f2:	e00a      	b.n	800140a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013f4:	f7ff fba4 	bl	8000b40 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001402:	4293      	cmp	r3, r2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e0b5      	b.n	8001576 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800140a:	4b3e      	ldr	r3, [pc, #248]	; (8001504 <HAL_RCC_OscConfig+0x470>)
 800140c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1ee      	bne.n	80013f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001416:	7dfb      	ldrb	r3, [r7, #23]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d105      	bne.n	8001428 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800141c:	4b39      	ldr	r3, [pc, #228]	; (8001504 <HAL_RCC_OscConfig+0x470>)
 800141e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001420:	4a38      	ldr	r2, [pc, #224]	; (8001504 <HAL_RCC_OscConfig+0x470>)
 8001422:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001426:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	2b00      	cmp	r3, #0
 800142e:	f000 80a1 	beq.w	8001574 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001432:	4b34      	ldr	r3, [pc, #208]	; (8001504 <HAL_RCC_OscConfig+0x470>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f003 030c 	and.w	r3, r3, #12
 800143a:	2b08      	cmp	r3, #8
 800143c:	d05c      	beq.n	80014f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	2b02      	cmp	r3, #2
 8001444:	d141      	bne.n	80014ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001446:	4b31      	ldr	r3, [pc, #196]	; (800150c <HAL_RCC_OscConfig+0x478>)
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144c:	f7ff fb78 	bl	8000b40 <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001454:	f7ff fb74 	bl	8000b40 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e087      	b.n	8001576 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001466:	4b27      	ldr	r3, [pc, #156]	; (8001504 <HAL_RCC_OscConfig+0x470>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1f0      	bne.n	8001454 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	69da      	ldr	r2, [r3, #28]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a1b      	ldr	r3, [r3, #32]
 800147a:	431a      	orrs	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001480:	019b      	lsls	r3, r3, #6
 8001482:	431a      	orrs	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001488:	085b      	lsrs	r3, r3, #1
 800148a:	3b01      	subs	r3, #1
 800148c:	041b      	lsls	r3, r3, #16
 800148e:	431a      	orrs	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001494:	061b      	lsls	r3, r3, #24
 8001496:	491b      	ldr	r1, [pc, #108]	; (8001504 <HAL_RCC_OscConfig+0x470>)
 8001498:	4313      	orrs	r3, r2
 800149a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800149c:	4b1b      	ldr	r3, [pc, #108]	; (800150c <HAL_RCC_OscConfig+0x478>)
 800149e:	2201      	movs	r2, #1
 80014a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a2:	f7ff fb4d 	bl	8000b40 <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014a8:	e008      	b.n	80014bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014aa:	f7ff fb49 	bl	8000b40 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e05c      	b.n	8001576 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014bc:	4b11      	ldr	r3, [pc, #68]	; (8001504 <HAL_RCC_OscConfig+0x470>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d0f0      	beq.n	80014aa <HAL_RCC_OscConfig+0x416>
 80014c8:	e054      	b.n	8001574 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ca:	4b10      	ldr	r3, [pc, #64]	; (800150c <HAL_RCC_OscConfig+0x478>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d0:	f7ff fb36 	bl	8000b40 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014d8:	f7ff fb32 	bl	8000b40 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e045      	b.n	8001576 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_RCC_OscConfig+0x470>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f0      	bne.n	80014d8 <HAL_RCC_OscConfig+0x444>
 80014f6:	e03d      	b.n	8001574 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d107      	bne.n	8001510 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e038      	b.n	8001576 <HAL_RCC_OscConfig+0x4e2>
 8001504:	40023800 	.word	0x40023800
 8001508:	40007000 	.word	0x40007000
 800150c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001510:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <HAL_RCC_OscConfig+0x4ec>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d028      	beq.n	8001570 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001528:	429a      	cmp	r2, r3
 800152a:	d121      	bne.n	8001570 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001536:	429a      	cmp	r2, r3
 8001538:	d11a      	bne.n	8001570 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001540:	4013      	ands	r3, r2
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001546:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001548:	4293      	cmp	r3, r2
 800154a:	d111      	bne.n	8001570 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001556:	085b      	lsrs	r3, r3, #1
 8001558:	3b01      	subs	r3, #1
 800155a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800155c:	429a      	cmp	r2, r3
 800155e:	d107      	bne.n	8001570 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800156c:	429a      	cmp	r2, r3
 800156e:	d001      	beq.n	8001574 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e000      	b.n	8001576 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40023800 	.word	0x40023800

08001584 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e0cc      	b.n	8001732 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001598:	4b68      	ldr	r3, [pc, #416]	; (800173c <HAL_RCC_ClockConfig+0x1b8>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d90c      	bls.n	80015c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a6:	4b65      	ldr	r3, [pc, #404]	; (800173c <HAL_RCC_ClockConfig+0x1b8>)
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ae:	4b63      	ldr	r3, [pc, #396]	; (800173c <HAL_RCC_ClockConfig+0x1b8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d001      	beq.n	80015c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e0b8      	b.n	8001732 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d020      	beq.n	800160e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d005      	beq.n	80015e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015d8:	4b59      	ldr	r3, [pc, #356]	; (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	4a58      	ldr	r2, [pc, #352]	; (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 80015de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0308 	and.w	r3, r3, #8
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d005      	beq.n	80015fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015f0:	4b53      	ldr	r3, [pc, #332]	; (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	4a52      	ldr	r2, [pc, #328]	; (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 80015f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015fc:	4b50      	ldr	r3, [pc, #320]	; (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	494d      	ldr	r1, [pc, #308]	; (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 800160a:	4313      	orrs	r3, r2
 800160c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	2b00      	cmp	r3, #0
 8001618:	d044      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d107      	bne.n	8001632 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001622:	4b47      	ldr	r3, [pc, #284]	; (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d119      	bne.n	8001662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e07f      	b.n	8001732 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b02      	cmp	r3, #2
 8001638:	d003      	beq.n	8001642 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800163e:	2b03      	cmp	r3, #3
 8001640:	d107      	bne.n	8001652 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001642:	4b3f      	ldr	r3, [pc, #252]	; (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d109      	bne.n	8001662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e06f      	b.n	8001732 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001652:	4b3b      	ldr	r3, [pc, #236]	; (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d101      	bne.n	8001662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e067      	b.n	8001732 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001662:	4b37      	ldr	r3, [pc, #220]	; (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f023 0203 	bic.w	r2, r3, #3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	4934      	ldr	r1, [pc, #208]	; (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 8001670:	4313      	orrs	r3, r2
 8001672:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001674:	f7ff fa64 	bl	8000b40 <HAL_GetTick>
 8001678:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800167a:	e00a      	b.n	8001692 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800167c:	f7ff fa60 	bl	8000b40 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	f241 3288 	movw	r2, #5000	; 0x1388
 800168a:	4293      	cmp	r3, r2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e04f      	b.n	8001732 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001692:	4b2b      	ldr	r3, [pc, #172]	; (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f003 020c 	and.w	r2, r3, #12
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d1eb      	bne.n	800167c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016a4:	4b25      	ldr	r3, [pc, #148]	; (800173c <HAL_RCC_ClockConfig+0x1b8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0307 	and.w	r3, r3, #7
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d20c      	bcs.n	80016cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b2:	4b22      	ldr	r3, [pc, #136]	; (800173c <HAL_RCC_ClockConfig+0x1b8>)
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ba:	4b20      	ldr	r3, [pc, #128]	; (800173c <HAL_RCC_ClockConfig+0x1b8>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	683a      	ldr	r2, [r7, #0]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d001      	beq.n	80016cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e032      	b.n	8001732 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0304 	and.w	r3, r3, #4
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d008      	beq.n	80016ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016d8:	4b19      	ldr	r3, [pc, #100]	; (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	4916      	ldr	r1, [pc, #88]	; (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0308 	and.w	r3, r3, #8
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d009      	beq.n	800170a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016f6:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	490e      	ldr	r1, [pc, #56]	; (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 8001706:	4313      	orrs	r3, r2
 8001708:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800170a:	f000 f821 	bl	8001750 <HAL_RCC_GetSysClockFreq>
 800170e:	4602      	mov	r2, r0
 8001710:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	091b      	lsrs	r3, r3, #4
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	490a      	ldr	r1, [pc, #40]	; (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 800171c:	5ccb      	ldrb	r3, [r1, r3]
 800171e:	fa22 f303 	lsr.w	r3, r2, r3
 8001722:	4a09      	ldr	r2, [pc, #36]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001724:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001726:	4b09      	ldr	r3, [pc, #36]	; (800174c <HAL_RCC_ClockConfig+0x1c8>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff f9c4 	bl	8000ab8 <HAL_InitTick>

  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40023c00 	.word	0x40023c00
 8001740:	40023800 	.word	0x40023800
 8001744:	08003718 	.word	0x08003718
 8001748:	20000000 	.word	0x20000000
 800174c:	20000004 	.word	0x20000004

08001750 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001750:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001754:	b094      	sub	sp, #80	; 0x50
 8001756:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001758:	2300      	movs	r3, #0
 800175a:	647b      	str	r3, [r7, #68]	; 0x44
 800175c:	2300      	movs	r3, #0
 800175e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001760:	2300      	movs	r3, #0
 8001762:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001764:	2300      	movs	r3, #0
 8001766:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001768:	4b79      	ldr	r3, [pc, #484]	; (8001950 <HAL_RCC_GetSysClockFreq+0x200>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f003 030c 	and.w	r3, r3, #12
 8001770:	2b08      	cmp	r3, #8
 8001772:	d00d      	beq.n	8001790 <HAL_RCC_GetSysClockFreq+0x40>
 8001774:	2b08      	cmp	r3, #8
 8001776:	f200 80e1 	bhi.w	800193c <HAL_RCC_GetSysClockFreq+0x1ec>
 800177a:	2b00      	cmp	r3, #0
 800177c:	d002      	beq.n	8001784 <HAL_RCC_GetSysClockFreq+0x34>
 800177e:	2b04      	cmp	r3, #4
 8001780:	d003      	beq.n	800178a <HAL_RCC_GetSysClockFreq+0x3a>
 8001782:	e0db      	b.n	800193c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001784:	4b73      	ldr	r3, [pc, #460]	; (8001954 <HAL_RCC_GetSysClockFreq+0x204>)
 8001786:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001788:	e0db      	b.n	8001942 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800178a:	4b73      	ldr	r3, [pc, #460]	; (8001958 <HAL_RCC_GetSysClockFreq+0x208>)
 800178c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800178e:	e0d8      	b.n	8001942 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001790:	4b6f      	ldr	r3, [pc, #444]	; (8001950 <HAL_RCC_GetSysClockFreq+0x200>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001798:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800179a:	4b6d      	ldr	r3, [pc, #436]	; (8001950 <HAL_RCC_GetSysClockFreq+0x200>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d063      	beq.n	800186e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017a6:	4b6a      	ldr	r3, [pc, #424]	; (8001950 <HAL_RCC_GetSysClockFreq+0x200>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	099b      	lsrs	r3, r3, #6
 80017ac:	2200      	movs	r2, #0
 80017ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80017b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80017b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017b8:	633b      	str	r3, [r7, #48]	; 0x30
 80017ba:	2300      	movs	r3, #0
 80017bc:	637b      	str	r3, [r7, #52]	; 0x34
 80017be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80017c2:	4622      	mov	r2, r4
 80017c4:	462b      	mov	r3, r5
 80017c6:	f04f 0000 	mov.w	r0, #0
 80017ca:	f04f 0100 	mov.w	r1, #0
 80017ce:	0159      	lsls	r1, r3, #5
 80017d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017d4:	0150      	lsls	r0, r2, #5
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	4621      	mov	r1, r4
 80017dc:	1a51      	subs	r1, r2, r1
 80017de:	6139      	str	r1, [r7, #16]
 80017e0:	4629      	mov	r1, r5
 80017e2:	eb63 0301 	sbc.w	r3, r3, r1
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	f04f 0200 	mov.w	r2, #0
 80017ec:	f04f 0300 	mov.w	r3, #0
 80017f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80017f4:	4659      	mov	r1, fp
 80017f6:	018b      	lsls	r3, r1, #6
 80017f8:	4651      	mov	r1, sl
 80017fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017fe:	4651      	mov	r1, sl
 8001800:	018a      	lsls	r2, r1, #6
 8001802:	4651      	mov	r1, sl
 8001804:	ebb2 0801 	subs.w	r8, r2, r1
 8001808:	4659      	mov	r1, fp
 800180a:	eb63 0901 	sbc.w	r9, r3, r1
 800180e:	f04f 0200 	mov.w	r2, #0
 8001812:	f04f 0300 	mov.w	r3, #0
 8001816:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800181a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800181e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001822:	4690      	mov	r8, r2
 8001824:	4699      	mov	r9, r3
 8001826:	4623      	mov	r3, r4
 8001828:	eb18 0303 	adds.w	r3, r8, r3
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	462b      	mov	r3, r5
 8001830:	eb49 0303 	adc.w	r3, r9, r3
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	f04f 0300 	mov.w	r3, #0
 800183e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001842:	4629      	mov	r1, r5
 8001844:	024b      	lsls	r3, r1, #9
 8001846:	4621      	mov	r1, r4
 8001848:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800184c:	4621      	mov	r1, r4
 800184e:	024a      	lsls	r2, r1, #9
 8001850:	4610      	mov	r0, r2
 8001852:	4619      	mov	r1, r3
 8001854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001856:	2200      	movs	r2, #0
 8001858:	62bb      	str	r3, [r7, #40]	; 0x28
 800185a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800185c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001860:	f7fe fcbe 	bl	80001e0 <__aeabi_uldivmod>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	4613      	mov	r3, r2
 800186a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800186c:	e058      	b.n	8001920 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800186e:	4b38      	ldr	r3, [pc, #224]	; (8001950 <HAL_RCC_GetSysClockFreq+0x200>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	099b      	lsrs	r3, r3, #6
 8001874:	2200      	movs	r2, #0
 8001876:	4618      	mov	r0, r3
 8001878:	4611      	mov	r1, r2
 800187a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800187e:	623b      	str	r3, [r7, #32]
 8001880:	2300      	movs	r3, #0
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
 8001884:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001888:	4642      	mov	r2, r8
 800188a:	464b      	mov	r3, r9
 800188c:	f04f 0000 	mov.w	r0, #0
 8001890:	f04f 0100 	mov.w	r1, #0
 8001894:	0159      	lsls	r1, r3, #5
 8001896:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800189a:	0150      	lsls	r0, r2, #5
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4641      	mov	r1, r8
 80018a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80018a6:	4649      	mov	r1, r9
 80018a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80018b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80018bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018c0:	ebb2 040a 	subs.w	r4, r2, sl
 80018c4:	eb63 050b 	sbc.w	r5, r3, fp
 80018c8:	f04f 0200 	mov.w	r2, #0
 80018cc:	f04f 0300 	mov.w	r3, #0
 80018d0:	00eb      	lsls	r3, r5, #3
 80018d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018d6:	00e2      	lsls	r2, r4, #3
 80018d8:	4614      	mov	r4, r2
 80018da:	461d      	mov	r5, r3
 80018dc:	4643      	mov	r3, r8
 80018de:	18e3      	adds	r3, r4, r3
 80018e0:	603b      	str	r3, [r7, #0]
 80018e2:	464b      	mov	r3, r9
 80018e4:	eb45 0303 	adc.w	r3, r5, r3
 80018e8:	607b      	str	r3, [r7, #4]
 80018ea:	f04f 0200 	mov.w	r2, #0
 80018ee:	f04f 0300 	mov.w	r3, #0
 80018f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018f6:	4629      	mov	r1, r5
 80018f8:	028b      	lsls	r3, r1, #10
 80018fa:	4621      	mov	r1, r4
 80018fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001900:	4621      	mov	r1, r4
 8001902:	028a      	lsls	r2, r1, #10
 8001904:	4610      	mov	r0, r2
 8001906:	4619      	mov	r1, r3
 8001908:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800190a:	2200      	movs	r2, #0
 800190c:	61bb      	str	r3, [r7, #24]
 800190e:	61fa      	str	r2, [r7, #28]
 8001910:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001914:	f7fe fc64 	bl	80001e0 <__aeabi_uldivmod>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	4613      	mov	r3, r2
 800191e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001920:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <HAL_RCC_GetSysClockFreq+0x200>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	0c1b      	lsrs	r3, r3, #16
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	3301      	adds	r3, #1
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001930:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001932:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001934:	fbb2 f3f3 	udiv	r3, r2, r3
 8001938:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800193a:	e002      	b.n	8001942 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <HAL_RCC_GetSysClockFreq+0x204>)
 800193e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001940:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001942:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001944:	4618      	mov	r0, r3
 8001946:	3750      	adds	r7, #80	; 0x50
 8001948:	46bd      	mov	sp, r7
 800194a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800194e:	bf00      	nop
 8001950:	40023800 	.word	0x40023800
 8001954:	00f42400 	.word	0x00f42400
 8001958:	007a1200 	.word	0x007a1200

0800195c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001960:	4b03      	ldr	r3, [pc, #12]	; (8001970 <HAL_RCC_GetHCLKFreq+0x14>)
 8001962:	681b      	ldr	r3, [r3, #0]
}
 8001964:	4618      	mov	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	20000000 	.word	0x20000000

08001974 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001978:	f7ff fff0 	bl	800195c <HAL_RCC_GetHCLKFreq>
 800197c:	4602      	mov	r2, r0
 800197e:	4b05      	ldr	r3, [pc, #20]	; (8001994 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	0a9b      	lsrs	r3, r3, #10
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	4903      	ldr	r1, [pc, #12]	; (8001998 <HAL_RCC_GetPCLK1Freq+0x24>)
 800198a:	5ccb      	ldrb	r3, [r1, r3]
 800198c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001990:	4618      	mov	r0, r3
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40023800 	.word	0x40023800
 8001998:	08003728 	.word	0x08003728

0800199c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019a0:	f7ff ffdc 	bl	800195c <HAL_RCC_GetHCLKFreq>
 80019a4:	4602      	mov	r2, r0
 80019a6:	4b05      	ldr	r3, [pc, #20]	; (80019bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	0b5b      	lsrs	r3, r3, #13
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	4903      	ldr	r1, [pc, #12]	; (80019c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019b2:	5ccb      	ldrb	r3, [r1, r3]
 80019b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40023800 	.word	0x40023800
 80019c0:	08003728 	.word	0x08003728

080019c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e042      	b.n	8001a5c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d106      	bne.n	80019f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7fe ff9a 	bl	8000924 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2224      	movs	r2, #36	; 0x24
 80019f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68da      	ldr	r2, [r3, #12]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f000 f82b 	bl	8001a64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	691a      	ldr	r2, [r3, #16]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	695a      	ldr	r2, [r3, #20]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	68da      	ldr	r2, [r3, #12]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2220      	movs	r2, #32
 8001a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2220      	movs	r2, #32
 8001a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a68:	b0c0      	sub	sp, #256	; 0x100
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a80:	68d9      	ldr	r1, [r3, #12]
 8001a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	ea40 0301 	orr.w	r3, r0, r1
 8001a8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001abc:	f021 010c 	bic.w	r1, r1, #12
 8001ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001aca:	430b      	orrs	r3, r1
 8001acc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ade:	6999      	ldr	r1, [r3, #24]
 8001ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	ea40 0301 	orr.w	r3, r0, r1
 8001aea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	4b8f      	ldr	r3, [pc, #572]	; (8001d30 <UART_SetConfig+0x2cc>)
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d005      	beq.n	8001b04 <UART_SetConfig+0xa0>
 8001af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	4b8d      	ldr	r3, [pc, #564]	; (8001d34 <UART_SetConfig+0x2d0>)
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d104      	bne.n	8001b0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001b04:	f7ff ff4a 	bl	800199c <HAL_RCC_GetPCLK2Freq>
 8001b08:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001b0c:	e003      	b.n	8001b16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001b0e:	f7ff ff31 	bl	8001974 <HAL_RCC_GetPCLK1Freq>
 8001b12:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b1a:	69db      	ldr	r3, [r3, #28]
 8001b1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b20:	f040 810c 	bne.w	8001d3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001b24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001b2e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001b32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001b36:	4622      	mov	r2, r4
 8001b38:	462b      	mov	r3, r5
 8001b3a:	1891      	adds	r1, r2, r2
 8001b3c:	65b9      	str	r1, [r7, #88]	; 0x58
 8001b3e:	415b      	adcs	r3, r3
 8001b40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001b46:	4621      	mov	r1, r4
 8001b48:	eb12 0801 	adds.w	r8, r2, r1
 8001b4c:	4629      	mov	r1, r5
 8001b4e:	eb43 0901 	adc.w	r9, r3, r1
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	f04f 0300 	mov.w	r3, #0
 8001b5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b66:	4690      	mov	r8, r2
 8001b68:	4699      	mov	r9, r3
 8001b6a:	4623      	mov	r3, r4
 8001b6c:	eb18 0303 	adds.w	r3, r8, r3
 8001b70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001b74:	462b      	mov	r3, r5
 8001b76:	eb49 0303 	adc.w	r3, r9, r3
 8001b7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001b8a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001b8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001b92:	460b      	mov	r3, r1
 8001b94:	18db      	adds	r3, r3, r3
 8001b96:	653b      	str	r3, [r7, #80]	; 0x50
 8001b98:	4613      	mov	r3, r2
 8001b9a:	eb42 0303 	adc.w	r3, r2, r3
 8001b9e:	657b      	str	r3, [r7, #84]	; 0x54
 8001ba0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001ba4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001ba8:	f7fe fb1a 	bl	80001e0 <__aeabi_uldivmod>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4b61      	ldr	r3, [pc, #388]	; (8001d38 <UART_SetConfig+0x2d4>)
 8001bb2:	fba3 2302 	umull	r2, r3, r3, r2
 8001bb6:	095b      	lsrs	r3, r3, #5
 8001bb8:	011c      	lsls	r4, r3, #4
 8001bba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001bc4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001bc8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001bcc:	4642      	mov	r2, r8
 8001bce:	464b      	mov	r3, r9
 8001bd0:	1891      	adds	r1, r2, r2
 8001bd2:	64b9      	str	r1, [r7, #72]	; 0x48
 8001bd4:	415b      	adcs	r3, r3
 8001bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bd8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001bdc:	4641      	mov	r1, r8
 8001bde:	eb12 0a01 	adds.w	sl, r2, r1
 8001be2:	4649      	mov	r1, r9
 8001be4:	eb43 0b01 	adc.w	fp, r3, r1
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	f04f 0300 	mov.w	r3, #0
 8001bf0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001bf4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001bf8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001bfc:	4692      	mov	sl, r2
 8001bfe:	469b      	mov	fp, r3
 8001c00:	4643      	mov	r3, r8
 8001c02:	eb1a 0303 	adds.w	r3, sl, r3
 8001c06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001c0a:	464b      	mov	r3, r9
 8001c0c:	eb4b 0303 	adc.w	r3, fp, r3
 8001c10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001c20:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001c24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	18db      	adds	r3, r3, r3
 8001c2c:	643b      	str	r3, [r7, #64]	; 0x40
 8001c2e:	4613      	mov	r3, r2
 8001c30:	eb42 0303 	adc.w	r3, r2, r3
 8001c34:	647b      	str	r3, [r7, #68]	; 0x44
 8001c36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001c3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001c3e:	f7fe facf 	bl	80001e0 <__aeabi_uldivmod>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	4611      	mov	r1, r2
 8001c48:	4b3b      	ldr	r3, [pc, #236]	; (8001d38 <UART_SetConfig+0x2d4>)
 8001c4a:	fba3 2301 	umull	r2, r3, r3, r1
 8001c4e:	095b      	lsrs	r3, r3, #5
 8001c50:	2264      	movs	r2, #100	; 0x64
 8001c52:	fb02 f303 	mul.w	r3, r2, r3
 8001c56:	1acb      	subs	r3, r1, r3
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001c5e:	4b36      	ldr	r3, [pc, #216]	; (8001d38 <UART_SetConfig+0x2d4>)
 8001c60:	fba3 2302 	umull	r2, r3, r3, r2
 8001c64:	095b      	lsrs	r3, r3, #5
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001c6c:	441c      	add	r4, r3
 8001c6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c72:	2200      	movs	r2, #0
 8001c74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001c78:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001c7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001c80:	4642      	mov	r2, r8
 8001c82:	464b      	mov	r3, r9
 8001c84:	1891      	adds	r1, r2, r2
 8001c86:	63b9      	str	r1, [r7, #56]	; 0x38
 8001c88:	415b      	adcs	r3, r3
 8001c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001c90:	4641      	mov	r1, r8
 8001c92:	1851      	adds	r1, r2, r1
 8001c94:	6339      	str	r1, [r7, #48]	; 0x30
 8001c96:	4649      	mov	r1, r9
 8001c98:	414b      	adcs	r3, r1
 8001c9a:	637b      	str	r3, [r7, #52]	; 0x34
 8001c9c:	f04f 0200 	mov.w	r2, #0
 8001ca0:	f04f 0300 	mov.w	r3, #0
 8001ca4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001ca8:	4659      	mov	r1, fp
 8001caa:	00cb      	lsls	r3, r1, #3
 8001cac:	4651      	mov	r1, sl
 8001cae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001cb2:	4651      	mov	r1, sl
 8001cb4:	00ca      	lsls	r2, r1, #3
 8001cb6:	4610      	mov	r0, r2
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4603      	mov	r3, r0
 8001cbc:	4642      	mov	r2, r8
 8001cbe:	189b      	adds	r3, r3, r2
 8001cc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001cc4:	464b      	mov	r3, r9
 8001cc6:	460a      	mov	r2, r1
 8001cc8:	eb42 0303 	adc.w	r3, r2, r3
 8001ccc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001cdc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001ce0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	18db      	adds	r3, r3, r3
 8001ce8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cea:	4613      	mov	r3, r2
 8001cec:	eb42 0303 	adc.w	r3, r2, r3
 8001cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cf2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001cf6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001cfa:	f7fe fa71 	bl	80001e0 <__aeabi_uldivmod>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <UART_SetConfig+0x2d4>)
 8001d04:	fba3 1302 	umull	r1, r3, r3, r2
 8001d08:	095b      	lsrs	r3, r3, #5
 8001d0a:	2164      	movs	r1, #100	; 0x64
 8001d0c:	fb01 f303 	mul.w	r3, r1, r3
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	3332      	adds	r3, #50	; 0x32
 8001d16:	4a08      	ldr	r2, [pc, #32]	; (8001d38 <UART_SetConfig+0x2d4>)
 8001d18:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1c:	095b      	lsrs	r3, r3, #5
 8001d1e:	f003 0207 	and.w	r2, r3, #7
 8001d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4422      	add	r2, r4
 8001d2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001d2c:	e106      	b.n	8001f3c <UART_SetConfig+0x4d8>
 8001d2e:	bf00      	nop
 8001d30:	40011000 	.word	0x40011000
 8001d34:	40011400 	.word	0x40011400
 8001d38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d40:	2200      	movs	r2, #0
 8001d42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001d46:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001d4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001d4e:	4642      	mov	r2, r8
 8001d50:	464b      	mov	r3, r9
 8001d52:	1891      	adds	r1, r2, r2
 8001d54:	6239      	str	r1, [r7, #32]
 8001d56:	415b      	adcs	r3, r3
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24
 8001d5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d5e:	4641      	mov	r1, r8
 8001d60:	1854      	adds	r4, r2, r1
 8001d62:	4649      	mov	r1, r9
 8001d64:	eb43 0501 	adc.w	r5, r3, r1
 8001d68:	f04f 0200 	mov.w	r2, #0
 8001d6c:	f04f 0300 	mov.w	r3, #0
 8001d70:	00eb      	lsls	r3, r5, #3
 8001d72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d76:	00e2      	lsls	r2, r4, #3
 8001d78:	4614      	mov	r4, r2
 8001d7a:	461d      	mov	r5, r3
 8001d7c:	4643      	mov	r3, r8
 8001d7e:	18e3      	adds	r3, r4, r3
 8001d80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001d84:	464b      	mov	r3, r9
 8001d86:	eb45 0303 	adc.w	r3, r5, r3
 8001d8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001d9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001d9e:	f04f 0200 	mov.w	r2, #0
 8001da2:	f04f 0300 	mov.w	r3, #0
 8001da6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001daa:	4629      	mov	r1, r5
 8001dac:	008b      	lsls	r3, r1, #2
 8001dae:	4621      	mov	r1, r4
 8001db0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001db4:	4621      	mov	r1, r4
 8001db6:	008a      	lsls	r2, r1, #2
 8001db8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001dbc:	f7fe fa10 	bl	80001e0 <__aeabi_uldivmod>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4b60      	ldr	r3, [pc, #384]	; (8001f48 <UART_SetConfig+0x4e4>)
 8001dc6:	fba3 2302 	umull	r2, r3, r3, r2
 8001dca:	095b      	lsrs	r3, r3, #5
 8001dcc:	011c      	lsls	r4, r3, #4
 8001dce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001dd8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001ddc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001de0:	4642      	mov	r2, r8
 8001de2:	464b      	mov	r3, r9
 8001de4:	1891      	adds	r1, r2, r2
 8001de6:	61b9      	str	r1, [r7, #24]
 8001de8:	415b      	adcs	r3, r3
 8001dea:	61fb      	str	r3, [r7, #28]
 8001dec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001df0:	4641      	mov	r1, r8
 8001df2:	1851      	adds	r1, r2, r1
 8001df4:	6139      	str	r1, [r7, #16]
 8001df6:	4649      	mov	r1, r9
 8001df8:	414b      	adcs	r3, r1
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	f04f 0200 	mov.w	r2, #0
 8001e00:	f04f 0300 	mov.w	r3, #0
 8001e04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e08:	4659      	mov	r1, fp
 8001e0a:	00cb      	lsls	r3, r1, #3
 8001e0c:	4651      	mov	r1, sl
 8001e0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e12:	4651      	mov	r1, sl
 8001e14:	00ca      	lsls	r2, r1, #3
 8001e16:	4610      	mov	r0, r2
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	4642      	mov	r2, r8
 8001e1e:	189b      	adds	r3, r3, r2
 8001e20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001e24:	464b      	mov	r3, r9
 8001e26:	460a      	mov	r2, r1
 8001e28:	eb42 0303 	adc.w	r3, r2, r3
 8001e2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	67bb      	str	r3, [r7, #120]	; 0x78
 8001e3a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001e3c:	f04f 0200 	mov.w	r2, #0
 8001e40:	f04f 0300 	mov.w	r3, #0
 8001e44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001e48:	4649      	mov	r1, r9
 8001e4a:	008b      	lsls	r3, r1, #2
 8001e4c:	4641      	mov	r1, r8
 8001e4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e52:	4641      	mov	r1, r8
 8001e54:	008a      	lsls	r2, r1, #2
 8001e56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001e5a:	f7fe f9c1 	bl	80001e0 <__aeabi_uldivmod>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4611      	mov	r1, r2
 8001e64:	4b38      	ldr	r3, [pc, #224]	; (8001f48 <UART_SetConfig+0x4e4>)
 8001e66:	fba3 2301 	umull	r2, r3, r3, r1
 8001e6a:	095b      	lsrs	r3, r3, #5
 8001e6c:	2264      	movs	r2, #100	; 0x64
 8001e6e:	fb02 f303 	mul.w	r3, r2, r3
 8001e72:	1acb      	subs	r3, r1, r3
 8001e74:	011b      	lsls	r3, r3, #4
 8001e76:	3332      	adds	r3, #50	; 0x32
 8001e78:	4a33      	ldr	r2, [pc, #204]	; (8001f48 <UART_SetConfig+0x4e4>)
 8001e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7e:	095b      	lsrs	r3, r3, #5
 8001e80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e84:	441c      	add	r4, r3
 8001e86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	673b      	str	r3, [r7, #112]	; 0x70
 8001e8e:	677a      	str	r2, [r7, #116]	; 0x74
 8001e90:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001e94:	4642      	mov	r2, r8
 8001e96:	464b      	mov	r3, r9
 8001e98:	1891      	adds	r1, r2, r2
 8001e9a:	60b9      	str	r1, [r7, #8]
 8001e9c:	415b      	adcs	r3, r3
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ea4:	4641      	mov	r1, r8
 8001ea6:	1851      	adds	r1, r2, r1
 8001ea8:	6039      	str	r1, [r7, #0]
 8001eaa:	4649      	mov	r1, r9
 8001eac:	414b      	adcs	r3, r1
 8001eae:	607b      	str	r3, [r7, #4]
 8001eb0:	f04f 0200 	mov.w	r2, #0
 8001eb4:	f04f 0300 	mov.w	r3, #0
 8001eb8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001ebc:	4659      	mov	r1, fp
 8001ebe:	00cb      	lsls	r3, r1, #3
 8001ec0:	4651      	mov	r1, sl
 8001ec2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ec6:	4651      	mov	r1, sl
 8001ec8:	00ca      	lsls	r2, r1, #3
 8001eca:	4610      	mov	r0, r2
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4603      	mov	r3, r0
 8001ed0:	4642      	mov	r2, r8
 8001ed2:	189b      	adds	r3, r3, r2
 8001ed4:	66bb      	str	r3, [r7, #104]	; 0x68
 8001ed6:	464b      	mov	r3, r9
 8001ed8:	460a      	mov	r2, r1
 8001eda:	eb42 0303 	adc.w	r3, r2, r3
 8001ede:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	663b      	str	r3, [r7, #96]	; 0x60
 8001eea:	667a      	str	r2, [r7, #100]	; 0x64
 8001eec:	f04f 0200 	mov.w	r2, #0
 8001ef0:	f04f 0300 	mov.w	r3, #0
 8001ef4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8001ef8:	4649      	mov	r1, r9
 8001efa:	008b      	lsls	r3, r1, #2
 8001efc:	4641      	mov	r1, r8
 8001efe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f02:	4641      	mov	r1, r8
 8001f04:	008a      	lsls	r2, r1, #2
 8001f06:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001f0a:	f7fe f969 	bl	80001e0 <__aeabi_uldivmod>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4b0d      	ldr	r3, [pc, #52]	; (8001f48 <UART_SetConfig+0x4e4>)
 8001f14:	fba3 1302 	umull	r1, r3, r3, r2
 8001f18:	095b      	lsrs	r3, r3, #5
 8001f1a:	2164      	movs	r1, #100	; 0x64
 8001f1c:	fb01 f303 	mul.w	r3, r1, r3
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	011b      	lsls	r3, r3, #4
 8001f24:	3332      	adds	r3, #50	; 0x32
 8001f26:	4a08      	ldr	r2, [pc, #32]	; (8001f48 <UART_SetConfig+0x4e4>)
 8001f28:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2c:	095b      	lsrs	r3, r3, #5
 8001f2e:	f003 020f 	and.w	r2, r3, #15
 8001f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4422      	add	r2, r4
 8001f3a:	609a      	str	r2, [r3, #8]
}
 8001f3c:	bf00      	nop
 8001f3e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001f42:	46bd      	mov	sp, r7
 8001f44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f48:	51eb851f 	.word	0x51eb851f

08001f4c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001f56:	2300      	movs	r3, #0
 8001f58:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001f5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f5e:	2b84      	cmp	r3, #132	; 0x84
 8001f60:	d005      	beq.n	8001f6e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001f62:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	4413      	add	r3, r2
 8001f6a:	3303      	adds	r3, #3
 8001f6c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001f80:	f000 faf6 	bl	8002570 <vTaskStartScheduler>
  
  return osOK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001f8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f8c:	b089      	sub	sp, #36	; 0x24
 8001f8e:	af04      	add	r7, sp, #16
 8001f90:	6078      	str	r0, [r7, #4]
 8001f92:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d020      	beq.n	8001fde <osThreadCreate+0x54>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d01c      	beq.n	8001fde <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685c      	ldr	r4, [r3, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	691e      	ldr	r6, [r3, #16]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff ffc8 	bl	8001f4c <makeFreeRtosPriority>
 8001fbc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001fc6:	9202      	str	r2, [sp, #8]
 8001fc8:	9301      	str	r3, [sp, #4]
 8001fca:	9100      	str	r1, [sp, #0]
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	4632      	mov	r2, r6
 8001fd0:	4629      	mov	r1, r5
 8001fd2:	4620      	mov	r0, r4
 8001fd4:	f000 f8ed 	bl	80021b2 <xTaskCreateStatic>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	e01c      	b.n	8002018 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685c      	ldr	r4, [r3, #4]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001fea:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff ffaa 	bl	8001f4c <makeFreeRtosPriority>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	f107 030c 	add.w	r3, r7, #12
 8001ffe:	9301      	str	r3, [sp, #4]
 8002000:	9200      	str	r2, [sp, #0]
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	4632      	mov	r2, r6
 8002006:	4629      	mov	r1, r5
 8002008:	4620      	mov	r0, r4
 800200a:	f000 f92f 	bl	800226c <xTaskCreate>
 800200e:	4603      	mov	r3, r0
 8002010:	2b01      	cmp	r3, #1
 8002012:	d001      	beq.n	8002018 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002014:	2300      	movs	r3, #0
 8002016:	e000      	b.n	800201a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002018:	68fb      	ldr	r3, [r7, #12]
}
 800201a:	4618      	mov	r0, r3
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002022 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b084      	sub	sp, #16
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <osDelay+0x16>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	e000      	b.n	800203a <osDelay+0x18>
 8002038:	2301      	movs	r3, #1
 800203a:	4618      	mov	r0, r3
 800203c:	f000 fa64 	bl	8002508 <vTaskDelay>
  
  return osOK;
 8002040:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002042:	4618      	mov	r0, r3
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800204a:	b480      	push	{r7}
 800204c:	b083      	sub	sp, #12
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f103 0208 	add.w	r2, r3, #8
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002062:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f103 0208 	add.w	r2, r3, #8
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f103 0208 	add.w	r2, r3, #8
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	689a      	ldr	r2, [r3, #8]
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	1c5a      	adds	r2, r3, #1
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	601a      	str	r2, [r3, #0]
}
 80020e0:	bf00      	nop
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002102:	d103      	bne.n	800210c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	e00c      	b.n	8002126 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3308      	adds	r3, #8
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	e002      	b.n	800211a <vListInsert+0x2e>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68ba      	ldr	r2, [r7, #8]
 8002122:	429a      	cmp	r2, r3
 8002124:	d2f6      	bcs.n	8002114 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	1c5a      	adds	r2, r3, #1
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	601a      	str	r2, [r3, #0]
}
 8002152:	bf00      	nop
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800215e:	b480      	push	{r7}
 8002160:	b085      	sub	sp, #20
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	6892      	ldr	r2, [r2, #8]
 8002174:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6852      	ldr	r2, [r2, #4]
 800217e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	429a      	cmp	r2, r3
 8002188:	d103      	bne.n	8002192 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	1e5a      	subs	r2, r3, #1
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b08e      	sub	sp, #56	; 0x38
 80021b6:	af04      	add	r7, sp, #16
 80021b8:	60f8      	str	r0, [r7, #12]
 80021ba:	60b9      	str	r1, [r7, #8]
 80021bc:	607a      	str	r2, [r7, #4]
 80021be:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80021c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10a      	bne.n	80021dc <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80021c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ca:	f383 8811 	msr	BASEPRI, r3
 80021ce:	f3bf 8f6f 	isb	sy
 80021d2:	f3bf 8f4f 	dsb	sy
 80021d6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80021d8:	bf00      	nop
 80021da:	e7fe      	b.n	80021da <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80021dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10a      	bne.n	80021f8 <xTaskCreateStatic+0x46>
	__asm volatile
 80021e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021e6:	f383 8811 	msr	BASEPRI, r3
 80021ea:	f3bf 8f6f 	isb	sy
 80021ee:	f3bf 8f4f 	dsb	sy
 80021f2:	61fb      	str	r3, [r7, #28]
}
 80021f4:	bf00      	nop
 80021f6:	e7fe      	b.n	80021f6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80021f8:	23a0      	movs	r3, #160	; 0xa0
 80021fa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	2ba0      	cmp	r3, #160	; 0xa0
 8002200:	d00a      	beq.n	8002218 <xTaskCreateStatic+0x66>
	__asm volatile
 8002202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002206:	f383 8811 	msr	BASEPRI, r3
 800220a:	f3bf 8f6f 	isb	sy
 800220e:	f3bf 8f4f 	dsb	sy
 8002212:	61bb      	str	r3, [r7, #24]
}
 8002214:	bf00      	nop
 8002216:	e7fe      	b.n	8002216 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002218:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800221a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800221c:	2b00      	cmp	r3, #0
 800221e:	d01e      	beq.n	800225e <xTaskCreateStatic+0xac>
 8002220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002222:	2b00      	cmp	r3, #0
 8002224:	d01b      	beq.n	800225e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002228:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800222e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002232:	2202      	movs	r2, #2
 8002234:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002238:	2300      	movs	r3, #0
 800223a:	9303      	str	r3, [sp, #12]
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	9302      	str	r3, [sp, #8]
 8002240:	f107 0314 	add.w	r3, r7, #20
 8002244:	9301      	str	r3, [sp, #4]
 8002246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	68b9      	ldr	r1, [r7, #8]
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f000 f851 	bl	80022f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002256:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002258:	f000 f8ec 	bl	8002434 <prvAddNewTaskToReadyList>
 800225c:	e001      	b.n	8002262 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800225e:	2300      	movs	r3, #0
 8002260:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002262:	697b      	ldr	r3, [r7, #20]
	}
 8002264:	4618      	mov	r0, r3
 8002266:	3728      	adds	r7, #40	; 0x28
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08c      	sub	sp, #48	; 0x30
 8002270:	af04      	add	r7, sp, #16
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	603b      	str	r3, [r7, #0]
 8002278:	4613      	mov	r3, r2
 800227a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800227c:	88fb      	ldrh	r3, [r7, #6]
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4618      	mov	r0, r3
 8002282:	f000 ff11 	bl	80030a8 <pvPortMalloc>
 8002286:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00e      	beq.n	80022ac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800228e:	20a0      	movs	r0, #160	; 0xa0
 8002290:	f000 ff0a 	bl	80030a8 <pvPortMalloc>
 8002294:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	631a      	str	r2, [r3, #48]	; 0x30
 80022a2:	e005      	b.n	80022b0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80022a4:	6978      	ldr	r0, [r7, #20]
 80022a6:	f000 ffcb 	bl	8003240 <vPortFree>
 80022aa:	e001      	b.n	80022b0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d017      	beq.n	80022e6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80022be:	88fa      	ldrh	r2, [r7, #6]
 80022c0:	2300      	movs	r3, #0
 80022c2:	9303      	str	r3, [sp, #12]
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	9302      	str	r3, [sp, #8]
 80022c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ca:	9301      	str	r3, [sp, #4]
 80022cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	68b9      	ldr	r1, [r7, #8]
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	f000 f80f 	bl	80022f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80022da:	69f8      	ldr	r0, [r7, #28]
 80022dc:	f000 f8aa 	bl	8002434 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80022e0:	2301      	movs	r3, #1
 80022e2:	61bb      	str	r3, [r7, #24]
 80022e4:	e002      	b.n	80022ec <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80022e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022ea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80022ec:	69bb      	ldr	r3, [r7, #24]
	}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3720      	adds	r7, #32
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
	...

080022f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b088      	sub	sp, #32
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
 8002304:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002308:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002310:	3b01      	subs	r3, #1
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	f023 0307 	bic.w	r3, r3, #7
 800231e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00a      	beq.n	8002340 <prvInitialiseNewTask+0x48>
	__asm volatile
 800232a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800232e:	f383 8811 	msr	BASEPRI, r3
 8002332:	f3bf 8f6f 	isb	sy
 8002336:	f3bf 8f4f 	dsb	sy
 800233a:	617b      	str	r3, [r7, #20]
}
 800233c:	bf00      	nop
 800233e:	e7fe      	b.n	800233e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d01f      	beq.n	8002386 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002346:	2300      	movs	r3, #0
 8002348:	61fb      	str	r3, [r7, #28]
 800234a:	e012      	b.n	8002372 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800234c:	68ba      	ldr	r2, [r7, #8]
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	4413      	add	r3, r2
 8002352:	7819      	ldrb	r1, [r3, #0]
 8002354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	4413      	add	r3, r2
 800235a:	3334      	adds	r3, #52	; 0x34
 800235c:	460a      	mov	r2, r1
 800235e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002360:	68ba      	ldr	r2, [r7, #8]
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	4413      	add	r3, r2
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d006      	beq.n	800237a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	3301      	adds	r3, #1
 8002370:	61fb      	str	r3, [r7, #28]
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	2b0f      	cmp	r3, #15
 8002376:	d9e9      	bls.n	800234c <prvInitialiseNewTask+0x54>
 8002378:	e000      	b.n	800237c <prvInitialiseNewTask+0x84>
			{
				break;
 800237a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800237c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002384:	e003      	b.n	800238e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800238e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002390:	2b06      	cmp	r3, #6
 8002392:	d901      	bls.n	8002398 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002394:	2306      	movs	r3, #6
 8002396:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800239a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800239c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800239e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023a2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80023a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a6:	2200      	movs	r2, #0
 80023a8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80023aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ac:	3304      	adds	r3, #4
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff fe6b 	bl	800208a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80023b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b6:	3318      	adds	r3, #24
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff fe66 	bl	800208a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80023be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c6:	f1c3 0207 	rsb	r2, r3, #7
 80023ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80023ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80023d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d6:	2200      	movs	r2, #0
 80023d8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80023dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80023e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e6:	334c      	adds	r3, #76	; 0x4c
 80023e8:	224c      	movs	r2, #76	; 0x4c
 80023ea:	2100      	movs	r1, #0
 80023ec:	4618      	mov	r0, r3
 80023ee:	f001 f845 	bl	800347c <memset>
 80023f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f4:	4a0c      	ldr	r2, [pc, #48]	; (8002428 <prvInitialiseNewTask+0x130>)
 80023f6:	651a      	str	r2, [r3, #80]	; 0x50
 80023f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023fa:	4a0c      	ldr	r2, [pc, #48]	; (800242c <prvInitialiseNewTask+0x134>)
 80023fc:	655a      	str	r2, [r3, #84]	; 0x54
 80023fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002400:	4a0b      	ldr	r2, [pc, #44]	; (8002430 <prvInitialiseNewTask+0x138>)
 8002402:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	68f9      	ldr	r1, [r7, #12]
 8002408:	69b8      	ldr	r0, [r7, #24]
 800240a:	f000 fc3d 	bl	8002c88 <pxPortInitialiseStack>
 800240e:	4602      	mov	r2, r0
 8002410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002412:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002416:	2b00      	cmp	r3, #0
 8002418:	d002      	beq.n	8002420 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800241a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800241c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800241e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002420:	bf00      	nop
 8002422:	3720      	adds	r7, #32
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	200040d0 	.word	0x200040d0
 800242c:	20004138 	.word	0x20004138
 8002430:	200041a0 	.word	0x200041a0

08002434 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800243c:	f000 fd52 	bl	8002ee4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002440:	4b2a      	ldr	r3, [pc, #168]	; (80024ec <prvAddNewTaskToReadyList+0xb8>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	3301      	adds	r3, #1
 8002446:	4a29      	ldr	r2, [pc, #164]	; (80024ec <prvAddNewTaskToReadyList+0xb8>)
 8002448:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800244a:	4b29      	ldr	r3, [pc, #164]	; (80024f0 <prvAddNewTaskToReadyList+0xbc>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d109      	bne.n	8002466 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002452:	4a27      	ldr	r2, [pc, #156]	; (80024f0 <prvAddNewTaskToReadyList+0xbc>)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002458:	4b24      	ldr	r3, [pc, #144]	; (80024ec <prvAddNewTaskToReadyList+0xb8>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d110      	bne.n	8002482 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002460:	f000 facc 	bl	80029fc <prvInitialiseTaskLists>
 8002464:	e00d      	b.n	8002482 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002466:	4b23      	ldr	r3, [pc, #140]	; (80024f4 <prvAddNewTaskToReadyList+0xc0>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d109      	bne.n	8002482 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800246e:	4b20      	ldr	r3, [pc, #128]	; (80024f0 <prvAddNewTaskToReadyList+0xbc>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002478:	429a      	cmp	r2, r3
 800247a:	d802      	bhi.n	8002482 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800247c:	4a1c      	ldr	r2, [pc, #112]	; (80024f0 <prvAddNewTaskToReadyList+0xbc>)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002482:	4b1d      	ldr	r3, [pc, #116]	; (80024f8 <prvAddNewTaskToReadyList+0xc4>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	3301      	adds	r3, #1
 8002488:	4a1b      	ldr	r2, [pc, #108]	; (80024f8 <prvAddNewTaskToReadyList+0xc4>)
 800248a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002490:	2201      	movs	r2, #1
 8002492:	409a      	lsls	r2, r3
 8002494:	4b19      	ldr	r3, [pc, #100]	; (80024fc <prvAddNewTaskToReadyList+0xc8>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4313      	orrs	r3, r2
 800249a:	4a18      	ldr	r2, [pc, #96]	; (80024fc <prvAddNewTaskToReadyList+0xc8>)
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024a2:	4613      	mov	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4a15      	ldr	r2, [pc, #84]	; (8002500 <prvAddNewTaskToReadyList+0xcc>)
 80024ac:	441a      	add	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3304      	adds	r3, #4
 80024b2:	4619      	mov	r1, r3
 80024b4:	4610      	mov	r0, r2
 80024b6:	f7ff fdf5 	bl	80020a4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80024ba:	f000 fd43 	bl	8002f44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80024be:	4b0d      	ldr	r3, [pc, #52]	; (80024f4 <prvAddNewTaskToReadyList+0xc0>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00e      	beq.n	80024e4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80024c6:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <prvAddNewTaskToReadyList+0xbc>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d207      	bcs.n	80024e4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80024d4:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <prvAddNewTaskToReadyList+0xd0>)
 80024d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	f3bf 8f4f 	dsb	sy
 80024e0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80024e4:	bf00      	nop
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	2000047c 	.word	0x2000047c
 80024f0:	2000037c 	.word	0x2000037c
 80024f4:	20000488 	.word	0x20000488
 80024f8:	20000498 	.word	0x20000498
 80024fc:	20000484 	.word	0x20000484
 8002500:	20000380 	.word	0x20000380
 8002504:	e000ed04 	.word	0xe000ed04

08002508 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002510:	2300      	movs	r3, #0
 8002512:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d017      	beq.n	800254a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800251a:	4b13      	ldr	r3, [pc, #76]	; (8002568 <vTaskDelay+0x60>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00a      	beq.n	8002538 <vTaskDelay+0x30>
	__asm volatile
 8002522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002526:	f383 8811 	msr	BASEPRI, r3
 800252a:	f3bf 8f6f 	isb	sy
 800252e:	f3bf 8f4f 	dsb	sy
 8002532:	60bb      	str	r3, [r7, #8]
}
 8002534:	bf00      	nop
 8002536:	e7fe      	b.n	8002536 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002538:	f000 f884 	bl	8002644 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800253c:	2100      	movs	r1, #0
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 fb3c 	bl	8002bbc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002544:	f000 f88c 	bl	8002660 <xTaskResumeAll>
 8002548:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d107      	bne.n	8002560 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002550:	4b06      	ldr	r3, [pc, #24]	; (800256c <vTaskDelay+0x64>)
 8002552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	f3bf 8f4f 	dsb	sy
 800255c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002560:	bf00      	nop
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	200004a4 	.word	0x200004a4
 800256c:	e000ed04 	.word	0xe000ed04

08002570 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b08a      	sub	sp, #40	; 0x28
 8002574:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002576:	2300      	movs	r3, #0
 8002578:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800257a:	2300      	movs	r3, #0
 800257c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800257e:	463a      	mov	r2, r7
 8002580:	1d39      	adds	r1, r7, #4
 8002582:	f107 0308 	add.w	r3, r7, #8
 8002586:	4618      	mov	r0, r3
 8002588:	f7fd ffa8 	bl	80004dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800258c:	6839      	ldr	r1, [r7, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68ba      	ldr	r2, [r7, #8]
 8002592:	9202      	str	r2, [sp, #8]
 8002594:	9301      	str	r3, [sp, #4]
 8002596:	2300      	movs	r3, #0
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	2300      	movs	r3, #0
 800259c:	460a      	mov	r2, r1
 800259e:	4921      	ldr	r1, [pc, #132]	; (8002624 <vTaskStartScheduler+0xb4>)
 80025a0:	4821      	ldr	r0, [pc, #132]	; (8002628 <vTaskStartScheduler+0xb8>)
 80025a2:	f7ff fe06 	bl	80021b2 <xTaskCreateStatic>
 80025a6:	4603      	mov	r3, r0
 80025a8:	4a20      	ldr	r2, [pc, #128]	; (800262c <vTaskStartScheduler+0xbc>)
 80025aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80025ac:	4b1f      	ldr	r3, [pc, #124]	; (800262c <vTaskStartScheduler+0xbc>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d002      	beq.n	80025ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80025b4:	2301      	movs	r3, #1
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	e001      	b.n	80025be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d11b      	bne.n	80025fc <vTaskStartScheduler+0x8c>
	__asm volatile
 80025c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c8:	f383 8811 	msr	BASEPRI, r3
 80025cc:	f3bf 8f6f 	isb	sy
 80025d0:	f3bf 8f4f 	dsb	sy
 80025d4:	613b      	str	r3, [r7, #16]
}
 80025d6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80025d8:	4b15      	ldr	r3, [pc, #84]	; (8002630 <vTaskStartScheduler+0xc0>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	334c      	adds	r3, #76	; 0x4c
 80025de:	4a15      	ldr	r2, [pc, #84]	; (8002634 <vTaskStartScheduler+0xc4>)
 80025e0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80025e2:	4b15      	ldr	r3, [pc, #84]	; (8002638 <vTaskStartScheduler+0xc8>)
 80025e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80025ea:	4b14      	ldr	r3, [pc, #80]	; (800263c <vTaskStartScheduler+0xcc>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80025f0:	4b13      	ldr	r3, [pc, #76]	; (8002640 <vTaskStartScheduler+0xd0>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80025f6:	f000 fbd3 	bl	8002da0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80025fa:	e00e      	b.n	800261a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002602:	d10a      	bne.n	800261a <vTaskStartScheduler+0xaa>
	__asm volatile
 8002604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002608:	f383 8811 	msr	BASEPRI, r3
 800260c:	f3bf 8f6f 	isb	sy
 8002610:	f3bf 8f4f 	dsb	sy
 8002614:	60fb      	str	r3, [r7, #12]
}
 8002616:	bf00      	nop
 8002618:	e7fe      	b.n	8002618 <vTaskStartScheduler+0xa8>
}
 800261a:	bf00      	nop
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	08003710 	.word	0x08003710
 8002628:	080029cd 	.word	0x080029cd
 800262c:	200004a0 	.word	0x200004a0
 8002630:	2000037c 	.word	0x2000037c
 8002634:	2000005c 	.word	0x2000005c
 8002638:	2000049c 	.word	0x2000049c
 800263c:	20000488 	.word	0x20000488
 8002640:	20000480 	.word	0x20000480

08002644 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002648:	4b04      	ldr	r3, [pc, #16]	; (800265c <vTaskSuspendAll+0x18>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	3301      	adds	r3, #1
 800264e:	4a03      	ldr	r2, [pc, #12]	; (800265c <vTaskSuspendAll+0x18>)
 8002650:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002652:	bf00      	nop
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	200004a4 	.word	0x200004a4

08002660 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002666:	2300      	movs	r3, #0
 8002668:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800266a:	2300      	movs	r3, #0
 800266c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800266e:	4b41      	ldr	r3, [pc, #260]	; (8002774 <xTaskResumeAll+0x114>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10a      	bne.n	800268c <xTaskResumeAll+0x2c>
	__asm volatile
 8002676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800267a:	f383 8811 	msr	BASEPRI, r3
 800267e:	f3bf 8f6f 	isb	sy
 8002682:	f3bf 8f4f 	dsb	sy
 8002686:	603b      	str	r3, [r7, #0]
}
 8002688:	bf00      	nop
 800268a:	e7fe      	b.n	800268a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800268c:	f000 fc2a 	bl	8002ee4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002690:	4b38      	ldr	r3, [pc, #224]	; (8002774 <xTaskResumeAll+0x114>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	3b01      	subs	r3, #1
 8002696:	4a37      	ldr	r2, [pc, #220]	; (8002774 <xTaskResumeAll+0x114>)
 8002698:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800269a:	4b36      	ldr	r3, [pc, #216]	; (8002774 <xTaskResumeAll+0x114>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d161      	bne.n	8002766 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80026a2:	4b35      	ldr	r3, [pc, #212]	; (8002778 <xTaskResumeAll+0x118>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d05d      	beq.n	8002766 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80026aa:	e02e      	b.n	800270a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026ac:	4b33      	ldr	r3, [pc, #204]	; (800277c <xTaskResumeAll+0x11c>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	3318      	adds	r3, #24
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff fd50 	bl	800215e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	3304      	adds	r3, #4
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff fd4b 	bl	800215e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026cc:	2201      	movs	r2, #1
 80026ce:	409a      	lsls	r2, r3
 80026d0:	4b2b      	ldr	r3, [pc, #172]	; (8002780 <xTaskResumeAll+0x120>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	4a2a      	ldr	r2, [pc, #168]	; (8002780 <xTaskResumeAll+0x120>)
 80026d8:	6013      	str	r3, [r2, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026de:	4613      	mov	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4413      	add	r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	4a27      	ldr	r2, [pc, #156]	; (8002784 <xTaskResumeAll+0x124>)
 80026e8:	441a      	add	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	3304      	adds	r3, #4
 80026ee:	4619      	mov	r1, r3
 80026f0:	4610      	mov	r0, r2
 80026f2:	f7ff fcd7 	bl	80020a4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026fa:	4b23      	ldr	r3, [pc, #140]	; (8002788 <xTaskResumeAll+0x128>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002700:	429a      	cmp	r2, r3
 8002702:	d302      	bcc.n	800270a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002704:	4b21      	ldr	r3, [pc, #132]	; (800278c <xTaskResumeAll+0x12c>)
 8002706:	2201      	movs	r2, #1
 8002708:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800270a:	4b1c      	ldr	r3, [pc, #112]	; (800277c <xTaskResumeAll+0x11c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1cc      	bne.n	80026ac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002718:	f000 fa12 	bl	8002b40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800271c:	4b1c      	ldr	r3, [pc, #112]	; (8002790 <xTaskResumeAll+0x130>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d010      	beq.n	800274a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002728:	f000 f836 	bl	8002798 <xTaskIncrementTick>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d002      	beq.n	8002738 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002732:	4b16      	ldr	r3, [pc, #88]	; (800278c <xTaskResumeAll+0x12c>)
 8002734:	2201      	movs	r2, #1
 8002736:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3b01      	subs	r3, #1
 800273c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1f1      	bne.n	8002728 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8002744:	4b12      	ldr	r3, [pc, #72]	; (8002790 <xTaskResumeAll+0x130>)
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800274a:	4b10      	ldr	r3, [pc, #64]	; (800278c <xTaskResumeAll+0x12c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d009      	beq.n	8002766 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002752:	2301      	movs	r3, #1
 8002754:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002756:	4b0f      	ldr	r3, [pc, #60]	; (8002794 <xTaskResumeAll+0x134>)
 8002758:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	f3bf 8f4f 	dsb	sy
 8002762:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002766:	f000 fbed 	bl	8002f44 <vPortExitCritical>

	return xAlreadyYielded;
 800276a:	68bb      	ldr	r3, [r7, #8]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	200004a4 	.word	0x200004a4
 8002778:	2000047c 	.word	0x2000047c
 800277c:	2000043c 	.word	0x2000043c
 8002780:	20000484 	.word	0x20000484
 8002784:	20000380 	.word	0x20000380
 8002788:	2000037c 	.word	0x2000037c
 800278c:	20000490 	.word	0x20000490
 8002790:	2000048c 	.word	0x2000048c
 8002794:	e000ed04 	.word	0xe000ed04

08002798 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800279e:	2300      	movs	r3, #0
 80027a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027a2:	4b4e      	ldr	r3, [pc, #312]	; (80028dc <xTaskIncrementTick+0x144>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f040 808e 	bne.w	80028c8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80027ac:	4b4c      	ldr	r3, [pc, #304]	; (80028e0 <xTaskIncrementTick+0x148>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	3301      	adds	r3, #1
 80027b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80027b4:	4a4a      	ldr	r2, [pc, #296]	; (80028e0 <xTaskIncrementTick+0x148>)
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d120      	bne.n	8002802 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80027c0:	4b48      	ldr	r3, [pc, #288]	; (80028e4 <xTaskIncrementTick+0x14c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00a      	beq.n	80027e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80027ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ce:	f383 8811 	msr	BASEPRI, r3
 80027d2:	f3bf 8f6f 	isb	sy
 80027d6:	f3bf 8f4f 	dsb	sy
 80027da:	603b      	str	r3, [r7, #0]
}
 80027dc:	bf00      	nop
 80027de:	e7fe      	b.n	80027de <xTaskIncrementTick+0x46>
 80027e0:	4b40      	ldr	r3, [pc, #256]	; (80028e4 <xTaskIncrementTick+0x14c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	4b40      	ldr	r3, [pc, #256]	; (80028e8 <xTaskIncrementTick+0x150>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a3e      	ldr	r2, [pc, #248]	; (80028e4 <xTaskIncrementTick+0x14c>)
 80027ec:	6013      	str	r3, [r2, #0]
 80027ee:	4a3e      	ldr	r2, [pc, #248]	; (80028e8 <xTaskIncrementTick+0x150>)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6013      	str	r3, [r2, #0]
 80027f4:	4b3d      	ldr	r3, [pc, #244]	; (80028ec <xTaskIncrementTick+0x154>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	3301      	adds	r3, #1
 80027fa:	4a3c      	ldr	r2, [pc, #240]	; (80028ec <xTaskIncrementTick+0x154>)
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	f000 f99f 	bl	8002b40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002802:	4b3b      	ldr	r3, [pc, #236]	; (80028f0 <xTaskIncrementTick+0x158>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	429a      	cmp	r2, r3
 800280a:	d348      	bcc.n	800289e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800280c:	4b35      	ldr	r3, [pc, #212]	; (80028e4 <xTaskIncrementTick+0x14c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d104      	bne.n	8002820 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002816:	4b36      	ldr	r3, [pc, #216]	; (80028f0 <xTaskIncrementTick+0x158>)
 8002818:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800281c:	601a      	str	r2, [r3, #0]
					break;
 800281e:	e03e      	b.n	800289e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002820:	4b30      	ldr	r3, [pc, #192]	; (80028e4 <xTaskIncrementTick+0x14c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	429a      	cmp	r2, r3
 8002836:	d203      	bcs.n	8002840 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002838:	4a2d      	ldr	r2, [pc, #180]	; (80028f0 <xTaskIncrementTick+0x158>)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800283e:	e02e      	b.n	800289e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	3304      	adds	r3, #4
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff fc8a 	bl	800215e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284e:	2b00      	cmp	r3, #0
 8002850:	d004      	beq.n	800285c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	3318      	adds	r3, #24
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff fc81 	bl	800215e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002860:	2201      	movs	r2, #1
 8002862:	409a      	lsls	r2, r3
 8002864:	4b23      	ldr	r3, [pc, #140]	; (80028f4 <xTaskIncrementTick+0x15c>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4313      	orrs	r3, r2
 800286a:	4a22      	ldr	r2, [pc, #136]	; (80028f4 <xTaskIncrementTick+0x15c>)
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002872:	4613      	mov	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	4413      	add	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4a1f      	ldr	r2, [pc, #124]	; (80028f8 <xTaskIncrementTick+0x160>)
 800287c:	441a      	add	r2, r3
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	3304      	adds	r3, #4
 8002882:	4619      	mov	r1, r3
 8002884:	4610      	mov	r0, r2
 8002886:	f7ff fc0d 	bl	80020a4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800288e:	4b1b      	ldr	r3, [pc, #108]	; (80028fc <xTaskIncrementTick+0x164>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002894:	429a      	cmp	r2, r3
 8002896:	d3b9      	bcc.n	800280c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002898:	2301      	movs	r3, #1
 800289a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800289c:	e7b6      	b.n	800280c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800289e:	4b17      	ldr	r3, [pc, #92]	; (80028fc <xTaskIncrementTick+0x164>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028a4:	4914      	ldr	r1, [pc, #80]	; (80028f8 <xTaskIncrementTick+0x160>)
 80028a6:	4613      	mov	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	440b      	add	r3, r1
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d901      	bls.n	80028ba <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80028b6:	2301      	movs	r3, #1
 80028b8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80028ba:	4b11      	ldr	r3, [pc, #68]	; (8002900 <xTaskIncrementTick+0x168>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d007      	beq.n	80028d2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80028c2:	2301      	movs	r3, #1
 80028c4:	617b      	str	r3, [r7, #20]
 80028c6:	e004      	b.n	80028d2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80028c8:	4b0e      	ldr	r3, [pc, #56]	; (8002904 <xTaskIncrementTick+0x16c>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	3301      	adds	r3, #1
 80028ce:	4a0d      	ldr	r2, [pc, #52]	; (8002904 <xTaskIncrementTick+0x16c>)
 80028d0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80028d2:	697b      	ldr	r3, [r7, #20]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3718      	adds	r7, #24
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	200004a4 	.word	0x200004a4
 80028e0:	20000480 	.word	0x20000480
 80028e4:	20000434 	.word	0x20000434
 80028e8:	20000438 	.word	0x20000438
 80028ec:	20000494 	.word	0x20000494
 80028f0:	2000049c 	.word	0x2000049c
 80028f4:	20000484 	.word	0x20000484
 80028f8:	20000380 	.word	0x20000380
 80028fc:	2000037c 	.word	0x2000037c
 8002900:	20000490 	.word	0x20000490
 8002904:	2000048c 	.word	0x2000048c

08002908 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002908:	b480      	push	{r7}
 800290a:	b087      	sub	sp, #28
 800290c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800290e:	4b29      	ldr	r3, [pc, #164]	; (80029b4 <vTaskSwitchContext+0xac>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002916:	4b28      	ldr	r3, [pc, #160]	; (80029b8 <vTaskSwitchContext+0xb0>)
 8002918:	2201      	movs	r2, #1
 800291a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800291c:	e044      	b.n	80029a8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800291e:	4b26      	ldr	r3, [pc, #152]	; (80029b8 <vTaskSwitchContext+0xb0>)
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002924:	4b25      	ldr	r3, [pc, #148]	; (80029bc <vTaskSwitchContext+0xb4>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	fab3 f383 	clz	r3, r3
 8002930:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002932:	7afb      	ldrb	r3, [r7, #11]
 8002934:	f1c3 031f 	rsb	r3, r3, #31
 8002938:	617b      	str	r3, [r7, #20]
 800293a:	4921      	ldr	r1, [pc, #132]	; (80029c0 <vTaskSwitchContext+0xb8>)
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	4613      	mov	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	440b      	add	r3, r1
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d10a      	bne.n	8002964 <vTaskSwitchContext+0x5c>
	__asm volatile
 800294e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002952:	f383 8811 	msr	BASEPRI, r3
 8002956:	f3bf 8f6f 	isb	sy
 800295a:	f3bf 8f4f 	dsb	sy
 800295e:	607b      	str	r3, [r7, #4]
}
 8002960:	bf00      	nop
 8002962:	e7fe      	b.n	8002962 <vTaskSwitchContext+0x5a>
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	4613      	mov	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4a14      	ldr	r2, [pc, #80]	; (80029c0 <vTaskSwitchContext+0xb8>)
 8002970:	4413      	add	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	605a      	str	r2, [r3, #4]
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	3308      	adds	r3, #8
 8002986:	429a      	cmp	r2, r3
 8002988:	d104      	bne.n	8002994 <vTaskSwitchContext+0x8c>
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	605a      	str	r2, [r3, #4]
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	4a0a      	ldr	r2, [pc, #40]	; (80029c4 <vTaskSwitchContext+0xbc>)
 800299c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800299e:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <vTaskSwitchContext+0xbc>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	334c      	adds	r3, #76	; 0x4c
 80029a4:	4a08      	ldr	r2, [pc, #32]	; (80029c8 <vTaskSwitchContext+0xc0>)
 80029a6:	6013      	str	r3, [r2, #0]
}
 80029a8:	bf00      	nop
 80029aa:	371c      	adds	r7, #28
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	200004a4 	.word	0x200004a4
 80029b8:	20000490 	.word	0x20000490
 80029bc:	20000484 	.word	0x20000484
 80029c0:	20000380 	.word	0x20000380
 80029c4:	2000037c 	.word	0x2000037c
 80029c8:	2000005c 	.word	0x2000005c

080029cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80029d4:	f000 f852 	bl	8002a7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80029d8:	4b06      	ldr	r3, [pc, #24]	; (80029f4 <prvIdleTask+0x28>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d9f9      	bls.n	80029d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80029e0:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <prvIdleTask+0x2c>)
 80029e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	f3bf 8f4f 	dsb	sy
 80029ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80029f0:	e7f0      	b.n	80029d4 <prvIdleTask+0x8>
 80029f2:	bf00      	nop
 80029f4:	20000380 	.word	0x20000380
 80029f8:	e000ed04 	.word	0xe000ed04

080029fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a02:	2300      	movs	r3, #0
 8002a04:	607b      	str	r3, [r7, #4]
 8002a06:	e00c      	b.n	8002a22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4413      	add	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4a12      	ldr	r2, [pc, #72]	; (8002a5c <prvInitialiseTaskLists+0x60>)
 8002a14:	4413      	add	r3, r2
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff fb17 	bl	800204a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	607b      	str	r3, [r7, #4]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b06      	cmp	r3, #6
 8002a26:	d9ef      	bls.n	8002a08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002a28:	480d      	ldr	r0, [pc, #52]	; (8002a60 <prvInitialiseTaskLists+0x64>)
 8002a2a:	f7ff fb0e 	bl	800204a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002a2e:	480d      	ldr	r0, [pc, #52]	; (8002a64 <prvInitialiseTaskLists+0x68>)
 8002a30:	f7ff fb0b 	bl	800204a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002a34:	480c      	ldr	r0, [pc, #48]	; (8002a68 <prvInitialiseTaskLists+0x6c>)
 8002a36:	f7ff fb08 	bl	800204a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002a3a:	480c      	ldr	r0, [pc, #48]	; (8002a6c <prvInitialiseTaskLists+0x70>)
 8002a3c:	f7ff fb05 	bl	800204a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002a40:	480b      	ldr	r0, [pc, #44]	; (8002a70 <prvInitialiseTaskLists+0x74>)
 8002a42:	f7ff fb02 	bl	800204a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002a46:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <prvInitialiseTaskLists+0x78>)
 8002a48:	4a05      	ldr	r2, [pc, #20]	; (8002a60 <prvInitialiseTaskLists+0x64>)
 8002a4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002a4c:	4b0a      	ldr	r3, [pc, #40]	; (8002a78 <prvInitialiseTaskLists+0x7c>)
 8002a4e:	4a05      	ldr	r2, [pc, #20]	; (8002a64 <prvInitialiseTaskLists+0x68>)
 8002a50:	601a      	str	r2, [r3, #0]
}
 8002a52:	bf00      	nop
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20000380 	.word	0x20000380
 8002a60:	2000040c 	.word	0x2000040c
 8002a64:	20000420 	.word	0x20000420
 8002a68:	2000043c 	.word	0x2000043c
 8002a6c:	20000450 	.word	0x20000450
 8002a70:	20000468 	.word	0x20000468
 8002a74:	20000434 	.word	0x20000434
 8002a78:	20000438 	.word	0x20000438

08002a7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a82:	e019      	b.n	8002ab8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002a84:	f000 fa2e 	bl	8002ee4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a88:	4b10      	ldr	r3, [pc, #64]	; (8002acc <prvCheckTasksWaitingTermination+0x50>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3304      	adds	r3, #4
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff fb62 	bl	800215e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002a9a:	4b0d      	ldr	r3, [pc, #52]	; (8002ad0 <prvCheckTasksWaitingTermination+0x54>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	4a0b      	ldr	r2, [pc, #44]	; (8002ad0 <prvCheckTasksWaitingTermination+0x54>)
 8002aa2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <prvCheckTasksWaitingTermination+0x58>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	4a0a      	ldr	r2, [pc, #40]	; (8002ad4 <prvCheckTasksWaitingTermination+0x58>)
 8002aac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002aae:	f000 fa49 	bl	8002f44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f810 	bl	8002ad8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ab8:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <prvCheckTasksWaitingTermination+0x58>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1e1      	bne.n	8002a84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002ac0:	bf00      	nop
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	20000450 	.word	0x20000450
 8002ad0:	2000047c 	.word	0x2000047c
 8002ad4:	20000464 	.word	0x20000464

08002ad8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	334c      	adds	r3, #76	; 0x4c
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f000 fcd1 	bl	800348c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d108      	bne.n	8002b06 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af8:	4618      	mov	r0, r3
 8002afa:	f000 fba1 	bl	8003240 <vPortFree>
				vPortFree( pxTCB );
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 fb9e 	bl	8003240 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002b04:	e018      	b.n	8002b38 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d103      	bne.n	8002b18 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 fb95 	bl	8003240 <vPortFree>
	}
 8002b16:	e00f      	b.n	8002b38 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d00a      	beq.n	8002b38 <prvDeleteTCB+0x60>
	__asm volatile
 8002b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b26:	f383 8811 	msr	BASEPRI, r3
 8002b2a:	f3bf 8f6f 	isb	sy
 8002b2e:	f3bf 8f4f 	dsb	sy
 8002b32:	60fb      	str	r3, [r7, #12]
}
 8002b34:	bf00      	nop
 8002b36:	e7fe      	b.n	8002b36 <prvDeleteTCB+0x5e>
	}
 8002b38:	bf00      	nop
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b46:	4b0c      	ldr	r3, [pc, #48]	; (8002b78 <prvResetNextTaskUnblockTime+0x38>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d104      	bne.n	8002b5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002b50:	4b0a      	ldr	r3, [pc, #40]	; (8002b7c <prvResetNextTaskUnblockTime+0x3c>)
 8002b52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002b58:	e008      	b.n	8002b6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b5a:	4b07      	ldr	r3, [pc, #28]	; (8002b78 <prvResetNextTaskUnblockTime+0x38>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	4a04      	ldr	r2, [pc, #16]	; (8002b7c <prvResetNextTaskUnblockTime+0x3c>)
 8002b6a:	6013      	str	r3, [r2, #0]
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	20000434 	.word	0x20000434
 8002b7c:	2000049c 	.word	0x2000049c

08002b80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002b86:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <xTaskGetSchedulerState+0x34>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d102      	bne.n	8002b94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	607b      	str	r3, [r7, #4]
 8002b92:	e008      	b.n	8002ba6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b94:	4b08      	ldr	r3, [pc, #32]	; (8002bb8 <xTaskGetSchedulerState+0x38>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d102      	bne.n	8002ba2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	607b      	str	r3, [r7, #4]
 8002ba0:	e001      	b.n	8002ba6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002ba6:	687b      	ldr	r3, [r7, #4]
	}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	20000488 	.word	0x20000488
 8002bb8:	200004a4 	.word	0x200004a4

08002bbc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002bc6:	4b29      	ldr	r3, [pc, #164]	; (8002c6c <prvAddCurrentTaskToDelayedList+0xb0>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002bcc:	4b28      	ldr	r3, [pc, #160]	; (8002c70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7ff fac3 	bl	800215e <uxListRemove>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10b      	bne.n	8002bf6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002bde:	4b24      	ldr	r3, [pc, #144]	; (8002c70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be4:	2201      	movs	r2, #1
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	43da      	mvns	r2, r3
 8002bec:	4b21      	ldr	r3, [pc, #132]	; (8002c74 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	4a20      	ldr	r2, [pc, #128]	; (8002c74 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002bf4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bfc:	d10a      	bne.n	8002c14 <prvAddCurrentTaskToDelayedList+0x58>
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d007      	beq.n	8002c14 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002c04:	4b1a      	ldr	r3, [pc, #104]	; (8002c70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	3304      	adds	r3, #4
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	481a      	ldr	r0, [pc, #104]	; (8002c78 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002c0e:	f7ff fa49 	bl	80020a4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002c12:	e026      	b.n	8002c62 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4413      	add	r3, r2
 8002c1a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002c1c:	4b14      	ldr	r3, [pc, #80]	; (8002c70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68ba      	ldr	r2, [r7, #8]
 8002c22:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d209      	bcs.n	8002c40 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002c2c:	4b13      	ldr	r3, [pc, #76]	; (8002c7c <prvAddCurrentTaskToDelayedList+0xc0>)
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	4b0f      	ldr	r3, [pc, #60]	; (8002c70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	3304      	adds	r3, #4
 8002c36:	4619      	mov	r1, r3
 8002c38:	4610      	mov	r0, r2
 8002c3a:	f7ff fa57 	bl	80020ec <vListInsert>
}
 8002c3e:	e010      	b.n	8002c62 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002c40:	4b0f      	ldr	r3, [pc, #60]	; (8002c80 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	4b0a      	ldr	r3, [pc, #40]	; (8002c70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	3304      	adds	r3, #4
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4610      	mov	r0, r2
 8002c4e:	f7ff fa4d 	bl	80020ec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002c52:	4b0c      	ldr	r3, [pc, #48]	; (8002c84 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d202      	bcs.n	8002c62 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002c5c:	4a09      	ldr	r2, [pc, #36]	; (8002c84 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	6013      	str	r3, [r2, #0]
}
 8002c62:	bf00      	nop
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000480 	.word	0x20000480
 8002c70:	2000037c 	.word	0x2000037c
 8002c74:	20000484 	.word	0x20000484
 8002c78:	20000468 	.word	0x20000468
 8002c7c:	20000438 	.word	0x20000438
 8002c80:	20000434 	.word	0x20000434
 8002c84:	2000049c 	.word	0x2000049c

08002c88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	3b04      	subs	r3, #4
 8002c98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ca0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	3b04      	subs	r3, #4
 8002ca6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	f023 0201 	bic.w	r2, r3, #1
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	3b04      	subs	r3, #4
 8002cb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002cb8:	4a0c      	ldr	r2, [pc, #48]	; (8002cec <pxPortInitialiseStack+0x64>)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	3b14      	subs	r3, #20
 8002cc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	3b04      	subs	r3, #4
 8002cce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f06f 0202 	mvn.w	r2, #2
 8002cd6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	3b20      	subs	r3, #32
 8002cdc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002cde:	68fb      	ldr	r3, [r7, #12]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	08002cf1 	.word	0x08002cf1

08002cf0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002cfa:	4b12      	ldr	r3, [pc, #72]	; (8002d44 <prvTaskExitError+0x54>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d02:	d00a      	beq.n	8002d1a <prvTaskExitError+0x2a>
	__asm volatile
 8002d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d08:	f383 8811 	msr	BASEPRI, r3
 8002d0c:	f3bf 8f6f 	isb	sy
 8002d10:	f3bf 8f4f 	dsb	sy
 8002d14:	60fb      	str	r3, [r7, #12]
}
 8002d16:	bf00      	nop
 8002d18:	e7fe      	b.n	8002d18 <prvTaskExitError+0x28>
	__asm volatile
 8002d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d1e:	f383 8811 	msr	BASEPRI, r3
 8002d22:	f3bf 8f6f 	isb	sy
 8002d26:	f3bf 8f4f 	dsb	sy
 8002d2a:	60bb      	str	r3, [r7, #8]
}
 8002d2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002d2e:	bf00      	nop
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0fc      	beq.n	8002d30 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002d36:	bf00      	nop
 8002d38:	bf00      	nop
 8002d3a:	3714      	adds	r7, #20
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	2000000c 	.word	0x2000000c
	...

08002d50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002d50:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <pxCurrentTCBConst2>)
 8002d52:	6819      	ldr	r1, [r3, #0]
 8002d54:	6808      	ldr	r0, [r1, #0]
 8002d56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d5a:	f380 8809 	msr	PSP, r0
 8002d5e:	f3bf 8f6f 	isb	sy
 8002d62:	f04f 0000 	mov.w	r0, #0
 8002d66:	f380 8811 	msr	BASEPRI, r0
 8002d6a:	4770      	bx	lr
 8002d6c:	f3af 8000 	nop.w

08002d70 <pxCurrentTCBConst2>:
 8002d70:	2000037c 	.word	0x2000037c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002d74:	bf00      	nop
 8002d76:	bf00      	nop

08002d78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002d78:	4808      	ldr	r0, [pc, #32]	; (8002d9c <prvPortStartFirstTask+0x24>)
 8002d7a:	6800      	ldr	r0, [r0, #0]
 8002d7c:	6800      	ldr	r0, [r0, #0]
 8002d7e:	f380 8808 	msr	MSP, r0
 8002d82:	f04f 0000 	mov.w	r0, #0
 8002d86:	f380 8814 	msr	CONTROL, r0
 8002d8a:	b662      	cpsie	i
 8002d8c:	b661      	cpsie	f
 8002d8e:	f3bf 8f4f 	dsb	sy
 8002d92:	f3bf 8f6f 	isb	sy
 8002d96:	df00      	svc	0
 8002d98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002d9a:	bf00      	nop
 8002d9c:	e000ed08 	.word	0xe000ed08

08002da0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002da6:	4b46      	ldr	r3, [pc, #280]	; (8002ec0 <xPortStartScheduler+0x120>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a46      	ldr	r2, [pc, #280]	; (8002ec4 <xPortStartScheduler+0x124>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d10a      	bne.n	8002dc6 <xPortStartScheduler+0x26>
	__asm volatile
 8002db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db4:	f383 8811 	msr	BASEPRI, r3
 8002db8:	f3bf 8f6f 	isb	sy
 8002dbc:	f3bf 8f4f 	dsb	sy
 8002dc0:	613b      	str	r3, [r7, #16]
}
 8002dc2:	bf00      	nop
 8002dc4:	e7fe      	b.n	8002dc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002dc6:	4b3e      	ldr	r3, [pc, #248]	; (8002ec0 <xPortStartScheduler+0x120>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a3f      	ldr	r2, [pc, #252]	; (8002ec8 <xPortStartScheduler+0x128>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d10a      	bne.n	8002de6 <xPortStartScheduler+0x46>
	__asm volatile
 8002dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd4:	f383 8811 	msr	BASEPRI, r3
 8002dd8:	f3bf 8f6f 	isb	sy
 8002ddc:	f3bf 8f4f 	dsb	sy
 8002de0:	60fb      	str	r3, [r7, #12]
}
 8002de2:	bf00      	nop
 8002de4:	e7fe      	b.n	8002de4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002de6:	4b39      	ldr	r3, [pc, #228]	; (8002ecc <xPortStartScheduler+0x12c>)
 8002de8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	22ff      	movs	r2, #255	; 0xff
 8002df6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002e00:	78fb      	ldrb	r3, [r7, #3]
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	4b31      	ldr	r3, [pc, #196]	; (8002ed0 <xPortStartScheduler+0x130>)
 8002e0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002e0e:	4b31      	ldr	r3, [pc, #196]	; (8002ed4 <xPortStartScheduler+0x134>)
 8002e10:	2207      	movs	r2, #7
 8002e12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e14:	e009      	b.n	8002e2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8002e16:	4b2f      	ldr	r3, [pc, #188]	; (8002ed4 <xPortStartScheduler+0x134>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	4a2d      	ldr	r2, [pc, #180]	; (8002ed4 <xPortStartScheduler+0x134>)
 8002e1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002e20:	78fb      	ldrb	r3, [r7, #3]
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e2a:	78fb      	ldrb	r3, [r7, #3]
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e32:	2b80      	cmp	r3, #128	; 0x80
 8002e34:	d0ef      	beq.n	8002e16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002e36:	4b27      	ldr	r3, [pc, #156]	; (8002ed4 <xPortStartScheduler+0x134>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f1c3 0307 	rsb	r3, r3, #7
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d00a      	beq.n	8002e58 <xPortStartScheduler+0xb8>
	__asm volatile
 8002e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e46:	f383 8811 	msr	BASEPRI, r3
 8002e4a:	f3bf 8f6f 	isb	sy
 8002e4e:	f3bf 8f4f 	dsb	sy
 8002e52:	60bb      	str	r3, [r7, #8]
}
 8002e54:	bf00      	nop
 8002e56:	e7fe      	b.n	8002e56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002e58:	4b1e      	ldr	r3, [pc, #120]	; (8002ed4 <xPortStartScheduler+0x134>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	021b      	lsls	r3, r3, #8
 8002e5e:	4a1d      	ldr	r2, [pc, #116]	; (8002ed4 <xPortStartScheduler+0x134>)
 8002e60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002e62:	4b1c      	ldr	r3, [pc, #112]	; (8002ed4 <xPortStartScheduler+0x134>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e6a:	4a1a      	ldr	r2, [pc, #104]	; (8002ed4 <xPortStartScheduler+0x134>)
 8002e6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002e76:	4b18      	ldr	r3, [pc, #96]	; (8002ed8 <xPortStartScheduler+0x138>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a17      	ldr	r2, [pc, #92]	; (8002ed8 <xPortStartScheduler+0x138>)
 8002e7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002e82:	4b15      	ldr	r3, [pc, #84]	; (8002ed8 <xPortStartScheduler+0x138>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a14      	ldr	r2, [pc, #80]	; (8002ed8 <xPortStartScheduler+0x138>)
 8002e88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002e8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002e8e:	f000 f8dd 	bl	800304c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002e92:	4b12      	ldr	r3, [pc, #72]	; (8002edc <xPortStartScheduler+0x13c>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002e98:	f000 f8fc 	bl	8003094 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002e9c:	4b10      	ldr	r3, [pc, #64]	; (8002ee0 <xPortStartScheduler+0x140>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a0f      	ldr	r2, [pc, #60]	; (8002ee0 <xPortStartScheduler+0x140>)
 8002ea2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002ea6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002ea8:	f7ff ff66 	bl	8002d78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002eac:	f7ff fd2c 	bl	8002908 <vTaskSwitchContext>
	prvTaskExitError();
 8002eb0:	f7ff ff1e 	bl	8002cf0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	e000ed00 	.word	0xe000ed00
 8002ec4:	410fc271 	.word	0x410fc271
 8002ec8:	410fc270 	.word	0x410fc270
 8002ecc:	e000e400 	.word	0xe000e400
 8002ed0:	200004a8 	.word	0x200004a8
 8002ed4:	200004ac 	.word	0x200004ac
 8002ed8:	e000ed20 	.word	0xe000ed20
 8002edc:	2000000c 	.word	0x2000000c
 8002ee0:	e000ef34 	.word	0xe000ef34

08002ee4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
	__asm volatile
 8002eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eee:	f383 8811 	msr	BASEPRI, r3
 8002ef2:	f3bf 8f6f 	isb	sy
 8002ef6:	f3bf 8f4f 	dsb	sy
 8002efa:	607b      	str	r3, [r7, #4]
}
 8002efc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002efe:	4b0f      	ldr	r3, [pc, #60]	; (8002f3c <vPortEnterCritical+0x58>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	3301      	adds	r3, #1
 8002f04:	4a0d      	ldr	r2, [pc, #52]	; (8002f3c <vPortEnterCritical+0x58>)
 8002f06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002f08:	4b0c      	ldr	r3, [pc, #48]	; (8002f3c <vPortEnterCritical+0x58>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d10f      	bne.n	8002f30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002f10:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <vPortEnterCritical+0x5c>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00a      	beq.n	8002f30 <vPortEnterCritical+0x4c>
	__asm volatile
 8002f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1e:	f383 8811 	msr	BASEPRI, r3
 8002f22:	f3bf 8f6f 	isb	sy
 8002f26:	f3bf 8f4f 	dsb	sy
 8002f2a:	603b      	str	r3, [r7, #0]
}
 8002f2c:	bf00      	nop
 8002f2e:	e7fe      	b.n	8002f2e <vPortEnterCritical+0x4a>
	}
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	2000000c 	.word	0x2000000c
 8002f40:	e000ed04 	.word	0xe000ed04

08002f44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002f4a:	4b12      	ldr	r3, [pc, #72]	; (8002f94 <vPortExitCritical+0x50>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10a      	bne.n	8002f68 <vPortExitCritical+0x24>
	__asm volatile
 8002f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f56:	f383 8811 	msr	BASEPRI, r3
 8002f5a:	f3bf 8f6f 	isb	sy
 8002f5e:	f3bf 8f4f 	dsb	sy
 8002f62:	607b      	str	r3, [r7, #4]
}
 8002f64:	bf00      	nop
 8002f66:	e7fe      	b.n	8002f66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002f68:	4b0a      	ldr	r3, [pc, #40]	; (8002f94 <vPortExitCritical+0x50>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	4a09      	ldr	r2, [pc, #36]	; (8002f94 <vPortExitCritical+0x50>)
 8002f70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002f72:	4b08      	ldr	r3, [pc, #32]	; (8002f94 <vPortExitCritical+0x50>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d105      	bne.n	8002f86 <vPortExitCritical+0x42>
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002f84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	2000000c 	.word	0x2000000c
	...

08002fa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002fa0:	f3ef 8009 	mrs	r0, PSP
 8002fa4:	f3bf 8f6f 	isb	sy
 8002fa8:	4b15      	ldr	r3, [pc, #84]	; (8003000 <pxCurrentTCBConst>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	f01e 0f10 	tst.w	lr, #16
 8002fb0:	bf08      	it	eq
 8002fb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002fb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fba:	6010      	str	r0, [r2, #0]
 8002fbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002fc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002fc4:	f380 8811 	msr	BASEPRI, r0
 8002fc8:	f3bf 8f4f 	dsb	sy
 8002fcc:	f3bf 8f6f 	isb	sy
 8002fd0:	f7ff fc9a 	bl	8002908 <vTaskSwitchContext>
 8002fd4:	f04f 0000 	mov.w	r0, #0
 8002fd8:	f380 8811 	msr	BASEPRI, r0
 8002fdc:	bc09      	pop	{r0, r3}
 8002fde:	6819      	ldr	r1, [r3, #0]
 8002fe0:	6808      	ldr	r0, [r1, #0]
 8002fe2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fe6:	f01e 0f10 	tst.w	lr, #16
 8002fea:	bf08      	it	eq
 8002fec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002ff0:	f380 8809 	msr	PSP, r0
 8002ff4:	f3bf 8f6f 	isb	sy
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	f3af 8000 	nop.w

08003000 <pxCurrentTCBConst>:
 8003000:	2000037c 	.word	0x2000037c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003004:	bf00      	nop
 8003006:	bf00      	nop

08003008 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
	__asm volatile
 800300e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003012:	f383 8811 	msr	BASEPRI, r3
 8003016:	f3bf 8f6f 	isb	sy
 800301a:	f3bf 8f4f 	dsb	sy
 800301e:	607b      	str	r3, [r7, #4]
}
 8003020:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003022:	f7ff fbb9 	bl	8002798 <xTaskIncrementTick>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d003      	beq.n	8003034 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800302c:	4b06      	ldr	r3, [pc, #24]	; (8003048 <xPortSysTickHandler+0x40>)
 800302e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	2300      	movs	r3, #0
 8003036:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	f383 8811 	msr	BASEPRI, r3
}
 800303e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003040:	bf00      	nop
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	e000ed04 	.word	0xe000ed04

0800304c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003050:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <vPortSetupTimerInterrupt+0x34>)
 8003052:	2200      	movs	r2, #0
 8003054:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003056:	4b0b      	ldr	r3, [pc, #44]	; (8003084 <vPortSetupTimerInterrupt+0x38>)
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800305c:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <vPortSetupTimerInterrupt+0x3c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a0a      	ldr	r2, [pc, #40]	; (800308c <vPortSetupTimerInterrupt+0x40>)
 8003062:	fba2 2303 	umull	r2, r3, r2, r3
 8003066:	099b      	lsrs	r3, r3, #6
 8003068:	4a09      	ldr	r2, [pc, #36]	; (8003090 <vPortSetupTimerInterrupt+0x44>)
 800306a:	3b01      	subs	r3, #1
 800306c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800306e:	4b04      	ldr	r3, [pc, #16]	; (8003080 <vPortSetupTimerInterrupt+0x34>)
 8003070:	2207      	movs	r2, #7
 8003072:	601a      	str	r2, [r3, #0]
}
 8003074:	bf00      	nop
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	e000e010 	.word	0xe000e010
 8003084:	e000e018 	.word	0xe000e018
 8003088:	20000000 	.word	0x20000000
 800308c:	10624dd3 	.word	0x10624dd3
 8003090:	e000e014 	.word	0xe000e014

08003094 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003094:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80030a4 <vPortEnableVFP+0x10>
 8003098:	6801      	ldr	r1, [r0, #0]
 800309a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800309e:	6001      	str	r1, [r0, #0]
 80030a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80030a2:	bf00      	nop
 80030a4:	e000ed88 	.word	0xe000ed88

080030a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b08a      	sub	sp, #40	; 0x28
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80030b0:	2300      	movs	r3, #0
 80030b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80030b4:	f7ff fac6 	bl	8002644 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80030b8:	4b5b      	ldr	r3, [pc, #364]	; (8003228 <pvPortMalloc+0x180>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80030c0:	f000 f920 	bl	8003304 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80030c4:	4b59      	ldr	r3, [pc, #356]	; (800322c <pvPortMalloc+0x184>)
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4013      	ands	r3, r2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f040 8093 	bne.w	80031f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d01d      	beq.n	8003114 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80030d8:	2208      	movs	r2, #8
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4413      	add	r3, r2
 80030de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d014      	beq.n	8003114 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f023 0307 	bic.w	r3, r3, #7
 80030f0:	3308      	adds	r3, #8
 80030f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00a      	beq.n	8003114 <pvPortMalloc+0x6c>
	__asm volatile
 80030fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003102:	f383 8811 	msr	BASEPRI, r3
 8003106:	f3bf 8f6f 	isb	sy
 800310a:	f3bf 8f4f 	dsb	sy
 800310e:	617b      	str	r3, [r7, #20]
}
 8003110:	bf00      	nop
 8003112:	e7fe      	b.n	8003112 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d06e      	beq.n	80031f8 <pvPortMalloc+0x150>
 800311a:	4b45      	ldr	r3, [pc, #276]	; (8003230 <pvPortMalloc+0x188>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	429a      	cmp	r2, r3
 8003122:	d869      	bhi.n	80031f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003124:	4b43      	ldr	r3, [pc, #268]	; (8003234 <pvPortMalloc+0x18c>)
 8003126:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003128:	4b42      	ldr	r3, [pc, #264]	; (8003234 <pvPortMalloc+0x18c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800312e:	e004      	b.n	800313a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003132:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	429a      	cmp	r2, r3
 8003142:	d903      	bls.n	800314c <pvPortMalloc+0xa4>
 8003144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1f1      	bne.n	8003130 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800314c:	4b36      	ldr	r3, [pc, #216]	; (8003228 <pvPortMalloc+0x180>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003152:	429a      	cmp	r2, r3
 8003154:	d050      	beq.n	80031f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003156:	6a3b      	ldr	r3, [r7, #32]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2208      	movs	r2, #8
 800315c:	4413      	add	r3, r2
 800315e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	6a3b      	ldr	r3, [r7, #32]
 8003166:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	1ad2      	subs	r2, r2, r3
 8003170:	2308      	movs	r3, #8
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	429a      	cmp	r2, r3
 8003176:	d91f      	bls.n	80031b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4413      	add	r3, r2
 800317e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00a      	beq.n	80031a0 <pvPortMalloc+0xf8>
	__asm volatile
 800318a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318e:	f383 8811 	msr	BASEPRI, r3
 8003192:	f3bf 8f6f 	isb	sy
 8003196:	f3bf 8f4f 	dsb	sy
 800319a:	613b      	str	r3, [r7, #16]
}
 800319c:	bf00      	nop
 800319e:	e7fe      	b.n	800319e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	1ad2      	subs	r2, r2, r3
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80031ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80031b2:	69b8      	ldr	r0, [r7, #24]
 80031b4:	f000 f908 	bl	80033c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80031b8:	4b1d      	ldr	r3, [pc, #116]	; (8003230 <pvPortMalloc+0x188>)
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	4a1b      	ldr	r2, [pc, #108]	; (8003230 <pvPortMalloc+0x188>)
 80031c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80031c6:	4b1a      	ldr	r3, [pc, #104]	; (8003230 <pvPortMalloc+0x188>)
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	4b1b      	ldr	r3, [pc, #108]	; (8003238 <pvPortMalloc+0x190>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d203      	bcs.n	80031da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80031d2:	4b17      	ldr	r3, [pc, #92]	; (8003230 <pvPortMalloc+0x188>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a18      	ldr	r2, [pc, #96]	; (8003238 <pvPortMalloc+0x190>)
 80031d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	4b13      	ldr	r3, [pc, #76]	; (800322c <pvPortMalloc+0x184>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	431a      	orrs	r2, r3
 80031e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	2200      	movs	r2, #0
 80031ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80031ee:	4b13      	ldr	r3, [pc, #76]	; (800323c <pvPortMalloc+0x194>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	3301      	adds	r3, #1
 80031f4:	4a11      	ldr	r2, [pc, #68]	; (800323c <pvPortMalloc+0x194>)
 80031f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80031f8:	f7ff fa32 	bl	8002660 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00a      	beq.n	800321c <pvPortMalloc+0x174>
	__asm volatile
 8003206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800320a:	f383 8811 	msr	BASEPRI, r3
 800320e:	f3bf 8f6f 	isb	sy
 8003212:	f3bf 8f4f 	dsb	sy
 8003216:	60fb      	str	r3, [r7, #12]
}
 8003218:	bf00      	nop
 800321a:	e7fe      	b.n	800321a <pvPortMalloc+0x172>
	return pvReturn;
 800321c:	69fb      	ldr	r3, [r7, #28]
}
 800321e:	4618      	mov	r0, r3
 8003220:	3728      	adds	r7, #40	; 0x28
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	200040b8 	.word	0x200040b8
 800322c:	200040cc 	.word	0x200040cc
 8003230:	200040bc 	.word	0x200040bc
 8003234:	200040b0 	.word	0x200040b0
 8003238:	200040c0 	.word	0x200040c0
 800323c:	200040c4 	.word	0x200040c4

08003240 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d04d      	beq.n	80032ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003252:	2308      	movs	r3, #8
 8003254:	425b      	negs	r3, r3
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	4413      	add	r3, r2
 800325a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	4b24      	ldr	r3, [pc, #144]	; (80032f8 <vPortFree+0xb8>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4013      	ands	r3, r2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10a      	bne.n	8003284 <vPortFree+0x44>
	__asm volatile
 800326e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003272:	f383 8811 	msr	BASEPRI, r3
 8003276:	f3bf 8f6f 	isb	sy
 800327a:	f3bf 8f4f 	dsb	sy
 800327e:	60fb      	str	r3, [r7, #12]
}
 8003280:	bf00      	nop
 8003282:	e7fe      	b.n	8003282 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00a      	beq.n	80032a2 <vPortFree+0x62>
	__asm volatile
 800328c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003290:	f383 8811 	msr	BASEPRI, r3
 8003294:	f3bf 8f6f 	isb	sy
 8003298:	f3bf 8f4f 	dsb	sy
 800329c:	60bb      	str	r3, [r7, #8]
}
 800329e:	bf00      	nop
 80032a0:	e7fe      	b.n	80032a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	4b14      	ldr	r3, [pc, #80]	; (80032f8 <vPortFree+0xb8>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4013      	ands	r3, r2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d01e      	beq.n	80032ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d11a      	bne.n	80032ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	685a      	ldr	r2, [r3, #4]
 80032bc:	4b0e      	ldr	r3, [pc, #56]	; (80032f8 <vPortFree+0xb8>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	43db      	mvns	r3, r3
 80032c2:	401a      	ands	r2, r3
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80032c8:	f7ff f9bc 	bl	8002644 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	4b0a      	ldr	r3, [pc, #40]	; (80032fc <vPortFree+0xbc>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4413      	add	r3, r2
 80032d6:	4a09      	ldr	r2, [pc, #36]	; (80032fc <vPortFree+0xbc>)
 80032d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80032da:	6938      	ldr	r0, [r7, #16]
 80032dc:	f000 f874 	bl	80033c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80032e0:	4b07      	ldr	r3, [pc, #28]	; (8003300 <vPortFree+0xc0>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	3301      	adds	r3, #1
 80032e6:	4a06      	ldr	r2, [pc, #24]	; (8003300 <vPortFree+0xc0>)
 80032e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80032ea:	f7ff f9b9 	bl	8002660 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80032ee:	bf00      	nop
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	200040cc 	.word	0x200040cc
 80032fc:	200040bc 	.word	0x200040bc
 8003300:	200040c8 	.word	0x200040c8

08003304 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800330a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800330e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003310:	4b27      	ldr	r3, [pc, #156]	; (80033b0 <prvHeapInit+0xac>)
 8003312:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00c      	beq.n	8003338 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	3307      	adds	r3, #7
 8003322:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f023 0307 	bic.w	r3, r3, #7
 800332a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	4a1f      	ldr	r2, [pc, #124]	; (80033b0 <prvHeapInit+0xac>)
 8003334:	4413      	add	r3, r2
 8003336:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800333c:	4a1d      	ldr	r2, [pc, #116]	; (80033b4 <prvHeapInit+0xb0>)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003342:	4b1c      	ldr	r3, [pc, #112]	; (80033b4 <prvHeapInit+0xb0>)
 8003344:	2200      	movs	r2, #0
 8003346:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	4413      	add	r3, r2
 800334e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003350:	2208      	movs	r2, #8
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	1a9b      	subs	r3, r3, r2
 8003356:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f023 0307 	bic.w	r3, r3, #7
 800335e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	4a15      	ldr	r2, [pc, #84]	; (80033b8 <prvHeapInit+0xb4>)
 8003364:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003366:	4b14      	ldr	r3, [pc, #80]	; (80033b8 <prvHeapInit+0xb4>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2200      	movs	r2, #0
 800336c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800336e:	4b12      	ldr	r3, [pc, #72]	; (80033b8 <prvHeapInit+0xb4>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2200      	movs	r2, #0
 8003374:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	1ad2      	subs	r2, r2, r3
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003384:	4b0c      	ldr	r3, [pc, #48]	; (80033b8 <prvHeapInit+0xb4>)
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	4a0a      	ldr	r2, [pc, #40]	; (80033bc <prvHeapInit+0xb8>)
 8003392:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	4a09      	ldr	r2, [pc, #36]	; (80033c0 <prvHeapInit+0xbc>)
 800339a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800339c:	4b09      	ldr	r3, [pc, #36]	; (80033c4 <prvHeapInit+0xc0>)
 800339e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80033a2:	601a      	str	r2, [r3, #0]
}
 80033a4:	bf00      	nop
 80033a6:	3714      	adds	r7, #20
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	200004b0 	.word	0x200004b0
 80033b4:	200040b0 	.word	0x200040b0
 80033b8:	200040b8 	.word	0x200040b8
 80033bc:	200040c0 	.word	0x200040c0
 80033c0:	200040bc 	.word	0x200040bc
 80033c4:	200040cc 	.word	0x200040cc

080033c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80033d0:	4b28      	ldr	r3, [pc, #160]	; (8003474 <prvInsertBlockIntoFreeList+0xac>)
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	e002      	b.n	80033dc <prvInsertBlockIntoFreeList+0x14>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d8f7      	bhi.n	80033d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	4413      	add	r3, r2
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d108      	bne.n	800340a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	441a      	add	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	441a      	add	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	429a      	cmp	r2, r3
 800341c:	d118      	bne.n	8003450 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	4b15      	ldr	r3, [pc, #84]	; (8003478 <prvInsertBlockIntoFreeList+0xb0>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	429a      	cmp	r2, r3
 8003428:	d00d      	beq.n	8003446 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	441a      	add	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	e008      	b.n	8003458 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003446:	4b0c      	ldr	r3, [pc, #48]	; (8003478 <prvInsertBlockIntoFreeList+0xb0>)
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	e003      	b.n	8003458 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	429a      	cmp	r2, r3
 800345e:	d002      	beq.n	8003466 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003466:	bf00      	nop
 8003468:	3714      	adds	r7, #20
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	200040b0 	.word	0x200040b0
 8003478:	200040b8 	.word	0x200040b8

0800347c <memset>:
 800347c:	4402      	add	r2, r0
 800347e:	4603      	mov	r3, r0
 8003480:	4293      	cmp	r3, r2
 8003482:	d100      	bne.n	8003486 <memset+0xa>
 8003484:	4770      	bx	lr
 8003486:	f803 1b01 	strb.w	r1, [r3], #1
 800348a:	e7f9      	b.n	8003480 <memset+0x4>

0800348c <_reclaim_reent>:
 800348c:	4b29      	ldr	r3, [pc, #164]	; (8003534 <_reclaim_reent+0xa8>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4283      	cmp	r3, r0
 8003492:	b570      	push	{r4, r5, r6, lr}
 8003494:	4604      	mov	r4, r0
 8003496:	d04b      	beq.n	8003530 <_reclaim_reent+0xa4>
 8003498:	69c3      	ldr	r3, [r0, #28]
 800349a:	b143      	cbz	r3, 80034ae <_reclaim_reent+0x22>
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d144      	bne.n	800352c <_reclaim_reent+0xa0>
 80034a2:	69e3      	ldr	r3, [r4, #28]
 80034a4:	6819      	ldr	r1, [r3, #0]
 80034a6:	b111      	cbz	r1, 80034ae <_reclaim_reent+0x22>
 80034a8:	4620      	mov	r0, r4
 80034aa:	f000 f86b 	bl	8003584 <_free_r>
 80034ae:	6961      	ldr	r1, [r4, #20]
 80034b0:	b111      	cbz	r1, 80034b8 <_reclaim_reent+0x2c>
 80034b2:	4620      	mov	r0, r4
 80034b4:	f000 f866 	bl	8003584 <_free_r>
 80034b8:	69e1      	ldr	r1, [r4, #28]
 80034ba:	b111      	cbz	r1, 80034c2 <_reclaim_reent+0x36>
 80034bc:	4620      	mov	r0, r4
 80034be:	f000 f861 	bl	8003584 <_free_r>
 80034c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80034c4:	b111      	cbz	r1, 80034cc <_reclaim_reent+0x40>
 80034c6:	4620      	mov	r0, r4
 80034c8:	f000 f85c 	bl	8003584 <_free_r>
 80034cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80034ce:	b111      	cbz	r1, 80034d6 <_reclaim_reent+0x4a>
 80034d0:	4620      	mov	r0, r4
 80034d2:	f000 f857 	bl	8003584 <_free_r>
 80034d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80034d8:	b111      	cbz	r1, 80034e0 <_reclaim_reent+0x54>
 80034da:	4620      	mov	r0, r4
 80034dc:	f000 f852 	bl	8003584 <_free_r>
 80034e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80034e2:	b111      	cbz	r1, 80034ea <_reclaim_reent+0x5e>
 80034e4:	4620      	mov	r0, r4
 80034e6:	f000 f84d 	bl	8003584 <_free_r>
 80034ea:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80034ec:	b111      	cbz	r1, 80034f4 <_reclaim_reent+0x68>
 80034ee:	4620      	mov	r0, r4
 80034f0:	f000 f848 	bl	8003584 <_free_r>
 80034f4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80034f6:	b111      	cbz	r1, 80034fe <_reclaim_reent+0x72>
 80034f8:	4620      	mov	r0, r4
 80034fa:	f000 f843 	bl	8003584 <_free_r>
 80034fe:	6a23      	ldr	r3, [r4, #32]
 8003500:	b1b3      	cbz	r3, 8003530 <_reclaim_reent+0xa4>
 8003502:	4620      	mov	r0, r4
 8003504:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003508:	4718      	bx	r3
 800350a:	5949      	ldr	r1, [r1, r5]
 800350c:	b941      	cbnz	r1, 8003520 <_reclaim_reent+0x94>
 800350e:	3504      	adds	r5, #4
 8003510:	69e3      	ldr	r3, [r4, #28]
 8003512:	2d80      	cmp	r5, #128	; 0x80
 8003514:	68d9      	ldr	r1, [r3, #12]
 8003516:	d1f8      	bne.n	800350a <_reclaim_reent+0x7e>
 8003518:	4620      	mov	r0, r4
 800351a:	f000 f833 	bl	8003584 <_free_r>
 800351e:	e7c0      	b.n	80034a2 <_reclaim_reent+0x16>
 8003520:	680e      	ldr	r6, [r1, #0]
 8003522:	4620      	mov	r0, r4
 8003524:	f000 f82e 	bl	8003584 <_free_r>
 8003528:	4631      	mov	r1, r6
 800352a:	e7ef      	b.n	800350c <_reclaim_reent+0x80>
 800352c:	2500      	movs	r5, #0
 800352e:	e7ef      	b.n	8003510 <_reclaim_reent+0x84>
 8003530:	bd70      	pop	{r4, r5, r6, pc}
 8003532:	bf00      	nop
 8003534:	2000005c 	.word	0x2000005c

08003538 <__libc_init_array>:
 8003538:	b570      	push	{r4, r5, r6, lr}
 800353a:	4d0d      	ldr	r5, [pc, #52]	; (8003570 <__libc_init_array+0x38>)
 800353c:	4c0d      	ldr	r4, [pc, #52]	; (8003574 <__libc_init_array+0x3c>)
 800353e:	1b64      	subs	r4, r4, r5
 8003540:	10a4      	asrs	r4, r4, #2
 8003542:	2600      	movs	r6, #0
 8003544:	42a6      	cmp	r6, r4
 8003546:	d109      	bne.n	800355c <__libc_init_array+0x24>
 8003548:	4d0b      	ldr	r5, [pc, #44]	; (8003578 <__libc_init_array+0x40>)
 800354a:	4c0c      	ldr	r4, [pc, #48]	; (800357c <__libc_init_array+0x44>)
 800354c:	f000 f872 	bl	8003634 <_init>
 8003550:	1b64      	subs	r4, r4, r5
 8003552:	10a4      	asrs	r4, r4, #2
 8003554:	2600      	movs	r6, #0
 8003556:	42a6      	cmp	r6, r4
 8003558:	d105      	bne.n	8003566 <__libc_init_array+0x2e>
 800355a:	bd70      	pop	{r4, r5, r6, pc}
 800355c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003560:	4798      	blx	r3
 8003562:	3601      	adds	r6, #1
 8003564:	e7ee      	b.n	8003544 <__libc_init_array+0xc>
 8003566:	f855 3b04 	ldr.w	r3, [r5], #4
 800356a:	4798      	blx	r3
 800356c:	3601      	adds	r6, #1
 800356e:	e7f2      	b.n	8003556 <__libc_init_array+0x1e>
 8003570:	08003738 	.word	0x08003738
 8003574:	08003738 	.word	0x08003738
 8003578:	08003738 	.word	0x08003738
 800357c:	0800373c 	.word	0x0800373c

08003580 <__retarget_lock_acquire_recursive>:
 8003580:	4770      	bx	lr

08003582 <__retarget_lock_release_recursive>:
 8003582:	4770      	bx	lr

08003584 <_free_r>:
 8003584:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003586:	2900      	cmp	r1, #0
 8003588:	d044      	beq.n	8003614 <_free_r+0x90>
 800358a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800358e:	9001      	str	r0, [sp, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	f1a1 0404 	sub.w	r4, r1, #4
 8003596:	bfb8      	it	lt
 8003598:	18e4      	addlt	r4, r4, r3
 800359a:	f000 f83f 	bl	800361c <__malloc_lock>
 800359e:	4a1e      	ldr	r2, [pc, #120]	; (8003618 <_free_r+0x94>)
 80035a0:	9801      	ldr	r0, [sp, #4]
 80035a2:	6813      	ldr	r3, [r2, #0]
 80035a4:	b933      	cbnz	r3, 80035b4 <_free_r+0x30>
 80035a6:	6063      	str	r3, [r4, #4]
 80035a8:	6014      	str	r4, [r2, #0]
 80035aa:	b003      	add	sp, #12
 80035ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80035b0:	f000 b83a 	b.w	8003628 <__malloc_unlock>
 80035b4:	42a3      	cmp	r3, r4
 80035b6:	d908      	bls.n	80035ca <_free_r+0x46>
 80035b8:	6825      	ldr	r5, [r4, #0]
 80035ba:	1961      	adds	r1, r4, r5
 80035bc:	428b      	cmp	r3, r1
 80035be:	bf01      	itttt	eq
 80035c0:	6819      	ldreq	r1, [r3, #0]
 80035c2:	685b      	ldreq	r3, [r3, #4]
 80035c4:	1949      	addeq	r1, r1, r5
 80035c6:	6021      	streq	r1, [r4, #0]
 80035c8:	e7ed      	b.n	80035a6 <_free_r+0x22>
 80035ca:	461a      	mov	r2, r3
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	b10b      	cbz	r3, 80035d4 <_free_r+0x50>
 80035d0:	42a3      	cmp	r3, r4
 80035d2:	d9fa      	bls.n	80035ca <_free_r+0x46>
 80035d4:	6811      	ldr	r1, [r2, #0]
 80035d6:	1855      	adds	r5, r2, r1
 80035d8:	42a5      	cmp	r5, r4
 80035da:	d10b      	bne.n	80035f4 <_free_r+0x70>
 80035dc:	6824      	ldr	r4, [r4, #0]
 80035de:	4421      	add	r1, r4
 80035e0:	1854      	adds	r4, r2, r1
 80035e2:	42a3      	cmp	r3, r4
 80035e4:	6011      	str	r1, [r2, #0]
 80035e6:	d1e0      	bne.n	80035aa <_free_r+0x26>
 80035e8:	681c      	ldr	r4, [r3, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	6053      	str	r3, [r2, #4]
 80035ee:	440c      	add	r4, r1
 80035f0:	6014      	str	r4, [r2, #0]
 80035f2:	e7da      	b.n	80035aa <_free_r+0x26>
 80035f4:	d902      	bls.n	80035fc <_free_r+0x78>
 80035f6:	230c      	movs	r3, #12
 80035f8:	6003      	str	r3, [r0, #0]
 80035fa:	e7d6      	b.n	80035aa <_free_r+0x26>
 80035fc:	6825      	ldr	r5, [r4, #0]
 80035fe:	1961      	adds	r1, r4, r5
 8003600:	428b      	cmp	r3, r1
 8003602:	bf04      	itt	eq
 8003604:	6819      	ldreq	r1, [r3, #0]
 8003606:	685b      	ldreq	r3, [r3, #4]
 8003608:	6063      	str	r3, [r4, #4]
 800360a:	bf04      	itt	eq
 800360c:	1949      	addeq	r1, r1, r5
 800360e:	6021      	streq	r1, [r4, #0]
 8003610:	6054      	str	r4, [r2, #4]
 8003612:	e7ca      	b.n	80035aa <_free_r+0x26>
 8003614:	b003      	add	sp, #12
 8003616:	bd30      	pop	{r4, r5, pc}
 8003618:	2000420c 	.word	0x2000420c

0800361c <__malloc_lock>:
 800361c:	4801      	ldr	r0, [pc, #4]	; (8003624 <__malloc_lock+0x8>)
 800361e:	f7ff bfaf 	b.w	8003580 <__retarget_lock_acquire_recursive>
 8003622:	bf00      	nop
 8003624:	20004208 	.word	0x20004208

08003628 <__malloc_unlock>:
 8003628:	4801      	ldr	r0, [pc, #4]	; (8003630 <__malloc_unlock+0x8>)
 800362a:	f7ff bfaa 	b.w	8003582 <__retarget_lock_release_recursive>
 800362e:	bf00      	nop
 8003630:	20004208 	.word	0x20004208

08003634 <_init>:
 8003634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003636:	bf00      	nop
 8003638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800363a:	bc08      	pop	{r3}
 800363c:	469e      	mov	lr, r3
 800363e:	4770      	bx	lr

08003640 <_fini>:
 8003640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003642:	bf00      	nop
 8003644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003646:	bc08      	pop	{r3}
 8003648:	469e      	mov	lr, r3
 800364a:	4770      	bx	lr
