/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart2;

osThreadId defaultTaskHandle;
osThreadId led_blueHandle;
osThreadId led_greenHandle;
osThreadId led_whiteHandle;
osThreadId led_redHandle;
osThreadId uart1Handle;
osThreadId uart2Handle;
osThreadId queueHandle;
osMessageQId task_queueHandle;
osMutexId uartHandle;
/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
void StartDefaultTask(void const * argument);
void led_thread_blue(void const * argument);
void led_thread_green(void const * argument);
void led_thread_white(void const * argument);
void led_thread_red(void const * argument);
void uart_thread(void const * argument);
void uart2_thread(void const * argument);
void queue_thread(void const * argument);

/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of uart */
  osMutexDef(uart);
  uartHandle = osMutexCreate(osMutex(uart));

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of task_queue */
  osMessageQDef(task_queue, 16, uint16_t);
  task_queueHandle = osMessageCreate(osMessageQ(task_queue), NULL);

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* definition and creation of led_blue */
  osThreadDef(led_blue, led_thread_blue, osPriorityIdle, 0, 128);
  led_blueHandle = osThreadCreate(osThread(led_blue), NULL);

  /* definition and creation of led_green */
  osThreadDef(led_green, led_thread_green, osPriorityIdle, 0, 128);
  led_greenHandle = osThreadCreate(osThread(led_green), NULL);

  /* definition and creation of led_white */
  osThreadDef(led_white, led_thread_white, osPriorityIdle, 0, 128);
  led_whiteHandle = osThreadCreate(osThread(led_white), NULL);

  /* definition and creation of led_red */
  osThreadDef(led_red, led_thread_red, osPriorityIdle, 0, 128);
  led_redHandle = osThreadCreate(osThread(led_red), NULL);

  /* definition and creation of uart1 */
  osThreadDef(uart1, uart_thread, osPriorityNormal, 0, 128);
  uart1Handle = osThreadCreate(osThread(uart1), NULL);

  /* definition and creation of uart2 */
  osThreadDef(uart2, uart2_thread, osPriorityNormal, 0, 128);
  uart2Handle = osThreadCreate(osThread(uart2), NULL);

  /* definition and creation of queue */
  osThreadDef(queue, queue_thread, osPriorityNormal, 0, 128);
  queueHandle = osThreadCreate(osThread(queue), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LD2_Pin PA6 PA7 PA8
                           PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/* USER CODE BEGIN Header_StartDefaultTask */
/**
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
//	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
    osDelay(1);
  }
  /* USER CODE END 5 */
}

/* USER CODE BEGIN Header_led_thread_blue */
/**
* @brief Function implementing the led_blue thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_led_thread_blue */
void led_thread_blue(void const * argument)
{
  /* USER CODE BEGIN led_thread_blue */
  /* Infinite loop */
  for(;;)
  {
	  osMutexWait(uartHandle, osWaitForever);
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
	osMutexRelease(uartHandle);
    osDelay(50);
  }
  /* USER CODE END led_thread_blue */
}

/* USER CODE BEGIN Header_led_thread_green */
/**
* @brief Function implementing the led_green thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_led_thread_green */
void led_thread_green(void const * argument)
{
  /* USER CODE BEGIN led_thread_green */
  /* Infinite loop */
  for(;;)
  {
	  osMutexWait(uartHandle, osWaitForever);
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
    osMutexRelease(uartHandle);
    osDelay(18);
  }
  /* USER CODE END led_thread_green */
}

/* USER CODE BEGIN Header_led_thread_white */
/**
* @brief Function implementing the led_white thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_led_thread_white */
void led_thread_white(void const * argument)
{
  /* USER CODE BEGIN led_thread_white */
  /* Infinite loop */
  for(;;)
  {
	  osMutexWait(uartHandle, osWaitForever);
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
	osMutexRelease(uartHandle);
    osDelay(64);
  }
  /* USER CODE END led_thread_white */
}

/* USER CODE BEGIN Header_led_thread_red */
/**
* @brief Function implementing the led_red thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_led_thread_red */
void led_thread_red(void const * argument)
{
  /* USER CODE BEGIN led_thread_red */
  /* Infinite loop */
  for(;;)
  {
	osMutexWait(uartHandle, osWaitForever);
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
    osMutexRelease(uartHandle);
    osDelay(128);
  }
  /* USER CODE END led_thread_red */
}

/* USER CODE BEGIN Header_uart_thread */
/**
* @brief Function implementing the uart1 thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uart_thread */
void uart_thread(void const * argument)
{
  /* USER CODE BEGIN uart_thread */
	int threadID = 0; // threadID is 0 for one thread and 1 for another
	int idx = 0;
  /* Infinite loop */
  for(;;)
  {
	char buffer[32];
//	  osMutexWait(uartHandle, osWaitForever);
	sprintf(buffer, "TID: %d %d\r\n", threadID, idx);
	idx ++;
	osMessagePut(task_queueHandle, buffer, 1000);
//    HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
//    osMutexRelease(uartHandle);
//    osDelay(100);
  }
  /* USER CODE END uart_thread */
}

/* USER CODE BEGIN Header_uart2_thread */
/**
* @brief Function implementing the uart2 thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uart2_thread */
void uart2_thread(void const * argument)
{
  /* USER CODE BEGIN uart2_thread */
	int threadID = 1; // threadID is 0 for one thread and 1 for another
		int idx = 0;
	  /* Infinite loop */
	  for(;;)
	  {
		char buffer[32];
//		  osMutexWait(uartHandle, osWaitForever);
		sprintf(buffer, "TID: %d %d\r\n", threadID, idx);
		idx ++;
		osMessagePut(task_queueHandle, buffer, 1000);
//	    HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
//	    osMutexRelease(uartHandle);
	  }
  /* USER CODE END uart2_thread */
}

/* USER CODE BEGIN Header_queue_thread */
/**
* @brief Function implementing the queue thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_queue_thread */
void queue_thread(void const * argument)
{
  /* USER CODE BEGIN queue_thread */
  /* Infinite loop */
  for(;;)
  {
	  		osMutexWait(uartHandle, osWaitForever);
//	  		sprintf(buffer, "TID: %d %d\r\n", threadID, idx);
	  		osEvent event = osMessageGet(task_queueHandle, 1000);
	  char buf[32] = &event.value;
	  	    HAL_UART_Transmit(&huart2,buf,sizeof(buf), 1000);
	  	    osMutexRelease(uartHandle);
  }
  /* USER CODE END queue_thread */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
